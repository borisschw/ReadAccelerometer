
Home_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800a66c  0800a66c  0001a66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a74c  0800a74c  0001a74c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a754  0800a754  0001a754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a758  0800a758  0001a758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000148  20000000  0800a75c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000078b0  20000148  0800a8a4  00020148  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200079f8  0800a8a4  000279f8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 10 .debug_line   00010d07  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000396e1  00000000  00000000  00030e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000491c  00000000  00000000  0006a560  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002cc8  00000000  00000000  0006ee80  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002ac0  00000000  00000000  00071b48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00011618  00000000  00000000  00074608  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00085c20  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000c3b0  00000000  00000000  00085c9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000148 	.word	0x20000148
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a654 	.word	0x0800a654

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000014c 	.word	0x2000014c
 80001dc:	0800a654 	.word	0x0800a654

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000590:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005c8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000594:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000596:	e003      	b.n	80005a0 <LoopCopyDataInit>

08000598 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800059a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800059c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800059e:	3104      	adds	r1, #4

080005a0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80005a0:	480b      	ldr	r0, [pc, #44]	; (80005d0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80005a4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80005a6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80005a8:	d3f6      	bcc.n	8000598 <CopyDataInit>
	ldr	r2, =_sbss
 80005aa:	4a0b      	ldr	r2, [pc, #44]	; (80005d8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80005ac:	e002      	b.n	80005b4 <LoopFillZerobss>

080005ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80005ae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80005b0:	f842 3b04 	str.w	r3, [r2], #4

080005b4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <LoopForever+0x16>)
	cmp	r2, r3
 80005b6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80005b8:	d3f9      	bcc.n	80005ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005ba:	f004 f9a1 	bl	8004900 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005be:	f009 fbff 	bl	8009dc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005c2:	f000 f843 	bl	800064c <main>

080005c6 <LoopForever>:

LoopForever:
    b LoopForever
 80005c6:	e7fe      	b.n	80005c6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005c8:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 80005cc:	0800a75c 	.word	0x0800a75c
	ldr	r0, =_sdata
 80005d0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005d4:	20000148 	.word	0x20000148
	ldr	r2, =_sbss
 80005d8:	20000148 	.word	0x20000148
	ldr	r3, = _ebss
 80005dc:	200079f8 	.word	0x200079f8

080005e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005e0:	e7fe      	b.n	80005e0 <ADC1_IRQHandler>
	...

080005e4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80005ec:	4b11      	ldr	r3, [pc, #68]	; (8000634 <_sbrk+0x50>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d102      	bne.n	80005fa <_sbrk+0x16>
		heap_end = &end;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <_sbrk+0x50>)
 80005f6:	4a10      	ldr	r2, [pc, #64]	; (8000638 <_sbrk+0x54>)
 80005f8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <_sbrk+0x50>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <_sbrk+0x50>)
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4413      	add	r3, r2
 8000608:	466a      	mov	r2, sp
 800060a:	4293      	cmp	r3, r2
 800060c:	d907      	bls.n	800061e <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800060e:	f009 fbd1 	bl	8009db4 <__errno>
 8000612:	4602      	mov	r2, r0
 8000614:	230c      	movs	r3, #12
 8000616:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	e006      	b.n	800062c <_sbrk+0x48>
	}

	heap_end += incr;
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <_sbrk+0x50>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4413      	add	r3, r2
 8000626:	4a03      	ldr	r2, [pc, #12]	; (8000634 <_sbrk+0x50>)
 8000628:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800062a:	68fb      	ldr	r3, [r7, #12]
}
 800062c:	4618      	mov	r0, r3
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000164 	.word	0x20000164
 8000638:	200079f8 	.word	0x200079f8

0800063c <MX_MEMS_Init>:
#include "app_x-cube-mems1.h"
#include "main.h"
#include <stdio.h>

void MX_MEMS_Init(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* Initialize the peripherals and the MEMS components */

  /* USER CODE BEGIN MEMS_Init_PostTreatment */
  
  /* USER CODE END MEMS_Init_PostTreatment */
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
	...

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b5b0      	push	{r4, r5, r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/
  freespace1 = xPortGetFreeHeapSize();
 8000652:	f007 fda1 	bl	8008198 <xPortGetFreeHeapSize>
 8000656:	4602      	mov	r2, r0
 8000658:	4b2e      	ldr	r3, [pc, #184]	; (8000714 <main+0xc8>)
 800065a:	601a      	str	r2, [r3, #0]
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f004 f986 	bl	800496c <HAL_Init>


  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f8f6 	bl	8000850 <SystemClock_Config>


  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 f996 	bl	8000994 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000668:	f000 f964 	bl	8000934 <MX_USART2_UART_Init>


  while (IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO)!= HAL_OK)
 800066c:	e005      	b.n	800067a <main+0x2e>
   	 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2120      	movs	r1, #32
 8000672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000676:	f004 fceb 	bl	8005050 <HAL_GPIO_WritePin>
  while (IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO)!= HAL_OK)
 800067a:	2102      	movs	r1, #2
 800067c:	2000      	movs	r0, #0
 800067e:	f003 fe01 	bl	8004284 <IKS01A3_MOTION_SENSOR_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1f2      	bne.n	800066e <main+0x22>


  dataQueueHandle = xQueueCreate(25,sizeof(IKS01A3_MOTION_SENSOR_Axes_t));
 8000688:	2200      	movs	r2, #0
 800068a:	210c      	movs	r1, #12
 800068c:	2019      	movs	r0, #25
 800068e:	f008 f969 	bl	8008964 <xQueueGenericCreate>
 8000692:	4602      	mov	r2, r0
 8000694:	4b20      	ldr	r3, [pc, #128]	; (8000718 <main+0xcc>)
 8000696:	601a      	str	r2, [r3, #0]
  xMutex = xSemaphoreCreateMutex();
 8000698:	2001      	movs	r0, #1
 800069a:	f008 f9d5 	bl	8008a48 <xQueueCreateMutex>
 800069e:	4602      	mov	r2, r0
 80006a0:	4b1e      	ldr	r3, [pc, #120]	; (800071c <main+0xd0>)
 80006a2:	601a      	str	r2, [r3, #0]

  if ((dataQueueHandle != NULL) && (xMutex != NULL))
 80006a4:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <main+0xcc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d032      	beq.n	8000712 <main+0xc6>
 80006ac:	4b1b      	ldr	r3, [pc, #108]	; (800071c <main+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d02e      	beq.n	8000712 <main+0xc6>
  {

	  /* Create the thread(s) */
	  xTaskCreate(	vTaskLED ,		/* Pointer to the function that implements the task. */
 80006b4:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <main+0xd4>)
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	2301      	movs	r3, #1
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2300      	movs	r3, #0
 80006be:	22a0      	movs	r2, #160	; 0xa0
 80006c0:	4918      	ldr	r1, [pc, #96]	; (8000724 <main+0xd8>)
 80006c2:	4819      	ldr	r0, [pc, #100]	; (8000728 <main+0xdc>)
 80006c4:	f008 fcbe 	bl	8009044 <xTaskCreate>
							160,		/* Stack depth in words. */
							NULL,		/* We are not using the task parameter. */
							1,			/* This task will run at priority 1. */
							&vTaskLEDHandle);		/* Task handle. */

	  xTaskCreate( vTaskReadData, "TaskReadData", 200, NULL, 1, &vTaskReadDataHandle );
 80006c8:	4b18      	ldr	r3, [pc, #96]	; (800072c <main+0xe0>)
 80006ca:	9301      	str	r3, [sp, #4]
 80006cc:	2301      	movs	r3, #1
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	2300      	movs	r3, #0
 80006d2:	22c8      	movs	r2, #200	; 0xc8
 80006d4:	4916      	ldr	r1, [pc, #88]	; (8000730 <main+0xe4>)
 80006d6:	4817      	ldr	r0, [pc, #92]	; (8000734 <main+0xe8>)
 80006d8:	f008 fcb4 	bl	8009044 <xTaskCreate>
	  xTaskCreate( vTaskSndData, "TaskSndData", 200, NULL, 1, &vTaskReadDataHandle);
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <main+0xe0>)
 80006de:	9301      	str	r3, [sp, #4]
 80006e0:	2301      	movs	r3, #1
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	2300      	movs	r3, #0
 80006e6:	22c8      	movs	r2, #200	; 0xc8
 80006e8:	4913      	ldr	r1, [pc, #76]	; (8000738 <main+0xec>)
 80006ea:	4814      	ldr	r0, [pc, #80]	; (800073c <main+0xf0>)
 80006ec:	f008 fcaa 	bl	8009044 <xTaskCreate>

	  /* definition and creation of defaultTask */
	  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80006f0:	4b13      	ldr	r3, [pc, #76]	; (8000740 <main+0xf4>)
 80006f2:	1d3c      	adds	r4, r7, #4
 80006f4:	461d      	mov	r5, r3
 80006f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006fa:	682b      	ldr	r3, [r5, #0]
 80006fc:	6023      	str	r3, [r4, #0]
	  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f007 fbf2 	bl	8007eec <osThreadCreate>
 8000708:	4602      	mov	r2, r0
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <main+0xf8>)
 800070c:	601a      	str	r2, [r3, #0]

	  /* Start scheduler */
	  osKernelStart();
 800070e:	f007 fbe6 	bl	8007ede <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
 /* USER CODE BEGIN WHILE */
  while (1)
 8000712:	e7fe      	b.n	8000712 <main+0xc6>
 8000714:	200078d0 	.word	0x200078d0
 8000718:	20000168 	.word	0x20000168
 800071c:	200078d4 	.word	0x200078d4
 8000720:	2000016c 	.word	0x2000016c
 8000724:	0800a66c 	.word	0x0800a66c
 8000728:	08000749 	.word	0x08000749
 800072c:	20000170 	.word	0x20000170
 8000730:	0800a674 	.word	0x0800a674
 8000734:	08000785 	.word	0x08000785
 8000738:	0800a684 	.word	0x0800a684
 800073c:	080007d9 	.word	0x080007d9
 8000740:	0800a69c 	.word	0x0800a69c
 8000744:	200078c8 	.word	0x200078c8

08000748 <vTaskLED>:
  }
 /* USER CODE END 3 */
}

void vTaskLED(void *pvParameters )
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 125;
 8000750:	237d      	movs	r3, #125	; 0x7d
 8000752:	60fb      	str	r3, [r7, #12]

	xLastWakeTime = xTaskGetTickCount();
 8000754:	f008 ff3e 	bl	80095d4 <xTaskGetTickCount>
 8000758:	4603      	mov	r3, r0
 800075a:	60bb      	str	r3, [r7, #8]

	for( ;; )
	{
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 800075c:	f107 0308 	add.w	r3, r7, #8
 8000760:	68f9      	ldr	r1, [r7, #12]
 8000762:	4618      	mov	r0, r3
 8000764:	f008 fd98 	bl	8009298 <vTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8000768:	2120      	movs	r1, #32
 800076a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076e:	f004 fc87 	bl	8005080 <HAL_GPIO_TogglePin>
		freespace2 = xPortGetFreeHeapSize();
 8000772:	f007 fd11 	bl	8008198 <xPortGetFreeHeapSize>
 8000776:	4602      	mov	r2, r0
 8000778:	4b01      	ldr	r3, [pc, #4]	; (8000780 <vTaskLED+0x38>)
 800077a:	601a      	str	r2, [r3, #0]
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 800077c:	e7ee      	b.n	800075c <vTaskLED+0x14>
 800077e:	bf00      	nop
 8000780:	200078cc 	.word	0x200078cc

08000784 <vTaskReadData>:

}


void vTaskReadData( void *pvParameters )
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b088      	sub	sp, #32
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]

	IKS01A3_MOTION_SENSOR_Axes_t Axes;
	IKS01A3_MOTION_SENSOR_Axes_t *pAxes;
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 100;
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	61fb      	str	r3, [r7, #28]
	xLastWakeTime = xTaskGetTickCount();
 8000790:	f008 ff20 	bl	80095d4 <xTaskGetTickCount>
 8000794:	4603      	mov	r3, r0
 8000796:	60bb      	str	r3, [r7, #8]


	for( ;; )
	{

		vTaskSuspendAll ();
 8000798:	f008 fe72 	bl	8009480 <vTaskSuspendAll>
		IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO,&Axes);
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	461a      	mov	r2, r3
 80007a2:	2102      	movs	r1, #2
 80007a4:	2000      	movs	r0, #0
 80007a6:	f003 fe63 	bl	8004470 <IKS01A3_MOTION_SENSOR_GetAxes>
		pAxes = &Axes;
 80007aa:	f107 0310 	add.w	r3, r7, #16
 80007ae:	60fb      	str	r3, [r7, #12]
		xTaskResumeAll ();
 80007b0:	f008 fe74 	bl	800949c <xTaskResumeAll>

		xQueueSend(dataQueueHandle,(void *)&(pAxes),portMAX_DELAY);
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <vTaskReadData+0x50>)
 80007b6:	6818      	ldr	r0, [r3, #0]
 80007b8:	f107 010c 	add.w	r1, r7, #12
 80007bc:	2300      	movs	r3, #0
 80007be:	f04f 32ff 	mov.w	r2, #4294967295
 80007c2:	f008 f959 	bl	8008a78 <xQueueGenericSend>
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80007c6:	f107 0308 	add.w	r3, r7, #8
 80007ca:	69f9      	ldr	r1, [r7, #28]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f008 fd63 	bl	8009298 <vTaskDelayUntil>
		vTaskSuspendAll ();
 80007d2:	e7e1      	b.n	8000798 <vTaskReadData+0x14>
 80007d4:	20000168 	.word	0x20000168

080007d8 <vTaskSndData>:

	}
}

void vTaskSndData( void *pvParameters )
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08e      	sub	sp, #56	; 0x38
 80007dc:	af02      	add	r7, sp, #8
 80007de:	6078      	str	r0, [r7, #4]

	int32_t *pData;
	//static int32_t x = 0,y = 0 ,z = 0 ;
	char data[26] = "";
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
 80007f4:	829a      	strh	r2, [r3, #20]
	void *addr;
	for(;;){

		xQueueReceive(dataQueueHandle, &pData , portMAX_DELAY);
 80007f6:	4b13      	ldr	r3, [pc, #76]	; (8000844 <vTaskSndData+0x6c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80007fe:	f04f 32ff 	mov.w	r2, #4294967295
 8000802:	4618      	mov	r0, r3
 8000804:	f008 fa32 	bl	8008c6c <xQueueReceive>

		vTaskSuspendAll ();
 8000808:	f008 fe3a 	bl	8009480 <vTaskSuspendAll>
		addr = data;
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* x=  *pData
			 * y = *(pData + 1)
			 * z = *(pData + 2)
			 */
		sprintf(data,"x:%5ld y:%5ld z:%5ld\n\r", *pData,*(pData + 1),*(pData + 2));
 8000812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000818:	3304      	adds	r3, #4
 800081a:	6819      	ldr	r1, [r3, #0]
 800081c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800081e:	3308      	adds	r3, #8
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f107 000c 	add.w	r0, r7, #12
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	460b      	mov	r3, r1
 800082a:	4907      	ldr	r1, [pc, #28]	; (8000848 <vTaskSndData+0x70>)
 800082c:	f009 fb00 	bl	8009e30 <siprintf>
		HAL_UART_Transmit(&huart2, addr ,sizeof(data) ,10);
 8000830:	230a      	movs	r3, #10
 8000832:	221a      	movs	r2, #26
 8000834:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <vTaskSndData+0x74>)
 8000838:	f006 fe6a 	bl	8007510 <HAL_UART_Transmit>

		xTaskResumeAll ();
 800083c:	f008 fe2e 	bl	800949c <xTaskResumeAll>
		xQueueReceive(dataQueueHandle, &pData , portMAX_DELAY);
 8000840:	e7d9      	b.n	80007f6 <vTaskSndData+0x1e>
 8000842:	bf00      	nop
 8000844:	20000168 	.word	0x20000168
 8000848:	0800a6b0 	.word	0x0800a6b0
 800084c:	200078d8 	.word	0x200078d8

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b0b0      	sub	sp, #192	; 0xc0
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800085a:	2244      	movs	r2, #68	; 0x44
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f009 fadd 	bl	8009e1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000864:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000874:	463b      	mov	r3, r7
 8000876:	2268      	movs	r2, #104	; 0x68
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f009 facf 	bl	8009e1e <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000880:	2302      	movs	r3, #2
 8000882:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000884:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000888:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800088c:	2340      	movs	r3, #64	; 0x40
 800088e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000892:	2302      	movs	r3, #2
 8000894:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000898:	2302      	movs	r3, #2
 800089a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800089e:	2301      	movs	r3, #1
 80008a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008a4:	230a      	movs	r3, #10
 80008a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008aa:	2307      	movs	r3, #7
 80008ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008b6:	2302      	movs	r3, #2
 80008b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008c0:	4618      	mov	r0, r3
 80008c2:	f005 fa25 	bl	8005d10 <HAL_RCC_OscConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80008cc:	f000 f8e6 	bl	8000a9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d0:	230f      	movs	r3, #15
 80008d2:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d4:	2303      	movs	r3, #3
 80008d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008e4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80008e8:	2104      	movs	r1, #4
 80008ea:	4618      	mov	r0, r3
 80008ec:	f005 fdfe 	bl	80064ec <HAL_RCC_ClockConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80008f6:	f000 f8d1 	bl	8000a9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80008fa:	2342      	movs	r3, #66	; 0x42
 80008fc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000902:	2300      	movs	r3, #0
 8000904:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000906:	463b      	mov	r3, r7
 8000908:	4618      	mov	r0, r3
 800090a:	f006 f825 	bl	8006958 <HAL_RCCEx_PeriphCLKConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000914:	f000 f8c2 	bl	8000a9c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000918:	f44f 7000 	mov.w	r0, #512	; 0x200
 800091c:	f005 f9a2 	bl	8005c64 <HAL_PWREx_ControlVoltageScaling>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000926:	f000 f8b9 	bl	8000a9c <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	37c0      	adds	r7, #192	; 0xc0
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_USART2_UART_Init+0x58>)
 800093a:	4a15      	ldr	r2, [pc, #84]	; (8000990 <MX_USART2_UART_Init+0x5c>)
 800093c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_USART2_UART_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_USART2_UART_Init+0x58>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_USART2_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000978:	f006 fd7c 	bl	8007474 <HAL_UART_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000982:	f000 f88b 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200078d8 	.word	0x200078d8
 8000990:	40004400 	.word	0x40004400

08000994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	4a2b      	ldr	r2, [pc, #172]	; (8000a58 <MX_GPIO_Init+0xc4>)
 80009ac:	4b2a      	ldr	r3, [pc, #168]	; (8000a58 <MX_GPIO_Init+0xc4>)
 80009ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b6:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <MX_GPIO_Init+0xc4>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c2:	4a25      	ldr	r2, [pc, #148]	; (8000a58 <MX_GPIO_Init+0xc4>)
 80009c4:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <MX_GPIO_Init+0xc4>)
 80009c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ce:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <MX_GPIO_Init+0xc4>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	4a1f      	ldr	r2, [pc, #124]	; (8000a58 <MX_GPIO_Init+0xc4>)
 80009dc:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <MX_GPIO_Init+0xc4>)
 80009de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e6:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <MX_GPIO_Init+0xc4>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	4a19      	ldr	r2, [pc, #100]	; (8000a58 <MX_GPIO_Init+0xc4>)
 80009f4:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <MX_GPIO_Init+0xc4>)
 80009f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fe:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <MX_GPIO_Init+0xc4>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2120      	movs	r1, #32
 8000a0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a12:	f004 fb1d 	bl	8005050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_GPIO_Init+0xc8>)
 8000a1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	480d      	ldr	r0, [pc, #52]	; (8000a60 <MX_GPIO_Init+0xcc>)
 8000a2c:	f004 f8bc 	bl	8004ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000a30:	2320      	movs	r3, #32
 8000a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4619      	mov	r1, r3
 8000a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4a:	f004 f8ad 	bl	8004ba8 <HAL_GPIO_Init>

}
 8000a4e:	bf00      	nop
 8000a50:	3728      	adds	r7, #40	; 0x28
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	10210000 	.word	0x10210000
 8000a60:	48000800 	.word	0x48000800

08000a64 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]

  /* init code for MEMS */
  MX_MEMS_Init();
 8000a6c:	f7ff fde6 	bl	800063c <MX_MEMS_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a70:	2001      	movs	r0, #1
 8000a72:	f007 fa62 	bl	8007f3a <osDelay>
 8000a76:	e7fb      	b.n	8000a70 <StartDefaultTask+0xc>

08000a78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d101      	bne.n	8000a8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a8a:	f003 ff8f 	bl	80049ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40012c00 	.word	0x40012c00

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
	...

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	4a11      	ldr	r2, [pc, #68]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ab4:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6613      	str	r3, [r2, #96]	; 0x60
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <HAL_MspInit+0x4c>)
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	210f      	movs	r1, #15
 8000ae6:	f06f 0001 	mvn.w	r0, #1
 8000aea:	f004 f833 	bl	8004b54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40021000 	.word	0x40021000

08000afc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a17      	ldr	r2, [pc, #92]	; (8000b78 <HAL_UART_MspInit+0x7c>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d128      	bne.n	8000b70 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b1e:	4a17      	ldr	r2, [pc, #92]	; (8000b7c <HAL_UART_MspInit+0x80>)
 8000b20:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <HAL_UART_MspInit+0x80>)
 8000b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b28:	6593      	str	r3, [r2, #88]	; 0x58
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <HAL_UART_MspInit+0x80>)
 8000b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	4a11      	ldr	r2, [pc, #68]	; (8000b7c <HAL_UART_MspInit+0x80>)
 8000b38:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <HAL_UART_MspInit+0x80>)
 8000b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <HAL_UART_MspInit+0x80>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b4e:	230c      	movs	r3, #12
 8000b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b5e:	2307      	movs	r3, #7
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6c:	f004 f81c 	bl	8004ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b70:	bf00      	nop
 8000b72:	3728      	adds	r7, #40	; 0x28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40004400 	.word	0x40004400
 8000b7c:	40021000 	.word	0x40021000

08000b80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08c      	sub	sp, #48	; 0x30
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8000b90:	2200      	movs	r2, #0
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	2019      	movs	r0, #25
 8000b96:	f003 ffdd 	bl	8004b54 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8000b9a:	2019      	movs	r0, #25
 8000b9c:	f003 fff6 	bl	8004b8c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ba0:	4a1e      	ldr	r2, [pc, #120]	; (8000c1c <HAL_InitTick+0x9c>)
 8000ba2:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <HAL_InitTick+0x9c>)
 8000ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000baa:	6613      	str	r3, [r2, #96]	; 0x60
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <HAL_InitTick+0x9c>)
 8000bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bb8:	f107 0210 	add.w	r2, r7, #16
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f005 fe36 	bl	8006834 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000bc8:	f005 fe1e 	bl	8006808 <HAL_RCC_GetPCLK2Freq>
 8000bcc:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd0:	4a13      	ldr	r2, [pc, #76]	; (8000c20 <HAL_InitTick+0xa0>)
 8000bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd6:	0c9b      	lsrs	r3, r3, #18
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <HAL_InitTick+0xa4>)
 8000bde:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <HAL_InitTick+0xa8>)
 8000be0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <HAL_InitTick+0xa4>)
 8000be4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000be8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bea:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <HAL_InitTick+0xa4>)
 8000bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <HAL_InitTick+0xa4>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <HAL_InitTick+0xa4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000bfc:	4809      	ldr	r0, [pc, #36]	; (8000c24 <HAL_InitTick+0xa4>)
 8000bfe:	f006 fa05 	bl	800700c <HAL_TIM_Base_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d104      	bne.n	8000c12 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c08:	4806      	ldr	r0, [pc, #24]	; (8000c24 <HAL_InitTick+0xa4>)
 8000c0a:	f006 fa35 	bl	8007078 <HAL_TIM_Base_Start_IT>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	e000      	b.n	8000c14 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3730      	adds	r7, #48	; 0x30
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	431bde83 	.word	0x431bde83
 8000c24:	20007958 	.word	0x20007958
 8000c28:	40012c00 	.word	0x40012c00

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <HardFault_Handler+0x4>

08000c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <MemManage_Handler+0x4>

08000c46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <BusFault_Handler+0x4>

08000c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <UsageFault_Handler+0x4>

08000c52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c66:	f006 fa31 	bl	80070cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20007958 	.word	0x20007958

08000c74 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void) 
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	607b      	str	r3, [r7, #4]
  
  hi2c1.Instance  = I2C1;
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <BSP_I2C1_Init+0x70>)
 8000c80:	4a19      	ldr	r2, [pc, #100]	; (8000ce8 <BSP_I2C1_Init+0x74>)
 8000c82:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000c84:	4b19      	ldr	r3, [pc, #100]	; (8000cec <BSP_I2C1_Init+0x78>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	1c5a      	adds	r2, r3, #1
 8000c8a:	4918      	ldr	r1, [pc, #96]	; (8000cec <BSP_I2C1_Init+0x78>)
 8000c8c:	600a      	str	r2, [r1, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d122      	bne.n	8000cd8 <BSP_I2C1_Init+0x64>
  {     
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000c92:	4814      	ldr	r0, [pc, #80]	; (8000ce4 <BSP_I2C1_Init+0x70>)
 8000c94:	f004 fd0c 	bl	80056b0 <HAL_I2C_GetState>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d11c      	bne.n	8000cd8 <BSP_I2C1_Init+0x64>
    {  
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000c9e:	4811      	ldr	r0, [pc, #68]	; (8000ce4 <BSP_I2C1_Init+0x70>)
 8000ca0:	f000 f8fe 	bl	8000ea0 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d116      	bne.n	8000cd8 <BSP_I2C1_Init+0x64>
	  {
    	/* Init the I2C */
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000caa:	480e      	ldr	r0, [pc, #56]	; (8000ce4 <BSP_I2C1_Init+0x70>)
 8000cac:	f000 f8b4 	bl	8000e18 <MX_I2C1_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d003      	beq.n	8000cbe <BSP_I2C1_Init+0x4a>
    	{
      		ret = BSP_ERROR_BUS_FAILURE;
 8000cb6:	f06f 0307 	mvn.w	r3, #7
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	e00c      	b.n	8000cd8 <BSP_I2C1_Init+0x64>
    	}
    	else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) 
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4808      	ldr	r0, [pc, #32]	; (8000ce4 <BSP_I2C1_Init+0x70>)
 8000cc2:	f004 ff29 	bl	8005b18 <HAL_I2CEx_ConfigAnalogFilter>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d003      	beq.n	8000cd4 <BSP_I2C1_Init+0x60>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;    		
 8000ccc:	f06f 0307 	mvn.w	r3, #7
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	e001      	b.n	8000cd8 <BSP_I2C1_Init+0x64>
    	}
    	else
    	{
      		ret = BSP_ERROR_NONE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	607b      	str	r3, [r7, #4]
    	}
	  }	
    }
  }
  return ret;
 8000cd8:	687b      	ldr	r3, [r7, #4]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20007998 	.word	0x20007998
 8000ce8:	40005400 	.word	0x40005400
 8000cec:	20000174 	.word	0x20000174

08000cf0 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void) 
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
  
  if (I2C1InitCounter > 0)
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <BSP_I2C1_DeInit+0x48>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d014      	beq.n	8000d2c <BSP_I2C1_DeInit+0x3c>
  {       
    if (--I2C1InitCounter == 0)
 8000d02:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <BSP_I2C1_DeInit+0x48>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <BSP_I2C1_DeInit+0x48>)
 8000d0a:	6013      	str	r3, [r2, #0]
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <BSP_I2C1_DeInit+0x48>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d10b      	bne.n	8000d2c <BSP_I2C1_DeInit+0x3c>
    {    
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    	/* DeInit the I2C */ 
    	I2C1_MspDeInit(&hi2c1);
 8000d14:	4809      	ldr	r0, [pc, #36]	; (8000d3c <BSP_I2C1_DeInit+0x4c>)
 8000d16:	f000 f8f9 	bl	8000f0c <I2C1_MspDeInit>
  #endif  
  		/* DeInit the I2C */ 
  		if (HAL_I2C_DeInit(&hi2c1) != HAL_OK) 
 8000d1a:	4808      	ldr	r0, [pc, #32]	; (8000d3c <BSP_I2C1_DeInit+0x4c>)
 8000d1c:	f004 fa57 	bl	80051ce <HAL_I2C_DeInit>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d002      	beq.n	8000d2c <BSP_I2C1_DeInit+0x3c>
  		{
    		ret = BSP_ERROR_BUS_FAILURE;
 8000d26:	f06f 0307 	mvn.w	r3, #7
 8000d2a:	607b      	str	r3, [r7, #4]
  		}
    }
  }
  return ret;
 8000d2c:	687b      	ldr	r3, [r7, #4]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000174 	.word	0x20000174
 8000d3c:	20007998 	.word	0x20007998

08000d40 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	; 0x28
 8000d44:	af04      	add	r7, sp, #16
 8000d46:	60ba      	str	r2, [r7, #8]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	81fb      	strh	r3, [r7, #14]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	81bb      	strh	r3, [r7, #12]
 8000d52:	4613      	mov	r3, r2
 8000d54:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;  
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000d5a:	89ba      	ldrh	r2, [r7, #12]
 8000d5c:	89f9      	ldrh	r1, [r7, #14]
 8000d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d62:	9302      	str	r3, [sp, #8]
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	9301      	str	r3, [sp, #4]
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	9300      	str	r3, [sp, #0]
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	480c      	ldr	r0, [pc, #48]	; (8000da0 <BSP_I2C1_WriteReg+0x60>)
 8000d70:	f004 fa70 	bl	8005254 <HAL_I2C_Mem_Write>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d00c      	beq.n	8000d94 <BSP_I2C1_WriteReg+0x54>
  {    
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000d7a:	4809      	ldr	r0, [pc, #36]	; (8000da0 <BSP_I2C1_WriteReg+0x60>)
 8000d7c:	f004 fca6 	bl	80056cc <HAL_I2C_GetError>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	d103      	bne.n	8000d8e <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000d86:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	e002      	b.n	8000d94 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000d8e:	f06f 0303 	mvn.w	r3, #3
 8000d92:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000d94:	697b      	ldr	r3, [r7, #20]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20007998 	.word	0x20007998

08000da4 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length) 
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af04      	add	r7, sp, #16
 8000daa:	60ba      	str	r2, [r7, #8]
 8000dac:	461a      	mov	r2, r3
 8000dae:	4603      	mov	r3, r0
 8000db0:	81fb      	strh	r3, [r7, #14]
 8000db2:	460b      	mov	r3, r1
 8000db4:	81bb      	strh	r3, [r7, #12]
 8000db6:	4613      	mov	r3, r2
 8000db8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000dbe:	89ba      	ldrh	r2, [r7, #12]
 8000dc0:	89f9      	ldrh	r1, [r7, #14]
 8000dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc6:	9302      	str	r3, [sp, #8]
 8000dc8:	88fb      	ldrh	r3, [r7, #6]
 8000dca:	9301      	str	r3, [sp, #4]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	480c      	ldr	r0, [pc, #48]	; (8000e04 <BSP_I2C1_ReadReg+0x60>)
 8000dd4:	f004 fb52 	bl	800547c <HAL_I2C_Mem_Read>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d00c      	beq.n	8000df8 <BSP_I2C1_ReadReg+0x54>
  { 
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000dde:	4809      	ldr	r0, [pc, #36]	; (8000e04 <BSP_I2C1_ReadReg+0x60>)
 8000de0:	f004 fc74 	bl	80056cc <HAL_I2C_GetError>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	d103      	bne.n	8000df2 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000dea:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	e002      	b.n	8000df8 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000df2:	f06f 0303 	mvn.w	r3, #3
 8000df6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000df8:	697b      	ldr	r3, [r7, #20]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20007998 	.word	0x20007998

08000e08 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000e0c:	f003 fde0 	bl	80049d0 <HAL_GetTick>
 8000e10:	4603      	mov	r3, r0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <MX_I2C1_Init>:

/* I2C1 init function */ 

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000e20:	2300      	movs	r3, #0
 8000e22:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a1c      	ldr	r2, [pc, #112]	; (8000e98 <MX_I2C1_Init+0x80>)
 8000e28:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10909CEC;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a1b      	ldr	r2, [pc, #108]	; (8000e9c <MX_I2C1_Init+0x84>)
 8000e2e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f004 f929 	bl	80050b2 <HAL_I2C_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f004 fe53 	bl	8005b18 <HAL_I2CEx_ConfigAnalogFilter>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f004 fe95 	bl	8005bae <HAL_I2CEx_ConfigDigitalFilter>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40005400 	.word	0x40005400
 8000e9c:	10909cec 	.word	0x10909cec

08000ea0 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea8:	4a16      	ldr	r2, [pc, #88]	; (8000f04 <I2C1_MspInit+0x64>)
 8000eaa:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <I2C1_MspInit+0x64>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	f043 0302 	orr.w	r3, r3, #2
 8000eb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb4:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <I2C1_MspInit+0x64>)
 8000eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb8:	f003 0302 	and.w	r3, r3, #2
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ec0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ec6:	2312      	movs	r3, #18
 8000ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	480a      	ldr	r0, [pc, #40]	; (8000f08 <I2C1_MspInit+0x68>)
 8000ede:	f003 fe63 	bl	8004ba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ee2:	4a08      	ldr	r2, [pc, #32]	; (8000f04 <I2C1_MspInit+0x64>)
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <I2C1_MspInit+0x64>)
 8000ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eec:	6593      	str	r3, [r2, #88]	; 0x58
 8000eee:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <I2C1_MspInit+0x64>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000efa:	bf00      	nop
 8000efc:	3728      	adds	r7, #40	; 0x28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000
 8000f08:	48000400 	.word	0x48000400

08000f0c <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000f14:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <I2C1_MspDeInit+0x28>)
 8000f16:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <I2C1_MspDeInit+0x28>)
 8000f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000f1e:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8000f20:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <I2C1_MspDeInit+0x2c>)
 8000f26:	f003 ffb9 	bl	8004e9c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000
 8000f38:	48000400 	.word	0x48000400

08000f3c <LIS2DW12_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d103      	bne.n	8000f58 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	e04d      	b.n	8000ff4 <LIS2DW12_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	7b1a      	ldrb	r2, [r3, #12]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	691a      	ldr	r2, [r3, #16]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	695a      	ldr	r2, [r3, #20]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	699a      	ldr	r2, [r3, #24]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a1b      	ldr	r2, [pc, #108]	; (8001000 <LIS2DW12_RegisterBusIO+0xc4>)
 8000f94:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a1a      	ldr	r2, [pc, #104]	; (8001004 <LIS2DW12_RegisterBusIO+0xc8>)
 8000f9a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d103      	bne.n	8000fb2 <LIS2DW12_RegisterBusIO+0x76>
    {
      ret = LIS2DW12_ERROR;
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	e020      	b.n	8000ff4 <LIS2DW12_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4798      	blx	r3
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <LIS2DW12_RegisterBusIO+0x8a>
    {
      ret = LIS2DW12_ERROR;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	e016      	b.n	8000ff4 <LIS2DW12_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d112      	bne.n	8000ff4 <LIS2DW12_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d10d      	bne.n	8000ff4 <LIS2DW12_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8000fd8:	2305      	movs	r3, #5
 8000fda:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8000fdc:	7afb      	ldrb	r3, [r7, #11]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	2121      	movs	r1, #33	; 0x21
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 fd63 	bl	8001aae <LIS2DW12_Write_Reg>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d002      	beq.n	8000ff4 <LIS2DW12_RegisterBusIO+0xb8>
          {
            ret = LIS2DW12_ERROR;
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	08001e41 	.word	0x08001e41
 8001004:	08001e77 	.word	0x08001e77

08001008 <LIS2DW12_Init>:
 * @brief  Initialize the LIS2DW12 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	331c      	adds	r3, #28
 8001014:	2101      	movs	r1, #1
 8001016:	4618      	mov	r0, r3
 8001018:	f001 fa12 	bl	8002440 <lis2dw12_auto_increment_set>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d002      	beq.n	8001028 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	e04b      	b.n	80010c0 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	331c      	adds	r3, #28
 800102c:	2101      	movs	r1, #1
 800102e:	4618      	mov	r0, r3
 8001030:	f001 f960 	bl	80022f4 <lis2dw12_block_data_update_set>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d002      	beq.n	8001040 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
 800103e:	e03f      	b.n	80010c0 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	331c      	adds	r3, #28
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f001 fa20 	bl	800248c <lis2dw12_fifo_mode_set>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d002      	beq.n	8001058 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	e033      	b.n	80010c0 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	331c      	adds	r3, #28
 800105c:	2104      	movs	r1, #4
 800105e:	4618      	mov	r0, r3
 8001060:	f000 ff54 	bl	8001f0c <lis2dw12_power_mode_set>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d002      	beq.n	8001070 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
 800106e:	e027      	b.n	80010c0 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a15      	ldr	r2, [pc, #84]	; (80010c8 <LIS2DW12_Init+0xc0>)
 8001074:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	331c      	adds	r3, #28
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f001 f847 	bl	8002120 <lis2dw12_data_rate_set>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d002      	beq.n	800109e <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8001098:	f04f 33ff 	mov.w	r3, #4294967295
 800109c:	e010      	b.n	80010c0 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	331c      	adds	r3, #28
 80010a2:	2100      	movs	r1, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f001 f94b 	bl	8002340 <lis2dw12_full_scale_set>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d002      	beq.n	80010b6 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 80010b0:	f04f 33ff 	mov.w	r3, #4294967295
 80010b4:	e004      	b.n	80010c0 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2201      	movs	r2, #1
 80010ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	42c80000 	.word	0x42c80000

080010cc <LIS2DW12_DeInit>:
 * @brief  Deinitialize the LIS2DW12 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f000 f888 	bl	80011ea <LIS2DW12_ACC_Disable>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d002      	beq.n	80010e6 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295
 80010e4:	e010      	b.n	8001108 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f04f 0200 	mov.w	r2, #0
 80010ec:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->is_initialized = 0;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <LIS2DW12_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	331c      	adds	r3, #28
 800111e:	6839      	ldr	r1, [r7, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f001 f97c 	bl	800241e <lis2dw12_device_id_get>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d002      	beq.n	8001132 <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 800112c:	f04f 33ff 	mov.w	r3, #4294967295
 8001130:	e000      	b.n	8001134 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8001132:	2300      	movs	r3, #0
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <LIS2DW12_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LIS2DW12 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	2200      	movs	r2, #0
 8001150:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	2200      	movs	r2, #0
 8001156:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	2200      	movs	r2, #0
 800115c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	2200      	movs	r2, #0
 8001162:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	2210      	movs	r2, #16
 8001168:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	4a06      	ldr	r2, [pc, #24]	; (8001194 <LIS2DW12_GetCapabilities+0x58>)
 800117c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	44c80000 	.word	0x44c80000

08001198 <LIS2DW12_ACC_Enable>:
 * @brief  Enable the LIS2DW12 accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d101      	bne.n	80011ae <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e019      	b.n	80011e2 <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode, pObj->acc_low_noise) != LIS2DW12_OK)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80011c0:	461a      	mov	r2, r3
 80011c2:	eeb0 0a67 	vmov.f32	s0, s15
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 fc8c 	bl	8001ae4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d002      	beq.n	80011d8 <LIS2DW12_ACC_Enable+0x40>
  {
    return LIS2DW12_ERROR;
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
 80011d6:	e004      	b.n	80011e2 <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <LIS2DW12_ACC_Disable>:
 * @brief  Disable the LIS2DW12 accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d101      	bne.n	8001200 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 80011fc:	2300      	movs	r3, #0
 80011fe:	e010      	b.n	8001222 <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	331c      	adds	r3, #28
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f000 ff8a 	bl	8002120 <lis2dw12_data_rate_set>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d002      	beq.n	8001218 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 8001212:	f04f 33ff 	mov.w	r3, #4294967295
 8001216:	e004      	b.n	8001222 <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <LIS2DW12_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	331c      	adds	r3, #28
 800123e:	f107 020b 	add.w	r2, r7, #11
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f001 f8a1 	bl	800238c <lis2dw12_full_scale_get>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d002      	beq.n	8001256 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8001250:	f04f 33ff 	mov.w	r3, #4294967295
 8001254:	e0a0      	b.n	8001398 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	331c      	adds	r3, #28
 800125a:	f107 020a 	add.w	r2, r7, #10
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f000 fea3 	bl	8001fac <lis2dw12_power_mode_get>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d002      	beq.n	8001272 <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 800126c:	f04f 33ff 	mov.w	r3, #4294967295
 8001270:	e092      	b.n	8001398 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch(mode)
 8001272:	7abb      	ldrb	r3, [r7, #10]
 8001274:	2b1b      	cmp	r3, #27
 8001276:	f200 8087 	bhi.w	8001388 <LIS2DW12_ACC_GetSensitivity+0x15c>
 800127a:	a201      	add	r2, pc, #4	; (adr r2, 8001280 <LIS2DW12_ACC_GetSensitivity+0x54>)
 800127c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001280:	080012f1 	.word	0x080012f1
 8001284:	0800133d 	.word	0x0800133d
 8001288:	0800133d 	.word	0x0800133d
 800128c:	0800133d 	.word	0x0800133d
 8001290:	0800133d 	.word	0x0800133d
 8001294:	08001389 	.word	0x08001389
 8001298:	08001389 	.word	0x08001389
 800129c:	08001389 	.word	0x08001389
 80012a0:	080012f1 	.word	0x080012f1
 80012a4:	0800133d 	.word	0x0800133d
 80012a8:	0800133d 	.word	0x0800133d
 80012ac:	0800133d 	.word	0x0800133d
 80012b0:	08001389 	.word	0x08001389
 80012b4:	08001389 	.word	0x08001389
 80012b8:	08001389 	.word	0x08001389
 80012bc:	08001389 	.word	0x08001389
 80012c0:	080012f1 	.word	0x080012f1
 80012c4:	0800133d 	.word	0x0800133d
 80012c8:	0800133d 	.word	0x0800133d
 80012cc:	0800133d 	.word	0x0800133d
 80012d0:	0800133d 	.word	0x0800133d
 80012d4:	08001389 	.word	0x08001389
 80012d8:	08001389 	.word	0x08001389
 80012dc:	08001389 	.word	0x08001389
 80012e0:	080012f1 	.word	0x080012f1
 80012e4:	0800133d 	.word	0x0800133d
 80012e8:	0800133d 	.word	0x0800133d
 80012ec:	0800133d 	.word	0x0800133d
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 80012f0:	7afb      	ldrb	r3, [r7, #11]
 80012f2:	2b03      	cmp	r3, #3
 80012f4:	d81a      	bhi.n	800132c <LIS2DW12_ACC_GetSensitivity+0x100>
 80012f6:	a201      	add	r2, pc, #4	; (adr r2, 80012fc <LIS2DW12_ACC_GetSensitivity+0xd0>)
 80012f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fc:	0800130d 	.word	0x0800130d
 8001300:	08001315 	.word	0x08001315
 8001304:	0800131d 	.word	0x0800131d
 8001308:	08001325 	.word	0x08001325
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	4a24      	ldr	r2, [pc, #144]	; (80013a0 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8001310:	601a      	str	r2, [r3, #0]
           break;
 8001312:	e012      	b.n	800133a <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	4a23      	ldr	r2, [pc, #140]	; (80013a4 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8001318:	601a      	str	r2, [r3, #0]
          break;
 800131a:	e00e      	b.n	800133a <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	4a22      	ldr	r2, [pc, #136]	; (80013a8 <LIS2DW12_ACC_GetSensitivity+0x17c>)
 8001320:	601a      	str	r2, [r3, #0]
           break;
 8001322:	e00a      	b.n	800133a <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	4a21      	ldr	r2, [pc, #132]	; (80013ac <LIS2DW12_ACC_GetSensitivity+0x180>)
 8001328:	601a      	str	r2, [r3, #0]
          break;
 800132a:	e006      	b.n	800133a <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	4a20      	ldr	r2, [pc, #128]	; (80013b0 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8001330:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
 8001336:	60fb      	str	r3, [r7, #12]
          break;
 8001338:	bf00      	nop
      }
      break;
 800133a:	e02c      	b.n	8001396 <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 800133c:	7afb      	ldrb	r3, [r7, #11]
 800133e:	2b03      	cmp	r3, #3
 8001340:	d81a      	bhi.n	8001378 <LIS2DW12_ACC_GetSensitivity+0x14c>
 8001342:	a201      	add	r2, pc, #4	; (adr r2, 8001348 <LIS2DW12_ACC_GetSensitivity+0x11c>)
 8001344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001348:	08001359 	.word	0x08001359
 800134c:	08001361 	.word	0x08001361
 8001350:	08001369 	.word	0x08001369
 8001354:	08001371 	.word	0x08001371
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	4a16      	ldr	r2, [pc, #88]	; (80013b4 <LIS2DW12_ACC_GetSensitivity+0x188>)
 800135c:	601a      	str	r2, [r3, #0]
           break;
 800135e:	e012      	b.n	8001386 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	4a15      	ldr	r2, [pc, #84]	; (80013b8 <LIS2DW12_ACC_GetSensitivity+0x18c>)
 8001364:	601a      	str	r2, [r3, #0]
          break;
 8001366:	e00e      	b.n	8001386 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	4a0d      	ldr	r2, [pc, #52]	; (80013a0 <LIS2DW12_ACC_GetSensitivity+0x174>)
 800136c:	601a      	str	r2, [r3, #0]
           break;
 800136e:	e00a      	b.n	8001386 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	4a0c      	ldr	r2, [pc, #48]	; (80013a4 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8001374:	601a      	str	r2, [r3, #0]
          break;
 8001376:	e006      	b.n	8001386 <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	4a0d      	ldr	r2, [pc, #52]	; (80013b0 <LIS2DW12_ACC_GetSensitivity+0x184>)
 800137c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	60fb      	str	r3, [r7, #12]
          break;
 8001384:	bf00      	nop
      }
      break;
 8001386:	e006      	b.n	8001396 <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	4a09      	ldr	r2, [pc, #36]	; (80013b0 <LIS2DW12_ACC_GetSensitivity+0x184>)
 800138c:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	60fb      	str	r3, [r7, #12]
      break;
 8001394:	bf00      	nop
  }

  return ret;
 8001396:	68fb      	ldr	r3, [r7, #12]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	3f79db23 	.word	0x3f79db23
 80013a4:	3ff9db23 	.word	0x3ff9db23
 80013a8:	4079db23 	.word	0x4079db23
 80013ac:	40f9db23 	.word	0x40f9db23
 80013b0:	bf800000 	.word	0xbf800000
 80013b4:	3e79db23 	.word	0x3e79db23
 80013b8:	3ef9db23 	.word	0x3ef9db23

080013bc <LIS2DW12_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	331c      	adds	r3, #28
 80013ce:	f107 020b 	add.w	r2, r7, #11
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 fee9 	bl	80021ac <lis2dw12_data_rate_get>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d002      	beq.n	80013e6 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 80013e0:	f04f 33ff 	mov.w	r3, #4294967295
 80013e4:	e1b0      	b.n	8001748 <LIS2DW12_ACC_GetOutputDataRate+0x38c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	331c      	adds	r3, #28
 80013ea:	f107 020a 	add.w	r2, r7, #10
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 fddb 	bl	8001fac <lis2dw12_power_mode_get>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d002      	beq.n	8001402 <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001400:	e1a2      	b.n	8001748 <LIS2DW12_ACC_GetOutputDataRate+0x38c>
  }

  switch (odr_low_level)
 8001402:	7afb      	ldrb	r3, [r7, #11]
 8001404:	2b20      	cmp	r3, #32
 8001406:	f200 8197 	bhi.w	8001738 <LIS2DW12_ACC_GetOutputDataRate+0x37c>
 800140a:	a201      	add	r2, pc, #4	; (adr r2, 8001410 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 800140c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001410:	08001495 	.word	0x08001495
 8001414:	0800149f 	.word	0x0800149f
 8001418:	0800153d 	.word	0x0800153d
 800141c:	08001545 	.word	0x08001545
 8001420:	0800154d 	.word	0x0800154d
 8001424:	08001555 	.word	0x08001555
 8001428:	0800155d 	.word	0x0800155d
 800142c:	08001565 	.word	0x08001565
 8001430:	08001601 	.word	0x08001601
 8001434:	0800169d 	.word	0x0800169d
 8001438:	08001739 	.word	0x08001739
 800143c:	08001739 	.word	0x08001739
 8001440:	08001739 	.word	0x08001739
 8001444:	08001739 	.word	0x08001739
 8001448:	08001739 	.word	0x08001739
 800144c:	08001739 	.word	0x08001739
 8001450:	08001495 	.word	0x08001495
 8001454:	08001739 	.word	0x08001739
 8001458:	08001739 	.word	0x08001739
 800145c:	08001739 	.word	0x08001739
 8001460:	08001739 	.word	0x08001739
 8001464:	08001739 	.word	0x08001739
 8001468:	08001739 	.word	0x08001739
 800146c:	08001739 	.word	0x08001739
 8001470:	08001739 	.word	0x08001739
 8001474:	08001739 	.word	0x08001739
 8001478:	08001739 	.word	0x08001739
 800147c:	08001739 	.word	0x08001739
 8001480:	08001739 	.word	0x08001739
 8001484:	08001739 	.word	0x08001739
 8001488:	08001739 	.word	0x08001739
 800148c:	08001739 	.word	0x08001739
 8001490:	08001495 	.word	0x08001495
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
      break;
 800149c:	e153      	b.n	8001746 <LIS2DW12_ACC_GetOutputDataRate+0x38a>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 800149e:	7abb      	ldrb	r3, [r7, #10]
 80014a0:	2b1b      	cmp	r3, #27
 80014a2:	d843      	bhi.n	800152c <LIS2DW12_ACC_GetOutputDataRate+0x170>
 80014a4:	a201      	add	r2, pc, #4	; (adr r2, 80014ac <LIS2DW12_ACC_GetOutputDataRate+0xf0>)
 80014a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014aa:	bf00      	nop
 80014ac:	08001525 	.word	0x08001525
 80014b0:	08001525 	.word	0x08001525
 80014b4:	08001525 	.word	0x08001525
 80014b8:	08001525 	.word	0x08001525
 80014bc:	0800151d 	.word	0x0800151d
 80014c0:	0800152d 	.word	0x0800152d
 80014c4:	0800152d 	.word	0x0800152d
 80014c8:	0800152d 	.word	0x0800152d
 80014cc:	08001525 	.word	0x08001525
 80014d0:	08001525 	.word	0x08001525
 80014d4:	08001525 	.word	0x08001525
 80014d8:	08001525 	.word	0x08001525
 80014dc:	0800152d 	.word	0x0800152d
 80014e0:	0800152d 	.word	0x0800152d
 80014e4:	0800152d 	.word	0x0800152d
 80014e8:	0800152d 	.word	0x0800152d
 80014ec:	08001525 	.word	0x08001525
 80014f0:	08001525 	.word	0x08001525
 80014f4:	08001525 	.word	0x08001525
 80014f8:	08001525 	.word	0x08001525
 80014fc:	0800151d 	.word	0x0800151d
 8001500:	0800152d 	.word	0x0800152d
 8001504:	0800152d 	.word	0x0800152d
 8001508:	0800152d 	.word	0x0800152d
 800150c:	08001525 	.word	0x08001525
 8001510:	08001525 	.word	0x08001525
 8001514:	08001525 	.word	0x08001525
 8001518:	08001525 	.word	0x08001525
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	4a8c      	ldr	r2, [pc, #560]	; (8001750 <LIS2DW12_ACC_GetOutputDataRate+0x394>)
 8001520:	601a      	str	r2, [r3, #0]
           break;
 8001522:	e00a      	b.n	800153a <LIS2DW12_ACC_GetOutputDataRate+0x17e>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	4a8b      	ldr	r2, [pc, #556]	; (8001754 <LIS2DW12_ACC_GetOutputDataRate+0x398>)
 8001528:	601a      	str	r2, [r3, #0]
          break;
 800152a:	e006      	b.n	800153a <LIS2DW12_ACC_GetOutputDataRate+0x17e>

        default:
          *Odr = -1.0f;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	4a8a      	ldr	r2, [pc, #552]	; (8001758 <LIS2DW12_ACC_GetOutputDataRate+0x39c>)
 8001530:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001532:	f04f 33ff 	mov.w	r3, #4294967295
 8001536:	60fb      	str	r3, [r7, #12]
          break;
 8001538:	bf00      	nop
      }
      break;
 800153a:	e104      	b.n	8001746 <LIS2DW12_ACC_GetOutputDataRate+0x38a>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	4a84      	ldr	r2, [pc, #528]	; (8001750 <LIS2DW12_ACC_GetOutputDataRate+0x394>)
 8001540:	601a      	str	r2, [r3, #0]
      break;
 8001542:	e100      	b.n	8001746 <LIS2DW12_ACC_GetOutputDataRate+0x38a>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	4a85      	ldr	r2, [pc, #532]	; (800175c <LIS2DW12_ACC_GetOutputDataRate+0x3a0>)
 8001548:	601a      	str	r2, [r3, #0]
      break;
 800154a:	e0fc      	b.n	8001746 <LIS2DW12_ACC_GetOutputDataRate+0x38a>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	4a84      	ldr	r2, [pc, #528]	; (8001760 <LIS2DW12_ACC_GetOutputDataRate+0x3a4>)
 8001550:	601a      	str	r2, [r3, #0]
      break;
 8001552:	e0f8      	b.n	8001746 <LIS2DW12_ACC_GetOutputDataRate+0x38a>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	4a83      	ldr	r2, [pc, #524]	; (8001764 <LIS2DW12_ACC_GetOutputDataRate+0x3a8>)
 8001558:	601a      	str	r2, [r3, #0]
      break;
 800155a:	e0f4      	b.n	8001746 <LIS2DW12_ACC_GetOutputDataRate+0x38a>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	4a82      	ldr	r2, [pc, #520]	; (8001768 <LIS2DW12_ACC_GetOutputDataRate+0x3ac>)
 8001560:	601a      	str	r2, [r3, #0]
      break;
 8001562:	e0f0      	b.n	8001746 <LIS2DW12_ACC_GetOutputDataRate+0x38a>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8001564:	7abb      	ldrb	r3, [r7, #10]
 8001566:	2b1b      	cmp	r3, #27
 8001568:	d842      	bhi.n	80015f0 <LIS2DW12_ACC_GetOutputDataRate+0x234>
 800156a:	a201      	add	r2, pc, #4	; (adr r2, 8001570 <LIS2DW12_ACC_GetOutputDataRate+0x1b4>)
 800156c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001570:	080015e9 	.word	0x080015e9
 8001574:	080015e9 	.word	0x080015e9
 8001578:	080015e9 	.word	0x080015e9
 800157c:	080015e9 	.word	0x080015e9
 8001580:	080015e1 	.word	0x080015e1
 8001584:	080015f1 	.word	0x080015f1
 8001588:	080015f1 	.word	0x080015f1
 800158c:	080015f1 	.word	0x080015f1
 8001590:	080015e9 	.word	0x080015e9
 8001594:	080015e9 	.word	0x080015e9
 8001598:	080015e9 	.word	0x080015e9
 800159c:	080015e9 	.word	0x080015e9
 80015a0:	080015f1 	.word	0x080015f1
 80015a4:	080015f1 	.word	0x080015f1
 80015a8:	080015f1 	.word	0x080015f1
 80015ac:	080015f1 	.word	0x080015f1
 80015b0:	080015e9 	.word	0x080015e9
 80015b4:	080015e9 	.word	0x080015e9
 80015b8:	080015e9 	.word	0x080015e9
 80015bc:	080015e9 	.word	0x080015e9
 80015c0:	080015e1 	.word	0x080015e1
 80015c4:	080015f1 	.word	0x080015f1
 80015c8:	080015f1 	.word	0x080015f1
 80015cc:	080015f1 	.word	0x080015f1
 80015d0:	080015e9 	.word	0x080015e9
 80015d4:	080015e9 	.word	0x080015e9
 80015d8:	080015e9 	.word	0x080015e9
 80015dc:	080015e9 	.word	0x080015e9
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	4a62      	ldr	r2, [pc, #392]	; (800176c <LIS2DW12_ACC_GetOutputDataRate+0x3b0>)
 80015e4:	601a      	str	r2, [r3, #0]
           break;
 80015e6:	e00a      	b.n	80015fe <LIS2DW12_ACC_GetOutputDataRate+0x242>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	4a5f      	ldr	r2, [pc, #380]	; (8001768 <LIS2DW12_ACC_GetOutputDataRate+0x3ac>)
 80015ec:	601a      	str	r2, [r3, #0]
          break;
 80015ee:	e006      	b.n	80015fe <LIS2DW12_ACC_GetOutputDataRate+0x242>

        default:
          *Odr = -1.0f;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	4a59      	ldr	r2, [pc, #356]	; (8001758 <LIS2DW12_ACC_GetOutputDataRate+0x39c>)
 80015f4:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295
 80015fa:	60fb      	str	r3, [r7, #12]
          break;
 80015fc:	bf00      	nop
      }
      break;
 80015fe:	e0a2      	b.n	8001746 <LIS2DW12_ACC_GetOutputDataRate+0x38a>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8001600:	7abb      	ldrb	r3, [r7, #10]
 8001602:	2b1b      	cmp	r3, #27
 8001604:	d842      	bhi.n	800168c <LIS2DW12_ACC_GetOutputDataRate+0x2d0>
 8001606:	a201      	add	r2, pc, #4	; (adr r2, 800160c <LIS2DW12_ACC_GetOutputDataRate+0x250>)
 8001608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160c:	08001685 	.word	0x08001685
 8001610:	08001685 	.word	0x08001685
 8001614:	08001685 	.word	0x08001685
 8001618:	08001685 	.word	0x08001685
 800161c:	0800167d 	.word	0x0800167d
 8001620:	0800168d 	.word	0x0800168d
 8001624:	0800168d 	.word	0x0800168d
 8001628:	0800168d 	.word	0x0800168d
 800162c:	08001685 	.word	0x08001685
 8001630:	08001685 	.word	0x08001685
 8001634:	08001685 	.word	0x08001685
 8001638:	08001685 	.word	0x08001685
 800163c:	0800168d 	.word	0x0800168d
 8001640:	0800168d 	.word	0x0800168d
 8001644:	0800168d 	.word	0x0800168d
 8001648:	0800168d 	.word	0x0800168d
 800164c:	08001685 	.word	0x08001685
 8001650:	08001685 	.word	0x08001685
 8001654:	08001685 	.word	0x08001685
 8001658:	08001685 	.word	0x08001685
 800165c:	0800167d 	.word	0x0800167d
 8001660:	0800168d 	.word	0x0800168d
 8001664:	0800168d 	.word	0x0800168d
 8001668:	0800168d 	.word	0x0800168d
 800166c:	08001685 	.word	0x08001685
 8001670:	08001685 	.word	0x08001685
 8001674:	08001685 	.word	0x08001685
 8001678:	08001685 	.word	0x08001685
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	4a3c      	ldr	r2, [pc, #240]	; (8001770 <LIS2DW12_ACC_GetOutputDataRate+0x3b4>)
 8001680:	601a      	str	r2, [r3, #0]
           break;
 8001682:	e00a      	b.n	800169a <LIS2DW12_ACC_GetOutputDataRate+0x2de>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	4a38      	ldr	r2, [pc, #224]	; (8001768 <LIS2DW12_ACC_GetOutputDataRate+0x3ac>)
 8001688:	601a      	str	r2, [r3, #0]
          break;
 800168a:	e006      	b.n	800169a <LIS2DW12_ACC_GetOutputDataRate+0x2de>

        default:
          *Odr = -1.0f;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	4a32      	ldr	r2, [pc, #200]	; (8001758 <LIS2DW12_ACC_GetOutputDataRate+0x39c>)
 8001690:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
 8001696:	60fb      	str	r3, [r7, #12]
          break;
 8001698:	bf00      	nop
      }
      break;
 800169a:	e054      	b.n	8001746 <LIS2DW12_ACC_GetOutputDataRate+0x38a>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 800169c:	7abb      	ldrb	r3, [r7, #10]
 800169e:	2b1b      	cmp	r3, #27
 80016a0:	d842      	bhi.n	8001728 <LIS2DW12_ACC_GetOutputDataRate+0x36c>
 80016a2:	a201      	add	r2, pc, #4	; (adr r2, 80016a8 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 80016a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a8:	08001721 	.word	0x08001721
 80016ac:	08001721 	.word	0x08001721
 80016b0:	08001721 	.word	0x08001721
 80016b4:	08001721 	.word	0x08001721
 80016b8:	08001719 	.word	0x08001719
 80016bc:	08001729 	.word	0x08001729
 80016c0:	08001729 	.word	0x08001729
 80016c4:	08001729 	.word	0x08001729
 80016c8:	08001721 	.word	0x08001721
 80016cc:	08001721 	.word	0x08001721
 80016d0:	08001721 	.word	0x08001721
 80016d4:	08001721 	.word	0x08001721
 80016d8:	08001729 	.word	0x08001729
 80016dc:	08001729 	.word	0x08001729
 80016e0:	08001729 	.word	0x08001729
 80016e4:	08001729 	.word	0x08001729
 80016e8:	08001721 	.word	0x08001721
 80016ec:	08001721 	.word	0x08001721
 80016f0:	08001721 	.word	0x08001721
 80016f4:	08001721 	.word	0x08001721
 80016f8:	08001719 	.word	0x08001719
 80016fc:	08001729 	.word	0x08001729
 8001700:	08001729 	.word	0x08001729
 8001704:	08001729 	.word	0x08001729
 8001708:	08001721 	.word	0x08001721
 800170c:	08001721 	.word	0x08001721
 8001710:	08001721 	.word	0x08001721
 8001714:	08001721 	.word	0x08001721
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	4a16      	ldr	r2, [pc, #88]	; (8001774 <LIS2DW12_ACC_GetOutputDataRate+0x3b8>)
 800171c:	601a      	str	r2, [r3, #0]
           break;
 800171e:	e00a      	b.n	8001736 <LIS2DW12_ACC_GetOutputDataRate+0x37a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	4a11      	ldr	r2, [pc, #68]	; (8001768 <LIS2DW12_ACC_GetOutputDataRate+0x3ac>)
 8001724:	601a      	str	r2, [r3, #0]
          break;
 8001726:	e006      	b.n	8001736 <LIS2DW12_ACC_GetOutputDataRate+0x37a>

        default:
          *Odr = -1.0f;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <LIS2DW12_ACC_GetOutputDataRate+0x39c>)
 800172c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
 8001732:	60fb      	str	r3, [r7, #12]
          break;
 8001734:	bf00      	nop
      }
      break;
 8001736:	e006      	b.n	8001746 <LIS2DW12_ACC_GetOutputDataRate+0x38a>

    default:
      *Odr = -1.0f;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	4a07      	ldr	r2, [pc, #28]	; (8001758 <LIS2DW12_ACC_GetOutputDataRate+0x39c>)
 800173c:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
 8001742:	60fb      	str	r3, [r7, #12]
      break;
 8001744:	bf00      	nop
  }

  return ret;
 8001746:	68fb      	ldr	r3, [r7, #12]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	41480000 	.word	0x41480000
 8001754:	3fcccccd 	.word	0x3fcccccd
 8001758:	bf800000 	.word	0xbf800000
 800175c:	41c80000 	.word	0x41c80000
 8001760:	42480000 	.word	0x42480000
 8001764:	42c80000 	.word	0x42c80000
 8001768:	43480000 	.word	0x43480000
 800176c:	43c80000 	.word	0x43c80000
 8001770:	44480000 	.word	0x44480000
 8001774:	44c80000 	.word	0x44c80000

08001778 <LIS2DW12_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8001784:	2200      	movs	r2, #0
 8001786:	2100      	movs	r1, #0
 8001788:	ed97 0a00 	vldr	s0, [r7]
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 f805 	bl	800179c <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 8001792:	4603      	mov	r3, r0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80017a8:	460b      	mov	r3, r1
 80017aa:	71fb      	strb	r3, [r7, #7]
 80017ac:	4613      	mov	r3, r2
 80017ae:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d109      	bne.n	80017ce <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 80017ba:	79ba      	ldrb	r2, [r7, #6]
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	4619      	mov	r1, r3
 80017c0:	ed97 0a02 	vldr	s0, [r7, #8]
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f000 f98d 	bl	8001ae4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80017ca:	4603      	mov	r3, r0
 80017cc:	e008      	b.n	80017e0 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 80017ce:	79ba      	ldrb	r2, [r7, #6]
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	4619      	mov	r1, r3
 80017d4:	ed97 0a02 	vldr	s0, [r7, #8]
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f000 fa9f 	bl	8001d1c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 80017de:	4603      	mov	r3, r0
  }
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <LIS2DW12_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	331c      	adds	r3, #28
 80017fa:	f107 020b 	add.w	r2, r7, #11
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f000 fdc3 	bl	800238c <lis2dw12_full_scale_get>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d002      	beq.n	8001812 <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 800180c:	f04f 33ff 	mov.w	r3, #4294967295
 8001810:	e027      	b.n	8001862 <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 8001812:	7afb      	ldrb	r3, [r7, #11]
 8001814:	2b03      	cmp	r3, #3
 8001816:	d81b      	bhi.n	8001850 <LIS2DW12_ACC_GetFullScale+0x68>
 8001818:	a201      	add	r2, pc, #4	; (adr r2, 8001820 <LIS2DW12_ACC_GetFullScale+0x38>)
 800181a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181e:	bf00      	nop
 8001820:	08001831 	.word	0x08001831
 8001824:	08001839 	.word	0x08001839
 8001828:	08001841 	.word	0x08001841
 800182c:	08001849 	.word	0x08001849
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	2202      	movs	r2, #2
 8001834:	601a      	str	r2, [r3, #0]
      break;
 8001836:	e013      	b.n	8001860 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	2204      	movs	r2, #4
 800183c:	601a      	str	r2, [r3, #0]
      break;
 800183e:	e00f      	b.n	8001860 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	2208      	movs	r2, #8
 8001844:	601a      	str	r2, [r3, #0]
      break;
 8001846:	e00b      	b.n	8001860 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	2210      	movs	r2, #16
 800184c:	601a      	str	r2, [r3, #0]
      break;
 800184e:	e007      	b.n	8001860 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	f04f 32ff 	mov.w	r2, #4294967295
 8001856:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8001858:	f04f 33ff 	mov.w	r3, #4294967295
 800185c:	60fb      	str	r3, [r7, #12]
      break;
 800185e:	bf00      	nop
  }

  return ret;
 8001860:	68fb      	ldr	r3, [r7, #12]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop

0800186c <LIS2DW12_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
         : (FullScale <= 4) ? LIS2DW12_4g
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	2b02      	cmp	r3, #2
 800187a:	dd0b      	ble.n	8001894 <LIS2DW12_ACC_SetFullScale+0x28>
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	2b04      	cmp	r3, #4
 8001880:	dd06      	ble.n	8001890 <LIS2DW12_ACC_SetFullScale+0x24>
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	2b08      	cmp	r3, #8
 8001886:	dc01      	bgt.n	800188c <LIS2DW12_ACC_SetFullScale+0x20>
 8001888:	2302      	movs	r3, #2
 800188a:	e004      	b.n	8001896 <LIS2DW12_ACC_SetFullScale+0x2a>
 800188c:	2303      	movs	r3, #3
 800188e:	e002      	b.n	8001896 <LIS2DW12_ACC_SetFullScale+0x2a>
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <LIS2DW12_ACC_SetFullScale+0x2a>
 8001894:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 8001896:	73fb      	strb	r3, [r7, #15]
         : (FullScale <= 8) ? LIS2DW12_8g
         :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	331c      	adds	r3, #28
 800189c:	7bfa      	ldrb	r2, [r7, #15]
 800189e:	4611      	mov	r1, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 fd4d 	bl	8002340 <lis2dw12_full_scale_set>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d002      	beq.n	80018b2 <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295
 80018b0:	e000      	b.n	80018b4 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <LIS2DW12_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	331c      	adds	r3, #28
 80018ce:	f107 020b 	add.w	r2, r7, #11
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 fb69 	bl	8001fac <lis2dw12_power_mode_get>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d002      	beq.n	80018e6 <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 80018e0:	f04f 33ff 	mov.w	r3, #4294967295
 80018e4:	e089      	b.n	80019fa <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LIS2DW12_OK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	331c      	adds	r3, #28
 80018ea:	f107 020c 	add.w	r2, r7, #12
 80018ee:	4611      	mov	r1, r2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 fd83 	bl	80023fc <lis2dw12_acceleration_raw_get>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d002      	beq.n	8001902 <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 80018fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001900:	e07b      	b.n	80019fa <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch(mode)
 8001902:	7afb      	ldrb	r3, [r7, #11]
 8001904:	2b1b      	cmp	r3, #27
 8001906:	d873      	bhi.n	80019f0 <LIS2DW12_ACC_GetAxesRaw+0x134>
 8001908:	a201      	add	r2, pc, #4	; (adr r2, 8001910 <LIS2DW12_ACC_GetAxesRaw+0x54>)
 800190a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190e:	bf00      	nop
 8001910:	08001981 	.word	0x08001981
 8001914:	080019b9 	.word	0x080019b9
 8001918:	080019b9 	.word	0x080019b9
 800191c:	080019b9 	.word	0x080019b9
 8001920:	080019b9 	.word	0x080019b9
 8001924:	080019f1 	.word	0x080019f1
 8001928:	080019f1 	.word	0x080019f1
 800192c:	080019f1 	.word	0x080019f1
 8001930:	08001981 	.word	0x08001981
 8001934:	080019b9 	.word	0x080019b9
 8001938:	080019b9 	.word	0x080019b9
 800193c:	080019b9 	.word	0x080019b9
 8001940:	080019f1 	.word	0x080019f1
 8001944:	080019f1 	.word	0x080019f1
 8001948:	080019f1 	.word	0x080019f1
 800194c:	080019f1 	.word	0x080019f1
 8001950:	08001981 	.word	0x08001981
 8001954:	080019b9 	.word	0x080019b9
 8001958:	080019b9 	.word	0x080019b9
 800195c:	080019b9 	.word	0x080019b9
 8001960:	080019b9 	.word	0x080019b9
 8001964:	080019f1 	.word	0x080019f1
 8001968:	080019f1 	.word	0x080019f1
 800196c:	080019f1 	.word	0x080019f1
 8001970:	08001981 	.word	0x08001981
 8001974:	080019b9 	.word	0x080019b9
 8001978:	080019b9 	.word	0x080019b9
 800197c:	080019b9 	.word	0x080019b9
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8001980:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	da00      	bge.n	800198a <LIS2DW12_ACC_GetAxesRaw+0xce>
 8001988:	330f      	adds	r3, #15
 800198a:	111b      	asrs	r3, r3, #4
 800198c:	b21a      	sxth	r2, r3
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8001992:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001996:	2b00      	cmp	r3, #0
 8001998:	da00      	bge.n	800199c <LIS2DW12_ACC_GetAxesRaw+0xe0>
 800199a:	330f      	adds	r3, #15
 800199c:	111b      	asrs	r3, r3, #4
 800199e:	b21a      	sxth	r2, r3
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 80019a4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	da00      	bge.n	80019ae <LIS2DW12_ACC_GetAxesRaw+0xf2>
 80019ac:	330f      	adds	r3, #15
 80019ae:	111b      	asrs	r3, r3, #4
 80019b0:	b21a      	sxth	r2, r3
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	809a      	strh	r2, [r3, #4]
      break;
 80019b6:	e01f      	b.n	80019f8 <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 80019b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	da00      	bge.n	80019c2 <LIS2DW12_ACC_GetAxesRaw+0x106>
 80019c0:	3303      	adds	r3, #3
 80019c2:	109b      	asrs	r3, r3, #2
 80019c4:	b21a      	sxth	r2, r3
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 80019ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	da00      	bge.n	80019d4 <LIS2DW12_ACC_GetAxesRaw+0x118>
 80019d2:	3303      	adds	r3, #3
 80019d4:	109b      	asrs	r3, r3, #2
 80019d6:	b21a      	sxth	r2, r3
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 80019dc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	da00      	bge.n	80019e6 <LIS2DW12_ACC_GetAxesRaw+0x12a>
 80019e4:	3303      	adds	r3, #3
 80019e6:	109b      	asrs	r3, r3, #2
 80019e8:	b21a      	sxth	r2, r3
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	809a      	strh	r2, [r3, #4]
      break;
 80019ee:	e003      	b.n	80019f8 <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 80019f0:	f04f 33ff 	mov.w	r3, #4294967295
 80019f4:	617b      	str	r3, [r7, #20]
      break;
 80019f6:	bf00      	nop
  }

  return ret;
 80019f8:	697b      	ldr	r3, [r7, #20]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop

08001a04 <LIS2DW12_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	4619      	mov	r1, r3
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ff4e 	bl	80018bc <LIS2DW12_ACC_GetAxesRaw>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d002      	beq.n	8001a2c <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 8001a26:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2a:	e03c      	b.n	8001aa6 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	4619      	mov	r1, r3
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff fbfa 	bl	800122c <LIS2DW12_ACC_GetSensitivity>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d002      	beq.n	8001a44 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8001a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a42:	e030      	b.n	8001aa6 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8001a44:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a48:	ee07 3a90 	vmov	s15, r3
 8001a4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a50:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a5c:	ee17 2a90 	vmov	r2, s15
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8001a64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a68:	ee07 3a90 	vmov	s15, r3
 8001a6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a70:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a7c:	ee17 2a90 	vmov	r2, s15
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8001a84:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a88:	ee07 3a90 	vmov	s15, r3
 8001a8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a90:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a9c:	ee17 2a90 	vmov	r2, s15
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <LIS2DW12_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	70fb      	strb	r3, [r7, #3]
 8001aba:	4613      	mov	r3, r2
 8001abc:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f103 001c 	add.w	r0, r3, #28
 8001ac4:	1cba      	adds	r2, r7, #2
 8001ac6:	78f9      	ldrb	r1, [r7, #3]
 8001ac8:	2301      	movs	r3, #1
 8001aca:	f000 fa07 	bl	8001edc <lis2dw12_write_reg>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d002      	beq.n	8001ada <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8001ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad8:	e000      	b.n	8001adc <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	ed87 0a02 	vstr	s0, [r7, #8]
 8001af0:	460b      	mov	r3, r1
 8001af2:	71fb      	strb	r3, [r7, #7]
 8001af4:	4613      	mov	r3, r2
 8001af6:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d80b      	bhi.n	8001b18 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8001b00:	a201      	add	r2, pc, #4	; (adr r2, 8001b08 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8001b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b06:	bf00      	nop
 8001b08:	08001b45 	.word	0x08001b45
 8001b0c:	08001b71 	.word	0x08001b71
 8001b10:	08001b9d 	.word	0x08001b9d
 8001b14:	08001bc9 	.word	0x08001bc9
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8001b18:	79bb      	ldrb	r3, [r7, #6]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d002      	beq.n	8001b24 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE; 
 8001b1e:	2304      	movs	r3, #4
 8001b20:	75fb      	strb	r3, [r7, #23]
          break;
 8001b22:	e002      	b.n	8001b2a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8001b24:	2314      	movs	r3, #20
 8001b26:	75fb      	strb	r3, [r7, #23]
          break;
 8001b28:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if(Odr < 12.5f)
 8001b2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b2e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001b32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3a:	d400      	bmi.n	8001b3e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8001b3c:	e05a      	b.n	8001bf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8001b3e:	4b6f      	ldr	r3, [pc, #444]	; (8001cfc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8001b40:	60bb      	str	r3, [r7, #8]
      break;
 8001b42:	e057      	b.n	8001bf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8001b44:	79bb      	ldrb	r3, [r7, #6]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d002      	beq.n	8001b50 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4; 
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	75fb      	strb	r3, [r7, #23]
          break;
 8001b4e:	e002      	b.n	8001b56 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8001b50:	2313      	movs	r3, #19
 8001b52:	75fb      	strb	r3, [r7, #23]
          break;
 8001b54:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8001b56:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b5a:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001d00 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001b5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b66:	dc00      	bgt.n	8001b6a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8001b68:	e044      	b.n	8001bf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001b6a:	4b66      	ldr	r3, [pc, #408]	; (8001d04 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001b6c:	60bb      	str	r3, [r7, #8]
      break;
 8001b6e:	e041      	b.n	8001bf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8001b70:	79bb      	ldrb	r3, [r7, #6]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d002      	beq.n	8001b7c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3; 
 8001b76:	2302      	movs	r3, #2
 8001b78:	75fb      	strb	r3, [r7, #23]
          break;
 8001b7a:	e002      	b.n	8001b82 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8001b7c:	2312      	movs	r3, #18
 8001b7e:	75fb      	strb	r3, [r7, #23]
          break;
 8001b80:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8001b82:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b86:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001d00 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b92:	dc00      	bgt.n	8001b96 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8001b94:	e02e      	b.n	8001bf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001b96:	4b5b      	ldr	r3, [pc, #364]	; (8001d04 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001b98:	60bb      	str	r3, [r7, #8]
      break;
 8001b9a:	e02b      	b.n	8001bf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8001b9c:	79bb      	ldrb	r3, [r7, #6]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d002      	beq.n	8001ba8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2; 
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	75fb      	strb	r3, [r7, #23]
          break;
 8001ba6:	e002      	b.n	8001bae <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8001ba8:	2311      	movs	r3, #17
 8001baa:	75fb      	strb	r3, [r7, #23]
          break;
 8001bac:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8001bae:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bb2:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001d00 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbe:	dc00      	bgt.n	8001bc2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8001bc0:	e018      	b.n	8001bf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001bc2:	4b50      	ldr	r3, [pc, #320]	; (8001d04 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001bc4:	60bb      	str	r3, [r7, #8]
      break;
 8001bc6:	e015      	b.n	8001bf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8001bc8:	79bb      	ldrb	r3, [r7, #6]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d002      	beq.n	8001bd4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit; 
 8001bce:	2300      	movs	r3, #0
 8001bd0:	75fb      	strb	r3, [r7, #23]
          break;
 8001bd2:	e002      	b.n	8001bda <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8001bd4:	2310      	movs	r3, #16
 8001bd6:	75fb      	strb	r3, [r7, #23]
          break;
 8001bd8:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8001bda:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bde:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001d00 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001be2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bea:	dc00      	bgt.n	8001bee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8001bec:	e001      	b.n	8001bf2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8001bee:	4b45      	ldr	r3, [pc, #276]	; (8001d04 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001bf0:	60bb      	str	r3, [r7, #8]
      break;
 8001bf2:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
          : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8001bf4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bf8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001d08 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8001bfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c04:	d801      	bhi.n	8001c0a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e04d      	b.n	8001ca6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001c0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c0e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001c12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1a:	d801      	bhi.n	8001c20 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	e042      	b.n	8001ca6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001c20:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c24:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001c28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c30:	d801      	bhi.n	8001c36 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8001c32:	2303      	movs	r3, #3
 8001c34:	e037      	b.n	8001ca6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001c36:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c3a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001d0c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8001c3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c46:	d801      	bhi.n	8001c4c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8001c48:	2304      	movs	r3, #4
 8001c4a:	e02c      	b.n	8001ca6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001c4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c50:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001d10 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8001c54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5c:	d801      	bhi.n	8001c62 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8001c5e:	2305      	movs	r3, #5
 8001c60:	e021      	b.n	8001ca6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001c62:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c66:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001d00 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001c6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c72:	d801      	bhi.n	8001c78 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8001c74:	2306      	movs	r3, #6
 8001c76:	e016      	b.n	8001ca6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001c78:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c7c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001d14 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8001c80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c88:	d801      	bhi.n	8001c8e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8001c8a:	2307      	movs	r3, #7
 8001c8c:	e00b      	b.n	8001ca6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001c8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c92:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001d18 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8001c96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9e:	d801      	bhi.n	8001ca4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8001ca0:	2308      	movs	r3, #8
 8001ca2:	e000      	b.n	8001ca6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001ca4:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8001ca6:	75bb      	strb	r3, [r7, #22]
          : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
          : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
          :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	331c      	adds	r3, #28
 8001cac:	7dba      	ldrb	r2, [r7, #22]
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 fa35 	bl	8002120 <lis2dw12_data_rate_set>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d002      	beq.n	8001cc2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8001cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc0:	e018      	b.n	8001cf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	331c      	adds	r3, #28
 8001cc6:	7dfa      	ldrb	r2, [r7, #23]
 8001cc8:	4611      	mov	r1, r2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 f91e 	bl	8001f0c <lis2dw12_power_mode_set>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cda:	e00b      	b.n	8001cf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	62da      	str	r2, [r3, #44]	; 0x2c
  pObj->acc_operating_mode = Mode;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	79fa      	ldrb	r2, [r7, #7]
 8001ce6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	79ba      	ldrb	r2, [r7, #6]
 8001cee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	41480000 	.word	0x41480000
 8001d00:	43480000 	.word	0x43480000
 8001d04:	43480000 	.word	0x43480000
 8001d08:	3fcccccd 	.word	0x3fcccccd
 8001d0c:	42480000 	.word	0x42480000
 8001d10:	42c80000 	.word	0x42c80000
 8001d14:	43c80000 	.word	0x43c80000
 8001d18:	44480000 	.word	0x44480000

08001d1c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	71fb      	strb	r3, [r7, #7]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	79fa      	ldrb	r2, [r7, #7]
 8001d34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	79ba      	ldrb	r2, [r7, #6]
 8001d3c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                : (Odr <=   12.5f) ?   12.5f
 8001d40:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d44:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001e04 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8001d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d50:	d801      	bhi.n	8001d56 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8001d52:	4b2d      	ldr	r3, [pc, #180]	; (8001e08 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8001d54:	e04d      	b.n	8001df2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=   25.0f) ?   25.0f
 8001d56:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d5a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001d5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d66:	d801      	bhi.n	8001d6c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8001d68:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8001d6a:	e042      	b.n	8001df2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=   50.0f) ?   50.0f
 8001d6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d70:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001d74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7c:	d801      	bhi.n	8001d82 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8001d7e:	4b24      	ldr	r3, [pc, #144]	; (8001e10 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8001d80:	e037      	b.n	8001df2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  100.0f) ?  100.0f
 8001d82:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d86:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001e14 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8001d8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d92:	d801      	bhi.n	8001d98 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8001d94:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8001d96:	e02c      	b.n	8001df2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  200.0f) ?  200.0f
 8001d98:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d9c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001e1c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8001da0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da8:	d801      	bhi.n	8001dae <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8001daa:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8001dac:	e021      	b.n	8001df2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  400.0f) ?  400.0f
 8001dae:	edd7 7a02 	vldr	s15, [r7, #8]
 8001db2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001e24 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 8001db6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbe:	d801      	bhi.n	8001dc4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8001dc0:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8001dc2:	e016      	b.n	8001df2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  800.0f) ?  800.0f
 8001dc4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dc8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001e2c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8001dcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd4:	d801      	bhi.n	8001dda <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8001dd6:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8001dd8:	e00b      	b.n	8001df2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                :                    1600.0f;
 8001dda:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dde:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001e34 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8001de2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dea:	d801      	bhi.n	8001df0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8001dee:	e000      	b.n	8001df2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	62d3      	str	r3, [r2, #44]	; 0x2c

  return LIS2DW12_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	3fcccccd 	.word	0x3fcccccd
 8001e08:	3fcccccd 	.word	0x3fcccccd
 8001e0c:	41480000 	.word	0x41480000
 8001e10:	41c80000 	.word	0x41c80000
 8001e14:	42480000 	.word	0x42480000
 8001e18:	42480000 	.word	0x42480000
 8001e1c:	42c80000 	.word	0x42c80000
 8001e20:	42c80000 	.word	0x42c80000
 8001e24:	43480000 	.word	0x43480000
 8001e28:	43480000 	.word	0x43480000
 8001e2c:	43c80000 	.word	0x43c80000
 8001e30:	43c80000 	.word	0x43c80000
 8001e34:	44480000 	.word	0x44480000
 8001e38:	44480000 	.word	0x44480000
 8001e3c:	44c80000 	.word	0x44c80000

08001e40 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001e40:	b590      	push	{r4, r7, lr}
 8001e42:	b087      	sub	sp, #28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	607a      	str	r2, [r7, #4]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	72fb      	strb	r3, [r7, #11]
 8001e50:	4613      	mov	r3, r2
 8001e52:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	695c      	ldr	r4, [r3, #20]
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	7b1b      	ldrb	r3, [r3, #12]
 8001e60:	b298      	uxth	r0, r3
 8001e62:	7afb      	ldrb	r3, [r7, #11]
 8001e64:	b299      	uxth	r1, r3
 8001e66:	893b      	ldrh	r3, [r7, #8]
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	47a0      	blx	r4
 8001e6c:	4603      	mov	r3, r0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	371c      	adds	r7, #28
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd90      	pop	{r4, r7, pc}

08001e76 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001e76:	b590      	push	{r4, r7, lr}
 8001e78:	b087      	sub	sp, #28
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	60f8      	str	r0, [r7, #12]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	461a      	mov	r2, r3
 8001e82:	460b      	mov	r3, r1
 8001e84:	72fb      	strb	r3, [r7, #11]
 8001e86:	4613      	mov	r3, r2
 8001e88:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	691c      	ldr	r4, [r3, #16]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	7b1b      	ldrb	r3, [r3, #12]
 8001e96:	b298      	uxth	r0, r3
 8001e98:	7afb      	ldrb	r3, [r7, #11]
 8001e9a:	b299      	uxth	r1, r3
 8001e9c:	893b      	ldrh	r3, [r7, #8]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	47a0      	blx	r4
 8001ea2:	4603      	mov	r3, r0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	371c      	adds	r7, #28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd90      	pop	{r4, r7, pc}

08001eac <lis2dw12_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_read_reg(lis2dw12_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8001eac:	b590      	push	{r4, r7, lr}
 8001eae:	b087      	sub	sp, #28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	607a      	str	r2, [r7, #4]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	460b      	mov	r3, r1
 8001eba:	72fb      	strb	r3, [r7, #11]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	685c      	ldr	r4, [r3, #4]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6898      	ldr	r0, [r3, #8]
 8001ec8:	893b      	ldrh	r3, [r7, #8]
 8001eca:	7af9      	ldrb	r1, [r7, #11]
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	47a0      	blx	r4
 8001ed0:	6178      	str	r0, [r7, #20]
  return ret;
 8001ed2:	697b      	ldr	r3, [r7, #20]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	371c      	adds	r7, #28
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd90      	pop	{r4, r7, pc}

08001edc <lis2dw12_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_write_reg(lis2dw12_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 8001edc:	b590      	push	{r4, r7, lr}
 8001ede:	b087      	sub	sp, #28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	460b      	mov	r3, r1
 8001eea:	72fb      	strb	r3, [r7, #11]
 8001eec:	4613      	mov	r3, r2
 8001eee:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681c      	ldr	r4, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6898      	ldr	r0, [r3, #8]
 8001ef8:	893b      	ldrh	r3, [r7, #8]
 8001efa:	7af9      	ldrb	r1, [r7, #11]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	47a0      	blx	r4
 8001f00:	6178      	str	r0, [r7, #20]
  return ret;
 8001f02:	697b      	ldr	r3, [r7, #20]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	371c      	adds	r7, #28
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd90      	pop	{r4, r7, pc}

08001f0c <lis2dw12_power_mode_set>:
  *                  and low_noise in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(lis2dw12_ctx_t *ctx, lis2dw12_mode_t val)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8001f18:	f107 0210 	add.w	r2, r7, #16
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	2120      	movs	r1, #32
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ffc3 	bl	8001eac <lis2dw12_read_reg>
 8001f26:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d119      	bne.n	8001f62 <lis2dw12_power_mode_set+0x56>
    ctrl1.mode = ( (uint8_t) val & 0x0CU ) >> 2;
 8001f2e:	78fb      	ldrb	r3, [r7, #3]
 8001f30:	089b      	lsrs	r3, r3, #2
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	7c3b      	ldrb	r3, [r7, #16]
 8001f3c:	f362 0383 	bfi	r3, r2, #2, #2
 8001f40:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8001f42:	78fb      	ldrb	r3, [r7, #3]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	7c3b      	ldrb	r3, [r7, #16]
 8001f4c:	f362 0301 	bfi	r3, r2, #0, #2
 8001f50:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8001f52:	f107 0210 	add.w	r2, r7, #16
 8001f56:	2301      	movs	r3, #1
 8001f58:	2120      	movs	r1, #32
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ffbe 	bl	8001edc <lis2dw12_write_reg>
 8001f60:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d107      	bne.n	8001f78 <lis2dw12_power_mode_set+0x6c>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
 8001f68:	f107 020c 	add.w	r2, r7, #12
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	2125      	movs	r1, #37	; 0x25
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff ff9b 	bl	8001eac <lis2dw12_read_reg>
 8001f76:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d111      	bne.n	8001fa2 <lis2dw12_power_mode_set+0x96>
    ctrl6.low_noise = ( (uint8_t) val & 0x10U ) >> 4;
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	091b      	lsrs	r3, r3, #4
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	7b3b      	ldrb	r3, [r7, #12]
 8001f8c:	f362 0382 	bfi	r3, r2, #2, #1
 8001f90:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
 8001f92:	f107 020c 	add.w	r2, r7, #12
 8001f96:	2301      	movs	r3, #1
 8001f98:	2125      	movs	r1, #37	; 0x25
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff ff9e 	bl	8001edc <lis2dw12_write_reg>
 8001fa0:	6178      	str	r0, [r7, #20]
  }
  return ret;
 8001fa2:	697b      	ldr	r3, [r7, #20]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <lis2dw12_power_mode_get>:
  *                  and low_noise in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(lis2dw12_ctx_t *ctx, lis2dw12_mode_t *val)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8001fb6:	f107 0210 	add.w	r2, r7, #16
 8001fba:	2301      	movs	r3, #1
 8001fbc:	2120      	movs	r1, #32
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff ff74 	bl	8001eac <lis2dw12_read_reg>
 8001fc4:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f040 80a3 	bne.w	8002114 <lis2dw12_power_mode_get+0x168>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
 8001fce:	f107 020c 	add.w	r2, r7, #12
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	2125      	movs	r1, #37	; 0x25
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff ff68 	bl	8001eac <lis2dw12_read_reg>
 8001fdc:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8001fde:	7b3b      	ldrb	r3, [r7, #12]
 8001fe0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	011a      	lsls	r2, r3, #4
 8001fe8:	7c3b      	ldrb	r3, [r7, #16]
 8001fea:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
            ctrl1.lp_mode)) {
 8001ff4:	7c3a      	ldrb	r2, [r7, #16]
 8001ff6:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8001ffa:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8001ffc:	4413      	add	r3, r2
 8001ffe:	2b1b      	cmp	r3, #27
 8002000:	f200 8084 	bhi.w	800210c <lis2dw12_power_mode_get+0x160>
 8002004:	a201      	add	r2, pc, #4	; (adr r2, 800200c <lis2dw12_power_mode_get+0x60>)
 8002006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800200a:	bf00      	nop
 800200c:	0800209d 	.word	0x0800209d
 8002010:	08002095 	.word	0x08002095
 8002014:	0800208d 	.word	0x0800208d
 8002018:	08002085 	.word	0x08002085
 800201c:	0800207d 	.word	0x0800207d
 8002020:	0800210d 	.word	0x0800210d
 8002024:	0800210d 	.word	0x0800210d
 8002028:	0800210d 	.word	0x0800210d
 800202c:	080020bd 	.word	0x080020bd
 8002030:	080020b5 	.word	0x080020b5
 8002034:	080020ad 	.word	0x080020ad
 8002038:	080020a5 	.word	0x080020a5
 800203c:	0800210d 	.word	0x0800210d
 8002040:	0800210d 	.word	0x0800210d
 8002044:	0800210d 	.word	0x0800210d
 8002048:	0800210d 	.word	0x0800210d
 800204c:	080020e5 	.word	0x080020e5
 8002050:	080020dd 	.word	0x080020dd
 8002054:	080020d5 	.word	0x080020d5
 8002058:	080020cd 	.word	0x080020cd
 800205c:	080020c5 	.word	0x080020c5
 8002060:	0800210d 	.word	0x0800210d
 8002064:	0800210d 	.word	0x0800210d
 8002068:	0800210d 	.word	0x0800210d
 800206c:	08002105 	.word	0x08002105
 8002070:	080020fd 	.word	0x080020fd
 8002074:	080020f5 	.word	0x080020f5
 8002078:	080020ed 	.word	0x080020ed
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	2204      	movs	r2, #4
 8002080:	701a      	strb	r2, [r3, #0]
        break;
 8002082:	e047      	b.n	8002114 <lis2dw12_power_mode_get+0x168>
      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	2203      	movs	r2, #3
 8002088:	701a      	strb	r2, [r3, #0]
        break;
 800208a:	e043      	b.n	8002114 <lis2dw12_power_mode_get+0x168>
      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	2202      	movs	r2, #2
 8002090:	701a      	strb	r2, [r3, #0]
        break;
 8002092:	e03f      	b.n	8002114 <lis2dw12_power_mode_get+0x168>
      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	2201      	movs	r2, #1
 8002098:	701a      	strb	r2, [r3, #0]
        break;
 800209a:	e03b      	b.n	8002114 <lis2dw12_power_mode_get+0x168>
      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	2200      	movs	r2, #0
 80020a0:	701a      	strb	r2, [r3, #0]
        break;
 80020a2:	e037      	b.n	8002114 <lis2dw12_power_mode_get+0x168>
      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	220b      	movs	r2, #11
 80020a8:	701a      	strb	r2, [r3, #0]
        break;
 80020aa:	e033      	b.n	8002114 <lis2dw12_power_mode_get+0x168>
      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	220a      	movs	r2, #10
 80020b0:	701a      	strb	r2, [r3, #0]
        break;
 80020b2:	e02f      	b.n	8002114 <lis2dw12_power_mode_get+0x168>
      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	2209      	movs	r2, #9
 80020b8:	701a      	strb	r2, [r3, #0]
        break;
 80020ba:	e02b      	b.n	8002114 <lis2dw12_power_mode_get+0x168>
      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	2208      	movs	r2, #8
 80020c0:	701a      	strb	r2, [r3, #0]
        break;
 80020c2:	e027      	b.n	8002114 <lis2dw12_power_mode_get+0x168>
      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	2214      	movs	r2, #20
 80020c8:	701a      	strb	r2, [r3, #0]
        break;
 80020ca:	e023      	b.n	8002114 <lis2dw12_power_mode_get+0x168>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	2213      	movs	r2, #19
 80020d0:	701a      	strb	r2, [r3, #0]
        break;
 80020d2:	e01f      	b.n	8002114 <lis2dw12_power_mode_get+0x168>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	2212      	movs	r2, #18
 80020d8:	701a      	strb	r2, [r3, #0]
        break;
 80020da:	e01b      	b.n	8002114 <lis2dw12_power_mode_get+0x168>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	2211      	movs	r2, #17
 80020e0:	701a      	strb	r2, [r3, #0]
        break;
 80020e2:	e017      	b.n	8002114 <lis2dw12_power_mode_get+0x168>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	2210      	movs	r2, #16
 80020e8:	701a      	strb	r2, [r3, #0]
        break;
 80020ea:	e013      	b.n	8002114 <lis2dw12_power_mode_get+0x168>
      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	221b      	movs	r2, #27
 80020f0:	701a      	strb	r2, [r3, #0]
        break;
 80020f2:	e00f      	b.n	8002114 <lis2dw12_power_mode_get+0x168>
      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	221a      	movs	r2, #26
 80020f8:	701a      	strb	r2, [r3, #0]
        break;
 80020fa:	e00b      	b.n	8002114 <lis2dw12_power_mode_get+0x168>
      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	2219      	movs	r2, #25
 8002100:	701a      	strb	r2, [r3, #0]
        break;
 8002102:	e007      	b.n	8002114 <lis2dw12_power_mode_get+0x168>
      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	2218      	movs	r2, #24
 8002108:	701a      	strb	r2, [r3, #0]
        break;
 800210a:	e003      	b.n	8002114 <lis2dw12_power_mode_get+0x168>
      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	2204      	movs	r2, #4
 8002110:	701a      	strb	r2, [r3, #0]
        break;
 8002112:	bf00      	nop
    }
  }
  return ret;
 8002114:	697b      	ldr	r3, [r7, #20]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop

08002120 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(lis2dw12_ctx_t *ctx, lis2dw12_odr_t val)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 800212c:	f107 0210 	add.w	r2, r7, #16
 8002130:	2301      	movs	r3, #1
 8002132:	2120      	movs	r1, #32
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff feb9 	bl	8001eac <lis2dw12_read_reg>
 800213a:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10f      	bne.n	8002162 <lis2dw12_data_rate_set+0x42>
    ctrl1.odr = (uint8_t) val;
 8002142:	78fb      	ldrb	r3, [r7, #3]
 8002144:	f003 030f 	and.w	r3, r3, #15
 8002148:	b2da      	uxtb	r2, r3
 800214a:	7c3b      	ldrb	r3, [r7, #16]
 800214c:	f362 1307 	bfi	r3, r2, #4, #4
 8002150:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8002152:	f107 0210 	add.w	r2, r7, #16
 8002156:	2301      	movs	r3, #1
 8002158:	2120      	movs	r1, #32
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff febe 	bl	8001edc <lis2dw12_write_reg>
 8002160:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d107      	bne.n	8002178 <lis2dw12_data_rate_set+0x58>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
 8002168:	f107 020c 	add.w	r2, r7, #12
 800216c:	2301      	movs	r3, #1
 800216e:	2122      	movs	r1, #34	; 0x22
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff fe9b 	bl	8001eac <lis2dw12_read_reg>
 8002176:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d111      	bne.n	80021a2 <lis2dw12_data_rate_set+0x82>
    ctrl3.slp_mode = ( (uint8_t) val & 0x30U ) >> 4;
 800217e:	78fb      	ldrb	r3, [r7, #3]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	b2db      	uxtb	r3, r3
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	b2da      	uxtb	r2, r3
 800218a:	7b3b      	ldrb	r3, [r7, #12]
 800218c:	f362 0301 	bfi	r3, r2, #0, #2
 8002190:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
 8002192:	f107 020c 	add.w	r2, r7, #12
 8002196:	2301      	movs	r3, #1
 8002198:	2122      	movs	r1, #34	; 0x22
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff fe9e 	bl	8001edc <lis2dw12_write_reg>
 80021a0:	6178      	str	r0, [r7, #20]
  }
  return ret;
 80021a2:	697b      	ldr	r3, [r7, #20]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(lis2dw12_ctx_t *ctx, lis2dw12_odr_t *val)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 80021b6:	f107 0210 	add.w	r2, r7, #16
 80021ba:	2301      	movs	r3, #1
 80021bc:	2120      	movs	r1, #32
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7ff fe74 	bl	8001eac <lis2dw12_read_reg>
 80021c4:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f040 808d 	bne.w	80022e8 <lis2dw12_data_rate_get+0x13c>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
 80021ce:	f107 020c 	add.w	r2, r7, #12
 80021d2:	2301      	movs	r3, #1
 80021d4:	2122      	movs	r1, #34	; 0x22
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff fe68 	bl	8001eac <lis2dw12_read_reg>
 80021dc:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr) {
 80021de:	7b3b      	ldrb	r3, [r7, #12]
 80021e0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	7c3a      	ldrb	r2, [r7, #16]
 80021ea:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	4413      	add	r3, r2
 80021f2:	2b20      	cmp	r3, #32
 80021f4:	d874      	bhi.n	80022e0 <lis2dw12_data_rate_get+0x134>
 80021f6:	a201      	add	r2, pc, #4	; (adr r2, 80021fc <lis2dw12_data_rate_get+0x50>)
 80021f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fc:	08002281 	.word	0x08002281
 8002200:	08002289 	.word	0x08002289
 8002204:	08002291 	.word	0x08002291
 8002208:	08002299 	.word	0x08002299
 800220c:	080022a1 	.word	0x080022a1
 8002210:	080022a9 	.word	0x080022a9
 8002214:	080022b1 	.word	0x080022b1
 8002218:	080022b9 	.word	0x080022b9
 800221c:	080022c1 	.word	0x080022c1
 8002220:	080022c9 	.word	0x080022c9
 8002224:	080022e1 	.word	0x080022e1
 8002228:	080022e1 	.word	0x080022e1
 800222c:	080022e1 	.word	0x080022e1
 8002230:	080022e1 	.word	0x080022e1
 8002234:	080022e1 	.word	0x080022e1
 8002238:	080022e1 	.word	0x080022e1
 800223c:	080022d1 	.word	0x080022d1
 8002240:	080022e1 	.word	0x080022e1
 8002244:	080022e1 	.word	0x080022e1
 8002248:	080022e1 	.word	0x080022e1
 800224c:	080022e1 	.word	0x080022e1
 8002250:	080022e1 	.word	0x080022e1
 8002254:	080022e1 	.word	0x080022e1
 8002258:	080022e1 	.word	0x080022e1
 800225c:	080022e1 	.word	0x080022e1
 8002260:	080022e1 	.word	0x080022e1
 8002264:	080022e1 	.word	0x080022e1
 8002268:	080022e1 	.word	0x080022e1
 800226c:	080022e1 	.word	0x080022e1
 8002270:	080022e1 	.word	0x080022e1
 8002274:	080022e1 	.word	0x080022e1
 8002278:	080022e1 	.word	0x080022e1
 800227c:	080022d9 	.word	0x080022d9
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
        break;
 8002286:	e02f      	b.n	80022e8 <lis2dw12_data_rate_get+0x13c>
      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	2201      	movs	r2, #1
 800228c:	701a      	strb	r2, [r3, #0]
        break;
 800228e:	e02b      	b.n	80022e8 <lis2dw12_data_rate_get+0x13c>
      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	2202      	movs	r2, #2
 8002294:	701a      	strb	r2, [r3, #0]
        break;
 8002296:	e027      	b.n	80022e8 <lis2dw12_data_rate_get+0x13c>
      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	2203      	movs	r2, #3
 800229c:	701a      	strb	r2, [r3, #0]
        break;
 800229e:	e023      	b.n	80022e8 <lis2dw12_data_rate_get+0x13c>
       case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	2204      	movs	r2, #4
 80022a4:	701a      	strb	r2, [r3, #0]
        break;
 80022a6:	e01f      	b.n	80022e8 <lis2dw12_data_rate_get+0x13c>
      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	2205      	movs	r2, #5
 80022ac:	701a      	strb	r2, [r3, #0]
        break;
 80022ae:	e01b      	b.n	80022e8 <lis2dw12_data_rate_get+0x13c>
      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	2206      	movs	r2, #6
 80022b4:	701a      	strb	r2, [r3, #0]
        break;
 80022b6:	e017      	b.n	80022e8 <lis2dw12_data_rate_get+0x13c>
      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	2207      	movs	r2, #7
 80022bc:	701a      	strb	r2, [r3, #0]
        break;
 80022be:	e013      	b.n	80022e8 <lis2dw12_data_rate_get+0x13c>
       case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	2208      	movs	r2, #8
 80022c4:	701a      	strb	r2, [r3, #0]
        break;
 80022c6:	e00f      	b.n	80022e8 <lis2dw12_data_rate_get+0x13c>
      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	2209      	movs	r2, #9
 80022cc:	701a      	strb	r2, [r3, #0]
        break;
 80022ce:	e00b      	b.n	80022e8 <lis2dw12_data_rate_get+0x13c>
      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	2210      	movs	r2, #16
 80022d4:	701a      	strb	r2, [r3, #0]
        break;
 80022d6:	e007      	b.n	80022e8 <lis2dw12_data_rate_get+0x13c>
      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	2220      	movs	r2, #32
 80022dc:	701a      	strb	r2, [r3, #0]
        break;
 80022de:	e003      	b.n	80022e8 <lis2dw12_data_rate_get+0x13c>
      default:
        *val = LIS2DW12_XL_ODR_OFF;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
        break;
 80022e6:	bf00      	nop
    }
  }
  return ret;
 80022e8:	697b      	ldr	r3, [r7, #20]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop

080022f4 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(lis2dw12_ctx_t *ctx, uint8_t val)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 8002300:	f107 0208 	add.w	r2, r7, #8
 8002304:	2301      	movs	r3, #1
 8002306:	2121      	movs	r1, #33	; 0x21
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff fdcf 	bl	8001eac <lis2dw12_read_reg>
 800230e:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10f      	bne.n	8002336 <lis2dw12_block_data_update_set+0x42>
    reg.bdu = val;
 8002316:	78fb      	ldrb	r3, [r7, #3]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	b2da      	uxtb	r2, r3
 800231e:	7a3b      	ldrb	r3, [r7, #8]
 8002320:	f362 03c3 	bfi	r3, r2, #3, #1
 8002324:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 8002326:	f107 0208 	add.w	r2, r7, #8
 800232a:	2301      	movs	r3, #1
 800232c:	2121      	movs	r1, #33	; 0x21
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff fdd4 	bl	8001edc <lis2dw12_write_reg>
 8002334:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8002336:	68fb      	ldr	r3, [r7, #12]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(lis2dw12_ctx_t *ctx, lis2dw12_fs_t val)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
 800234c:	f107 0208 	add.w	r2, r7, #8
 8002350:	2301      	movs	r3, #1
 8002352:	2125      	movs	r1, #37	; 0x25
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff fda9 	bl	8001eac <lis2dw12_read_reg>
 800235a:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10f      	bne.n	8002382 <lis2dw12_full_scale_set+0x42>
    reg.fs = (uint8_t) val;
 8002362:	78fb      	ldrb	r3, [r7, #3]
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	b2da      	uxtb	r2, r3
 800236a:	7a3b      	ldrb	r3, [r7, #8]
 800236c:	f362 1305 	bfi	r3, r2, #4, #2
 8002370:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
 8002372:	f107 0208 	add.w	r2, r7, #8
 8002376:	2301      	movs	r3, #1
 8002378:	2125      	movs	r1, #37	; 0x25
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff fdae 	bl	8001edc <lis2dw12_write_reg>
 8002380:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8002382:	68fb      	ldr	r3, [r7, #12]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(lis2dw12_ctx_t *ctx, lis2dw12_fs_t *val)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
 8002396:	f107 0208 	add.w	r2, r7, #8
 800239a:	2301      	movs	r3, #1
 800239c:	2125      	movs	r1, #37	; 0x25
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff fd84 	bl	8001eac <lis2dw12_read_reg>
 80023a4:	60f8      	str	r0, [r7, #12]

  switch (reg.fs) {
 80023a6:	7a3b      	ldrb	r3, [r7, #8]
 80023a8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d81a      	bhi.n	80023e8 <lis2dw12_full_scale_get+0x5c>
 80023b2:	a201      	add	r2, pc, #4	; (adr r2, 80023b8 <lis2dw12_full_scale_get+0x2c>)
 80023b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b8:	080023c9 	.word	0x080023c9
 80023bc:	080023d1 	.word	0x080023d1
 80023c0:	080023d9 	.word	0x080023d9
 80023c4:	080023e1 	.word	0x080023e1
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	2200      	movs	r2, #0
 80023cc:	701a      	strb	r2, [r3, #0]
      break;
 80023ce:	e00f      	b.n	80023f0 <lis2dw12_full_scale_get+0x64>
    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	2201      	movs	r2, #1
 80023d4:	701a      	strb	r2, [r3, #0]
      break;
 80023d6:	e00b      	b.n	80023f0 <lis2dw12_full_scale_get+0x64>
    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	2202      	movs	r2, #2
 80023dc:	701a      	strb	r2, [r3, #0]
      break;
 80023de:	e007      	b.n	80023f0 <lis2dw12_full_scale_get+0x64>
    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	2203      	movs	r2, #3
 80023e4:	701a      	strb	r2, [r3, #0]
      break;
 80023e6:	e003      	b.n	80023f0 <lis2dw12_full_scale_get+0x64>
    default:
      *val = LIS2DW12_2g;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	2200      	movs	r2, #0
 80023ec:	701a      	strb	r2, [r3, #0]
      break;
 80023ee:	bf00      	nop
  }
  return ret;
 80023f0:	68fb      	ldr	r3, [r7, #12]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop

080023fc <lis2dw12_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(lis2dw12_ctx_t *ctx, uint8_t *buff)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8002406:	2306      	movs	r3, #6
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	2128      	movs	r1, #40	; 0x28
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7ff fd4d 	bl	8001eac <lis2dw12_read_reg>
 8002412:	60f8      	str	r0, [r7, #12]
  return ret;
 8002414:	68fb      	ldr	r3, [r7, #12]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(lis2dw12_ctx_t *ctx, uint8_t *buff)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b084      	sub	sp, #16
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
 8002426:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8002428:	2301      	movs	r3, #1
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	210f      	movs	r1, #15
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff fd3c 	bl	8001eac <lis2dw12_read_reg>
 8002434:	60f8      	str	r0, [r7, #12]
  return ret;
 8002436:	68fb      	ldr	r3, [r7, #12]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(lis2dw12_ctx_t *ctx, uint8_t val)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 800244c:	f107 0208 	add.w	r2, r7, #8
 8002450:	2301      	movs	r3, #1
 8002452:	2121      	movs	r1, #33	; 0x21
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f7ff fd29 	bl	8001eac <lis2dw12_read_reg>
 800245a:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10f      	bne.n	8002482 <lis2dw12_auto_increment_set+0x42>
    reg.if_add_inc = val;
 8002462:	78fb      	ldrb	r3, [r7, #3]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	b2da      	uxtb	r2, r3
 800246a:	7a3b      	ldrb	r3, [r7, #8]
 800246c:	f362 0382 	bfi	r3, r2, #2, #1
 8002470:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 8002472:	f107 0208 	add.w	r2, r7, #8
 8002476:	2301      	movs	r3, #1
 8002478:	2121      	movs	r1, #33	; 0x21
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff fd2e 	bl	8001edc <lis2dw12_write_reg>
 8002480:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8002482:	68fb      	ldr	r3, [r7, #12]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <lis2dw12_fifo_mode_set>:
  * @param  val      change the values of fmode in reg FIFO_CTRL
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(lis2dw12_ctx_t *ctx, lis2dw12_fmode_t val)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL,(uint8_t*) &reg, 1);
 8002498:	f107 0208 	add.w	r2, r7, #8
 800249c:	2301      	movs	r3, #1
 800249e:	212e      	movs	r1, #46	; 0x2e
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff fd03 	bl	8001eac <lis2dw12_read_reg>
 80024a6:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10f      	bne.n	80024ce <lis2dw12_fifo_mode_set+0x42>
    reg.fmode = (uint8_t) val;
 80024ae:	78fb      	ldrb	r3, [r7, #3]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	7a3b      	ldrb	r3, [r7, #8]
 80024b8:	f362 1347 	bfi	r3, r2, #5, #3
 80024bc:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL,(uint8_t*) &reg, 1);
 80024be:	f107 0208 	add.w	r2, r7, #8
 80024c2:	2301      	movs	r3, #1
 80024c4:	212e      	movs	r1, #46	; 0x2e
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7ff fd08 	bl	8001edc <lis2dw12_write_reg>
 80024cc:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80024ce:	68fb      	ldr	r3, [r7, #12]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <LIS2MDL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d103      	bne.n	80024f4 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 80024ec:	f04f 33ff 	mov.w	r3, #4294967295
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	e05d      	b.n	80025b0 <LIS2MDL_RegisterBusIO+0xd8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	7b1a      	ldrb	r2, [r3, #12]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	691a      	ldr	r2, [r3, #16]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	695a      	ldr	r2, [r3, #20]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	699a      	ldr	r2, [r3, #24]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a23      	ldr	r2, [pc, #140]	; (80025bc <LIS2MDL_RegisterBusIO+0xe4>)
 8002530:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a22      	ldr	r2, [pc, #136]	; (80025c0 <LIS2MDL_RegisterBusIO+0xe8>)
 8002536:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d103      	bne.n	800254e <LIS2MDL_RegisterBusIO+0x76>
    {
      ret = LIS2MDL_ERROR;
 8002546:	f04f 33ff 	mov.w	r3, #4294967295
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	e030      	b.n	80025b0 <LIS2MDL_RegisterBusIO+0xd8>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4798      	blx	r3
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <LIS2MDL_RegisterBusIO+0x8a>
    {
      ret = LIS2MDL_ERROR;
 800255a:	f04f 33ff 	mov.w	r3, #4294967295
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	e026      	b.n	80025b0 <LIS2MDL_RegisterBusIO+0xd8>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d022      	beq.n	80025b0 <LIS2MDL_RegisterBusIO+0xd8>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002570:	2b00      	cmp	r3, #0
 8002572:	d11d      	bne.n	80025b0 <LIS2MDL_RegisterBusIO+0xd8>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d10d      	bne.n	8002598 <LIS2MDL_RegisterBusIO+0xc0>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 800257c:	2334      	movs	r3, #52	; 0x34
 800257e:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8002580:	7afb      	ldrb	r3, [r7, #11]
 8002582:	461a      	mov	r2, r3
 8002584:	2162      	movs	r1, #98	; 0x62
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 fa15 	bl	80029b6 <LIS2MDL_Write_Reg>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00e      	beq.n	80025b0 <LIS2MDL_RegisterBusIO+0xd8>
            {
              return LIS2MDL_ERROR;
 8002592:	f04f 33ff 	mov.w	r3, #4294967295
 8002596:	e00c      	b.n	80025b2 <LIS2MDL_RegisterBusIO+0xda>
            }
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	331c      	adds	r3, #28
 800259c:	2101      	movs	r1, #1
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 fba8 	bl	8002cf4 <lis2mdl_i2c_interface_set>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <LIS2MDL_RegisterBusIO+0xd8>
            {
              return LIS2MDL_ERROR;
 80025aa:	f04f 33ff 	mov.w	r3, #4294967295
 80025ae:	e000      	b.n	80025b2 <LIS2MDL_RegisterBusIO+0xda>
        }
      }
    }
  }

  return ret;
 80025b0:	68fb      	ldr	r3, [r7, #12]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	080029ed 	.word	0x080029ed
 80025c0:	08002a4f 	.word	0x08002a4f

080025c4 <LIS2MDL_Init>:
 * @brief  Initialize the LIS2MDL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	331c      	adds	r3, #28
 80025d0:	2101      	movs	r1, #1
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 fb20 	bl	8002c18 <lis2mdl_block_data_update_set>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <LIS2MDL_Init+0x20>
  {
    return LIS2MDL_ERROR;
 80025de:	f04f 33ff 	mov.w	r3, #4294967295
 80025e2:	e028      	b.n	8002636 <LIS2MDL_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	331c      	adds	r3, #28
 80025e8:	2102      	movs	r1, #2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 fa90 	bl	8002b10 <lis2mdl_operating_mode_set>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <LIS2MDL_Init+0x38>
  {
    return LIS2MDL_ERROR;
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295
 80025fa:	e01c      	b.n	8002636 <LIS2MDL_Init+0x72>
  }

  /* Output data rate selection */
  if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	331c      	adds	r3, #28
 8002600:	2103      	movs	r1, #3
 8002602:	4618      	mov	r0, r3
 8002604:	f000 faaa 	bl	8002b5c <lis2mdl_data_rate_set>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d002      	beq.n	8002614 <LIS2MDL_Init+0x50>
  {
    return LIS2MDL_ERROR;
 800260e:	f04f 33ff 	mov.w	r3, #4294967295
 8002612:	e010      	b.n	8002636 <LIS2MDL_Init+0x72>
  }

  /* Self Test disabled. */
  if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	331c      	adds	r3, #28
 8002618:	2100      	movs	r1, #0
 800261a:	4618      	mov	r0, r3
 800261c:	f000 fb44 	bl	8002ca8 <lis2mdl_self_test_set>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <LIS2MDL_Init+0x68>
  {
    return LIS2MDL_ERROR;
 8002626:	f04f 33ff 	mov.w	r3, #4294967295
 800262a:	e004      	b.n	8002636 <LIS2MDL_Init+0x72>
  }

  pObj->is_initialized = 1;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <LIS2MDL_DeInit>:
 * @brief  Deinitialize the LIS2MDL magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f874 	bl	8002734 <LIS2MDL_MAG_Disable>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8002652:	f04f 33ff 	mov.w	r3, #4294967295
 8002656:	e004      	b.n	8002662 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <LIS2MDL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	6039      	str	r1, [r7, #0]
  if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	331c      	adds	r3, #28
 8002678:	6839      	ldr	r1, [r7, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f000 fb03 	bl	8002c86 <lis2mdl_device_id_get>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <LIS2MDL_ReadID+0x22>
  {
    return LIS2MDL_ERROR;
 8002686:	f04f 33ff 	mov.w	r3, #4294967295
 800268a:	e000      	b.n	800268e <LIS2MDL_ReadID+0x24>
  }

  return LIS2MDL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <LIS2MDL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	2200      	movs	r2, #0
 80026ac:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2201      	movs	r2, #1
 80026b2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	2200      	movs	r2, #0
 80026b8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2200      	movs	r2, #0
 80026be:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	2200      	movs	r2, #0
 80026c4:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2232      	movs	r2, #50	; 0x32
 80026ca:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	4a04      	ldr	r2, [pc, #16]	; (80026f0 <LIS2MDL_GetCapabilities+0x58>)
 80026e0:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	42c80000 	.word	0x42c80000

080026f4 <LIS2MDL_MAG_Enable>:
 * @brief Enable the LIS2MDL magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	e010      	b.n	800272c <LIS2MDL_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	331c      	adds	r3, #28
 800270e:	2100      	movs	r1, #0
 8002710:	4618      	mov	r0, r3
 8002712:	f000 f9fd 	bl	8002b10 <lis2mdl_operating_mode_set>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <LIS2MDL_MAG_Enable+0x2e>
  {
    return LIS2MDL_ERROR;
 800271c:	f04f 33ff 	mov.w	r3, #4294967295
 8002720:	e004      	b.n	800272c <LIS2MDL_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <LIS2MDL_MAG_Disable>:
 * @brief Disable the LIS2MDL magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8002746:	2300      	movs	r3, #0
 8002748:	e010      	b.n	800276c <LIS2MDL_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	331c      	adds	r3, #28
 800274e:	2102      	movs	r1, #2
 8002750:	4618      	mov	r0, r3
 8002752:	f000 f9dd 	bl	8002b10 <lis2mdl_operating_mode_set>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <LIS2MDL_MAG_Disable+0x2e>
  {
    return LIS2MDL_ERROR;
 800275c:	f04f 33ff 	mov.w	r3, #4294967295
 8002760:	e004      	b.n	800276c <LIS2MDL_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <LIS2MDL_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8002784:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <LIS2MDL_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	331c      	adds	r3, #28
 80027a6:	f107 020b 	add.w	r2, r7, #11
 80027aa:	4611      	mov	r1, r2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 f9fb 	bl	8002ba8 <lis2mdl_data_rate_get>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d002      	beq.n	80027be <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 80027b8:	f04f 33ff 	mov.w	r3, #4294967295
 80027bc:	e023      	b.n	8002806 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80027be:	7afb      	ldrb	r3, [r7, #11]
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d81b      	bhi.n	80027fc <LIS2MDL_MAG_GetOutputDataRate+0x68>
 80027c4:	a201      	add	r2, pc, #4	; (adr r2, 80027cc <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 80027c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ca:	bf00      	nop
 80027cc:	080027dd 	.word	0x080027dd
 80027d0:	080027e5 	.word	0x080027e5
 80027d4:	080027ed 	.word	0x080027ed
 80027d8:	080027f5 	.word	0x080027f5
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	4a0c      	ldr	r2, [pc, #48]	; (8002810 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 80027e0:	601a      	str	r2, [r3, #0]
      break;
 80027e2:	e00f      	b.n	8002804 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	4a0b      	ldr	r2, [pc, #44]	; (8002814 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 80027e8:	601a      	str	r2, [r3, #0]
      break;
 80027ea:	e00b      	b.n	8002804 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 80027f0:	601a      	str	r2, [r3, #0]
      break;
 80027f2:	e007      	b.n	8002804 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	4a09      	ldr	r2, [pc, #36]	; (800281c <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 80027f8:	601a      	str	r2, [r3, #0]
      break;
 80027fa:	e003      	b.n	8002804 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 80027fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002800:	60fb      	str	r3, [r7, #12]
      break;
 8002802:	bf00      	nop
  }

  return ret;
 8002804:	68fb      	ldr	r3, [r7, #12]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	41200000 	.word	0x41200000
 8002814:	41a00000 	.word	0x41a00000
 8002818:	42480000 	.word	0x42480000
 800281c:	42c80000 	.word	0x42c80000

08002820 <LIS2MDL_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 800282c:	edd7 7a00 	vldr	s15, [r7]
 8002830:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002834:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800283c:	d801      	bhi.n	8002842 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 800283e:	2300      	movs	r3, #0
 8002840:	e016      	b.n	8002870 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8002842:	edd7 7a00 	vldr	s15, [r7]
 8002846:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800284a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800284e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002852:	d801      	bhi.n	8002858 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8002854:	2301      	movs	r3, #1
 8002856:	e00b      	b.n	8002870 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8002858:	edd7 7a00 	vldr	s15, [r7]
 800285c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002898 <LIS2MDL_MAG_SetOutputDataRate+0x78>
 8002860:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002868:	d801      	bhi.n	800286e <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 800286a:	2302      	movs	r3, #2
 800286c:	e000      	b.n	8002870 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800286e:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8002870:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	331c      	adds	r3, #28
 8002876:	7bfa      	ldrb	r2, [r7, #15]
 8002878:	4611      	mov	r1, r2
 800287a:	4618      	mov	r0, r3
 800287c:	f000 f96e 	bl	8002b5c <lis2mdl_data_rate_set>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <LIS2MDL_MAG_SetOutputDataRate+0x6c>
  {
    return LIS2MDL_ERROR;
 8002886:	f04f 33ff 	mov.w	r3, #4294967295
 800288a:	e000      	b.n	800288e <LIS2MDL_MAG_SetOutputDataRate+0x6e>
  }

  return LIS2MDL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	42480000 	.word	0x42480000

0800289c <LIS2MDL_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2232      	movs	r2, #50	; 0x32
 80028aa:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <LIS2MDL_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <LIS2MDL_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b084      	sub	sp, #16
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	6039      	str	r1, [r7, #0]
  axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LIS2MDL_OK)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	331c      	adds	r3, #28
 80028e0:	f107 0208 	add.w	r2, r7, #8
 80028e4:	4611      	mov	r1, r2
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 f9bc 	bl	8002c64 <lis2mdl_magnetic_raw_get>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 80028f2:	f04f 33ff 	mov.w	r3, #4294967295
 80028f6:	e00c      	b.n	8002912 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80028f8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002900:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002908:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <LIS2MDL_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b086      	sub	sp, #24
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
 8002922:	6039      	str	r1, [r7, #0]
  axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LIS2MDL_OK)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	331c      	adds	r3, #28
 8002928:	f107 0210 	add.w	r2, r7, #16
 800292c:	4611      	mov	r1, r2
 800292e:	4618      	mov	r0, r3
 8002930:	f000 f998 	bl	8002c64 <lis2mdl_magnetic_raw_get>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d002      	beq.n	8002940 <LIS2MDL_MAG_GetAxes+0x26>
  {
    return LIS2MDL_ERROR;
 800293a:	f04f 33ff 	mov.w	r3, #4294967295
 800293e:	e036      	b.n	80029ae <LIS2MDL_MAG_GetAxes+0x94>
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8002940:	f107 030c 	add.w	r3, r7, #12
 8002944:	4619      	mov	r1, r3
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff ff14 	bl	8002774 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800294c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002950:	ee07 3a90 	vmov	s15, r3
 8002954:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002958:	edd7 7a03 	vldr	s15, [r7, #12]
 800295c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002960:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002964:	ee17 2a90 	vmov	r2, s15
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800296c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002970:	ee07 3a90 	vmov	s15, r3
 8002974:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002978:	edd7 7a03 	vldr	s15, [r7, #12]
 800297c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002980:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002984:	ee17 2a90 	vmov	r2, s15
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800298c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002990:	ee07 3a90 	vmov	s15, r3
 8002994:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002998:	edd7 7a03 	vldr	s15, [r7, #12]
 800299c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029a4:	ee17 2a90 	vmov	r2, s15
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <LIS2MDL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	460b      	mov	r3, r1
 80029c0:	70fb      	strb	r3, [r7, #3]
 80029c2:	4613      	mov	r3, r2
 80029c4:	70bb      	strb	r3, [r7, #2]
  if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f103 001c 	add.w	r0, r3, #28
 80029cc:	1cba      	adds	r2, r7, #2
 80029ce:	78f9      	ldrb	r1, [r7, #3]
 80029d0:	2301      	movs	r3, #1
 80029d2:	f000 f885 	bl	8002ae0 <lis2mdl_write_reg>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d002      	beq.n	80029e2 <LIS2MDL_Write_Reg+0x2c>
  {
    return LIS2MDL_ERROR;
 80029dc:	f04f 33ff 	mov.w	r3, #4294967295
 80029e0:	e000      	b.n	80029e4 <LIS2MDL_Write_Reg+0x2e>
  }

  return LIS2MDL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80029ec:	b590      	push	{r4, r7, lr}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	607a      	str	r2, [r7, #4]
 80029f6:	461a      	mov	r2, r3
 80029f8:	460b      	mov	r3, r1
 80029fa:	72fb      	strb	r3, [r7, #11]
 80029fc:	4613      	mov	r3, r2
 80029fe:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10e      	bne.n	8002a2a <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	695c      	ldr	r4, [r3, #20]
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	7b1b      	ldrb	r3, [r3, #12]
 8002a14:	b298      	uxth	r0, r3
 8002a16:	7afb      	ldrb	r3, [r7, #11]
 8002a18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	b299      	uxth	r1, r3
 8002a20:	893b      	ldrh	r3, [r7, #8]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	47a0      	blx	r4
 8002a26:	4603      	mov	r3, r0
 8002a28:	e00d      	b.n	8002a46 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	695c      	ldr	r4, [r3, #20]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	7b1b      	ldrb	r3, [r3, #12]
 8002a32:	b298      	uxth	r0, r3
 8002a34:	7afb      	ldrb	r3, [r7, #11]
 8002a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	b299      	uxth	r1, r3
 8002a3e:	893b      	ldrh	r3, [r7, #8]
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	47a0      	blx	r4
 8002a44:	4603      	mov	r3, r0
  }
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	371c      	adds	r7, #28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd90      	pop	{r4, r7, pc}

08002a4e <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002a4e:	b590      	push	{r4, r7, lr}
 8002a50:	b087      	sub	sp, #28
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	607a      	str	r2, [r7, #4]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	72fb      	strb	r3, [r7, #11]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10e      	bne.n	8002a8c <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	691c      	ldr	r4, [r3, #16]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	7b1b      	ldrb	r3, [r3, #12]
 8002a76:	b298      	uxth	r0, r3
 8002a78:	7afb      	ldrb	r3, [r7, #11]
 8002a7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	b299      	uxth	r1, r3
 8002a82:	893b      	ldrh	r3, [r7, #8]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	47a0      	blx	r4
 8002a88:	4603      	mov	r3, r0
 8002a8a:	e00d      	b.n	8002aa8 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	691c      	ldr	r4, [r3, #16]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	7b1b      	ldrb	r3, [r3, #12]
 8002a94:	b298      	uxth	r0, r3
 8002a96:	7afb      	ldrb	r3, [r7, #11]
 8002a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	b299      	uxth	r1, r3
 8002aa0:	893b      	ldrh	r3, [r7, #8]
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	47a0      	blx	r4
 8002aa6:	4603      	mov	r3, r0
  }
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd90      	pop	{r4, r7, pc}

08002ab0 <lis2mdl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_read_reg(lis2mdl_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8002ab0:	b590      	push	{r4, r7, lr}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	607a      	str	r2, [r7, #4]
 8002aba:	461a      	mov	r2, r3
 8002abc:	460b      	mov	r3, r1
 8002abe:	72fb      	strb	r3, [r7, #11]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	685c      	ldr	r4, [r3, #4]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6898      	ldr	r0, [r3, #8]
 8002acc:	893b      	ldrh	r3, [r7, #8]
 8002ace:	7af9      	ldrb	r1, [r7, #11]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	47a0      	blx	r4
 8002ad4:	6178      	str	r0, [r7, #20]
  return ret;
 8002ad6:	697b      	ldr	r3, [r7, #20]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	371c      	adds	r7, #28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd90      	pop	{r4, r7, pc}

08002ae0 <lis2mdl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_write_reg(lis2mdl_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8002ae0:	b590      	push	{r4, r7, lr}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	607a      	str	r2, [r7, #4]
 8002aea:	461a      	mov	r2, r3
 8002aec:	460b      	mov	r3, r1
 8002aee:	72fb      	strb	r3, [r7, #11]
 8002af0:	4613      	mov	r3, r2
 8002af2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681c      	ldr	r4, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6898      	ldr	r0, [r3, #8]
 8002afc:	893b      	ldrh	r3, [r7, #8]
 8002afe:	7af9      	ldrb	r1, [r7, #11]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	47a0      	blx	r4
 8002b04:	6178      	str	r0, [r7, #20]
  return ret;
 8002b06:	697b      	ldr	r3, [r7, #20]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	371c      	adds	r7, #28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd90      	pop	{r4, r7, pc}

08002b10 <lis2mdl_operating_mode_set>:
  * @param  val    change the values of md in reg CFG_REG_A
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(lis2mdl_ctx_t *ctx, lis2mdl_md_t val)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8002b1c:	f107 0208 	add.w	r2, r7, #8
 8002b20:	2301      	movs	r3, #1
 8002b22:	2160      	movs	r1, #96	; 0x60
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff ffc3 	bl	8002ab0 <lis2mdl_read_reg>
 8002b2a:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0){
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10f      	bne.n	8002b52 <lis2mdl_operating_mode_set+0x42>
    reg.md = (uint8_t)val;
 8002b32:	78fb      	ldrb	r3, [r7, #3]
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	7a3b      	ldrb	r3, [r7, #8]
 8002b3c:	f362 0301 	bfi	r3, r2, #0, #2
 8002b40:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8002b42:	f107 0208 	add.w	r2, r7, #8
 8002b46:	2301      	movs	r3, #1
 8002b48:	2160      	movs	r1, #96	; 0x60
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7ff ffc8 	bl	8002ae0 <lis2mdl_write_reg>
 8002b50:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 8002b52:	68fb      	ldr	r3, [r7, #12]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(lis2mdl_ctx_t *ctx, lis2mdl_odr_t val)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8002b68:	f107 0208 	add.w	r2, r7, #8
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	2160      	movs	r1, #96	; 0x60
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff ff9d 	bl	8002ab0 <lis2mdl_read_reg>
 8002b76:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0){
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10f      	bne.n	8002b9e <lis2mdl_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8002b7e:	78fb      	ldrb	r3, [r7, #3]
 8002b80:	f003 0303 	and.w	r3, r3, #3
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	7a3b      	ldrb	r3, [r7, #8]
 8002b88:	f362 0383 	bfi	r3, r2, #2, #2
 8002b8c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8002b8e:	f107 0208 	add.w	r2, r7, #8
 8002b92:	2301      	movs	r3, #1
 8002b94:	2160      	movs	r1, #96	; 0x60
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff ffa2 	bl	8002ae0 <lis2mdl_write_reg>
 8002b9c:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(lis2mdl_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8002bb2:	f107 0208 	add.w	r2, r7, #8
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	2160      	movs	r1, #96	; 0x60
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff ff78 	bl	8002ab0 <lis2mdl_read_reg>
 8002bc0:	60f8      	str	r0, [r7, #12]
  switch (reg.odr){
 8002bc2:	7a3b      	ldrb	r3, [r7, #8]
 8002bc4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d81a      	bhi.n	8002c04 <lis2mdl_data_rate_get+0x5c>
 8002bce:	a201      	add	r2, pc, #4	; (adr r2, 8002bd4 <lis2mdl_data_rate_get+0x2c>)
 8002bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd4:	08002be5 	.word	0x08002be5
 8002bd8:	08002bed 	.word	0x08002bed
 8002bdc:	08002bf5 	.word	0x08002bf5
 8002be0:	08002bfd 	.word	0x08002bfd
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	2200      	movs	r2, #0
 8002be8:	701a      	strb	r2, [r3, #0]
      break;
 8002bea:	e00f      	b.n	8002c0c <lis2mdl_data_rate_get+0x64>
    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	701a      	strb	r2, [r3, #0]
      break;
 8002bf2:	e00b      	b.n	8002c0c <lis2mdl_data_rate_get+0x64>
    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	701a      	strb	r2, [r3, #0]
      break;
 8002bfa:	e007      	b.n	8002c0c <lis2mdl_data_rate_get+0x64>
    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	2203      	movs	r2, #3
 8002c00:	701a      	strb	r2, [r3, #0]
      break;
 8002c02:	e003      	b.n	8002c0c <lis2mdl_data_rate_get+0x64>
    default:
      *val = LIS2MDL_ODR_10Hz;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	2200      	movs	r2, #0
 8002c08:	701a      	strb	r2, [r3, #0]
      break;
 8002c0a:	bf00      	nop
  }
  return ret;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop

08002c18 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(lis2mdl_ctx_t *ctx, uint8_t val)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8002c24:	f107 0208 	add.w	r2, r7, #8
 8002c28:	2301      	movs	r3, #1
 8002c2a:	2162      	movs	r1, #98	; 0x62
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff ff3f 	bl	8002ab0 <lis2mdl_read_reg>
 8002c32:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0){
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10f      	bne.n	8002c5a <lis2mdl_block_data_update_set+0x42>
    reg.bdu = val;
 8002c3a:	78fb      	ldrb	r3, [r7, #3]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	7a3b      	ldrb	r3, [r7, #8]
 8002c44:	f362 1304 	bfi	r3, r2, #4, #1
 8002c48:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8002c4a:	f107 0208 	add.w	r2, r7, #8
 8002c4e:	2301      	movs	r3, #1
 8002c50:	2162      	movs	r1, #98	; 0x62
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7ff ff44 	bl	8002ae0 <lis2mdl_write_reg>
 8002c58:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(lis2mdl_ctx_t *ctx, uint8_t *buff)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8002c6e:	2306      	movs	r3, #6
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	2168      	movs	r1, #104	; 0x68
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff ff1b 	bl	8002ab0 <lis2mdl_read_reg>
 8002c7a:	60f8      	str	r0, [r7, #12]
  return ret;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(lis2mdl_ctx_t *ctx, uint8_t *buff)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b084      	sub	sp, #16
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8002c90:	2301      	movs	r3, #1
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	214f      	movs	r1, #79	; 0x4f
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7ff ff0a 	bl	8002ab0 <lis2mdl_read_reg>
 8002c9c:	60f8      	str	r0, [r7, #12]
  return ret;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(lis2mdl_ctx_t *ctx, uint8_t val)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8002cb4:	f107 0208 	add.w	r2, r7, #8
 8002cb8:	2301      	movs	r3, #1
 8002cba:	2162      	movs	r1, #98	; 0x62
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7ff fef7 	bl	8002ab0 <lis2mdl_read_reg>
 8002cc2:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0){
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10f      	bne.n	8002cea <lis2mdl_self_test_set+0x42>
    reg.self_test = val;
 8002cca:	78fb      	ldrb	r3, [r7, #3]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	7a3b      	ldrb	r3, [r7, #8]
 8002cd4:	f362 0341 	bfi	r3, r2, #1, #1
 8002cd8:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8002cda:	f107 0208 	add.w	r2, r7, #8
 8002cde:	2301      	movs	r3, #1
 8002ce0:	2162      	movs	r1, #98	; 0x62
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7ff fefc 	bl	8002ae0 <lis2mdl_write_reg>
 8002ce8:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 8002cea:	68fb      	ldr	r3, [r7, #12]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <lis2mdl_i2c_interface_set>:
  * @param  val   change the values of i2c_dis in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(lis2mdl_ctx_t *ctx, lis2mdl_i2c_dis_t val)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8002d00:	f107 0208 	add.w	r2, r7, #8
 8002d04:	2301      	movs	r3, #1
 8002d06:	2162      	movs	r1, #98	; 0x62
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff fed1 	bl	8002ab0 <lis2mdl_read_reg>
 8002d0e:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0){
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10f      	bne.n	8002d36 <lis2mdl_i2c_interface_set+0x42>
    reg.i2c_dis = (uint8_t)val;
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	7a3b      	ldrb	r3, [r7, #8]
 8002d20:	f362 1345 	bfi	r3, r2, #5, #1
 8002d24:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8002d26:	f107 0208 	add.w	r2, r7, #8
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	2162      	movs	r1, #98	; 0x62
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7ff fed6 	bl	8002ae0 <lis2mdl_write_reg>
 8002d34:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 8002d36:	68fb      	ldr	r3, [r7, #12]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <LSM6DSO_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d103      	bne.n	8002d5c <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8002d54:	f04f 33ff 	mov.w	r3, #4294967295
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	e04d      	b.n	8002df8 <LSM6DSO_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	7b1a      	ldrb	r2, [r3, #12]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	695a      	ldr	r2, [r3, #20]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	699a      	ldr	r2, [r3, #24]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a1b      	ldr	r2, [pc, #108]	; (8002e04 <LSM6DSO_RegisterBusIO+0xc4>)
 8002d98:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a1a      	ldr	r2, [pc, #104]	; (8002e08 <LSM6DSO_RegisterBusIO+0xc8>)
 8002d9e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d103      	bne.n	8002db6 <LSM6DSO_RegisterBusIO+0x76>
    {
      ret = LSM6DSO_ERROR;
 8002dae:	f04f 33ff 	mov.w	r3, #4294967295
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	e020      	b.n	8002df8 <LSM6DSO_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4798      	blx	r3
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <LSM6DSO_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO_ERROR;
 8002dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	e016      	b.n	8002df8 <LSM6DSO_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d112      	bne.n	8002df8 <LSM6DSO_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10d      	bne.n	8002df8 <LSM6DSO_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8002ddc:	230c      	movs	r3, #12
 8002dde:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8002de0:	7afb      	ldrb	r3, [r7, #11]
 8002de2:	461a      	mov	r2, r3
 8002de4:	2112      	movs	r1, #18
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fd2d 	bl	8003846 <LSM6DSO_Write_Reg>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <LSM6DSO_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO_ERROR;
 8002df2:	f04f 33ff 	mov.w	r3, #4294967295
 8002df6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002df8:	68fb      	ldr	r3, [r7, #12]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	08003cb5 	.word	0x08003cb5
 8002e08:	08003ceb 	.word	0x08003ceb

08002e0c <LSM6DSO_Init>:
 * @brief  Initialize the LSM6DSO sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	331c      	adds	r3, #28
 8002e18:	2101      	movs	r1, #1
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f001 f9e5 	bl	80041ea <lsm6dso_auto_increment_set>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 8002e26:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2a:	e054      	b.n	8002ed6 <LSM6DSO_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	331c      	adds	r3, #28
 8002e30:	2101      	movs	r1, #1
 8002e32:	4618      	mov	r0, r3
 8002e34:	f001 f980 	bl	8004138 <lsm6dso_block_data_update_set>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 8002e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e42:	e048      	b.n	8002ed6 <LSM6DSO_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	331c      	adds	r3, #28
 8002e48:	2100      	movs	r1, #0
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f001 f9f3 	bl	8004236 <lsm6dso_fifo_mode_set>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 8002e56:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5a:	e03c      	b.n	8002ed6 <LSM6DSO_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2204      	movs	r2, #4
 8002e60:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	331c      	adds	r3, #28
 8002e68:	2100      	movs	r1, #0
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 ffe6 	bl	8003e3c <lsm6dso_xl_data_rate_set>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <LSM6DSO_Init+0x70>
  {
    return LSM6DSO_ERROR;
 8002e76:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7a:	e02c      	b.n	8002ed6 <LSM6DSO_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	331c      	adds	r3, #28
 8002e80:	2100      	movs	r1, #0
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 ff7c 	bl	8003d80 <lsm6dso_xl_full_scale_set>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d002      	beq.n	8002e94 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 8002e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e92:	e020      	b.n	8002ed6 <LSM6DSO_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2204      	movs	r2, #4
 8002e98:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	331c      	adds	r3, #28
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f001 f8c0 	bl	8004028 <lsm6dso_gy_data_rate_set>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <LSM6DSO_Init+0xa8>
  {
    return LSM6DSO_ERROR;
 8002eae:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb2:	e010      	b.n	8002ed6 <LSM6DSO_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	331c      	adds	r3, #28
 8002eb8:	2106      	movs	r1, #6
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f001 f84c 	bl	8003f58 <lsm6dso_gy_full_scale_set>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 8002ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eca:	e004      	b.n	8002ed6 <LSM6DSO_Init+0xca>
  }

  pObj->is_initialized = 1;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <LSM6DSO_DeInit>:
 * @brief  Deinitialize the LSM6DSO sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f888 	bl	8002ffc <LSM6DSO_ACC_Disable>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d002      	beq.n	8002ef8 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8002ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef6:	e015      	b.n	8002f24 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fa9a 	bl	8003432 <LSM6DSO_GYRO_Disable>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8002f04:	f04f 33ff 	mov.w	r3, #4294967295
 8002f08:	e00c      	b.n	8002f24 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <LSM6DSO_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	331c      	adds	r3, #28
 8002f3a:	6839      	ldr	r1, [r7, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f001 f943 	bl	80041c8 <lsm6dso_device_id_get>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8002f48:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4c:	e000      	b.n	8002f50 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <LSM6DSO_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSO sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2201      	movs	r2, #1
 8002f66:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2200      	movs	r2, #0
 8002f72:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2200      	movs	r2, #0
 8002f78:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002f80:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2210      	movs	r2, #16
 8002f86:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	4a07      	ldr	r2, [pc, #28]	; (8002fb0 <LSM6DSO_GetCapabilities+0x58>)
 8002f92:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	4a06      	ldr	r2, [pc, #24]	; (8002fb0 <LSM6DSO_GetCapabilities+0x58>)
 8002f98:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	45d02000 	.word	0x45d02000

08002fb4 <LSM6DSO_ACC_Enable>:
 * @brief  Enable the LSM6DSO accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	e014      	b.n	8002ff4 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f103 021c 	add.w	r2, r3, #28
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4610      	mov	r0, r2
 8002fda:	f000 ff2f 	bl	8003e3c <lsm6dso_xl_data_rate_set>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8002fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe8:	e004      	b.n	8002ff4 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <LSM6DSO_ACC_Disable>:
 * @brief  Disable the LSM6DSO accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	e01f      	b.n	8003052 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f103 021c 	add.w	r2, r3, #28
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	332b      	adds	r3, #43	; 0x2b
 800301c:	4619      	mov	r1, r3
 800301e:	4610      	mov	r0, r2
 8003020:	f000 ff32 	bl	8003e88 <lsm6dso_xl_data_rate_get>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d002      	beq.n	8003030 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 800302a:	f04f 33ff 	mov.w	r3, #4294967295
 800302e:	e010      	b.n	8003052 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	331c      	adds	r3, #28
 8003034:	2100      	movs	r1, #0
 8003036:	4618      	mov	r0, r3
 8003038:	f000 ff00 	bl	8003e3c <lsm6dso_xl_data_rate_set>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8003042:	f04f 33ff 	mov.w	r3, #4294967295
 8003046:	e004      	b.n	8003052 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
	...

0800305c <LSM6DSO_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float *Sensitivity)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	331c      	adds	r3, #28
 800306e:	f107 020b 	add.w	r2, r7, #11
 8003072:	4611      	mov	r1, r2
 8003074:	4618      	mov	r0, r3
 8003076:	f000 fea9 	bl	8003dcc <lsm6dso_xl_full_scale_get>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8003080:	f04f 33ff 	mov.w	r3, #4294967295
 8003084:	e023      	b.n	80030ce <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8003086:	7afb      	ldrb	r3, [r7, #11]
 8003088:	2b03      	cmp	r3, #3
 800308a:	d81b      	bhi.n	80030c4 <LSM6DSO_ACC_GetSensitivity+0x68>
 800308c:	a201      	add	r2, pc, #4	; (adr r2, 8003094 <LSM6DSO_ACC_GetSensitivity+0x38>)
 800308e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003092:	bf00      	nop
 8003094:	080030a5 	.word	0x080030a5
 8003098:	080030bd 	.word	0x080030bd
 800309c:	080030ad 	.word	0x080030ad
 80030a0:	080030b5 	.word	0x080030b5
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	4a0c      	ldr	r2, [pc, #48]	; (80030d8 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 80030a8:	601a      	str	r2, [r3, #0]
      break;
 80030aa:	e00f      	b.n	80030cc <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	4a0b      	ldr	r2, [pc, #44]	; (80030dc <LSM6DSO_ACC_GetSensitivity+0x80>)
 80030b0:	601a      	str	r2, [r3, #0]
      break;
 80030b2:	e00b      	b.n	80030cc <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	4a0a      	ldr	r2, [pc, #40]	; (80030e0 <LSM6DSO_ACC_GetSensitivity+0x84>)
 80030b8:	601a      	str	r2, [r3, #0]
      break;
 80030ba:	e007      	b.n	80030cc <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	4a09      	ldr	r2, [pc, #36]	; (80030e4 <LSM6DSO_ACC_GetSensitivity+0x88>)
 80030c0:	601a      	str	r2, [r3, #0]
      break;
 80030c2:	e003      	b.n	80030cc <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80030c4:	f04f 33ff 	mov.w	r3, #4294967295
 80030c8:	60fb      	str	r3, [r7, #12]
      break;
 80030ca:	bf00      	nop
  }

  return ret;
 80030cc:	68fb      	ldr	r3, [r7, #12]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	3d79db23 	.word	0x3d79db23
 80030dc:	3df9db23 	.word	0x3df9db23
 80030e0:	3e79db23 	.word	0x3e79db23
 80030e4:	3ef9db23 	.word	0x3ef9db23

080030e8 <LSM6DSO_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float *Odr)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	331c      	adds	r3, #28
 80030fa:	f107 020b 	add.w	r2, r7, #11
 80030fe:	4611      	mov	r1, r2
 8003100:	4618      	mov	r0, r3
 8003102:	f000 fec1 	bl	8003e88 <lsm6dso_xl_data_rate_get>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 800310c:	f04f 33ff 	mov.w	r3, #4294967295
 8003110:	e054      	b.n	80031bc <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8003112:	7afb      	ldrb	r3, [r7, #11]
 8003114:	2b0b      	cmp	r3, #11
 8003116:	d84c      	bhi.n	80031b2 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8003118:	a201      	add	r2, pc, #4	; (adr r2, 8003120 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 800311a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311e:	bf00      	nop
 8003120:	08003151 	.word	0x08003151
 8003124:	08003163 	.word	0x08003163
 8003128:	0800316b 	.word	0x0800316b
 800312c:	08003173 	.word	0x08003173
 8003130:	0800317b 	.word	0x0800317b
 8003134:	08003183 	.word	0x08003183
 8003138:	0800318b 	.word	0x0800318b
 800313c:	08003193 	.word	0x08003193
 8003140:	0800319b 	.word	0x0800319b
 8003144:	080031a3 	.word	0x080031a3
 8003148:	080031ab 	.word	0x080031ab
 800314c:	0800315b 	.word	0x0800315b
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
      break;
 8003158:	e02f      	b.n	80031ba <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6Hz5:
      *Odr = 6.5f;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	4a19      	ldr	r2, [pc, #100]	; (80031c4 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 800315e:	601a      	str	r2, [r3, #0]
      break;
 8003160:	e02b      	b.n	80031ba <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	4a18      	ldr	r2, [pc, #96]	; (80031c8 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8003166:	601a      	str	r2, [r3, #0]
      break;
 8003168:	e027      	b.n	80031ba <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	4a17      	ldr	r2, [pc, #92]	; (80031cc <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 800316e:	601a      	str	r2, [r3, #0]
      break;
 8003170:	e023      	b.n	80031ba <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	4a16      	ldr	r2, [pc, #88]	; (80031d0 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8003176:	601a      	str	r2, [r3, #0]
      break;
 8003178:	e01f      	b.n	80031ba <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	4a15      	ldr	r2, [pc, #84]	; (80031d4 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 800317e:	601a      	str	r2, [r3, #0]
      break;
 8003180:	e01b      	b.n	80031ba <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	4a14      	ldr	r2, [pc, #80]	; (80031d8 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8003186:	601a      	str	r2, [r3, #0]
      break;
 8003188:	e017      	b.n	80031ba <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	4a13      	ldr	r2, [pc, #76]	; (80031dc <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 800318e:	601a      	str	r2, [r3, #0]
      break;
 8003190:	e013      	b.n	80031ba <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	4a12      	ldr	r2, [pc, #72]	; (80031e0 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8003196:	601a      	str	r2, [r3, #0]
      break;
 8003198:	e00f      	b.n	80031ba <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	4a11      	ldr	r2, [pc, #68]	; (80031e4 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 800319e:	601a      	str	r2, [r3, #0]
      break;
 80031a0:	e00b      	b.n	80031ba <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	4a10      	ldr	r2, [pc, #64]	; (80031e8 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 80031a6:	601a      	str	r2, [r3, #0]
      break;
 80031a8:	e007      	b.n	80031ba <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	4a0f      	ldr	r2, [pc, #60]	; (80031ec <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 80031ae:	601a      	str	r2, [r3, #0]
      break;
 80031b0:	e003      	b.n	80031ba <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 80031b2:	f04f 33ff 	mov.w	r3, #4294967295
 80031b6:	60fb      	str	r3, [r7, #12]
      break;
 80031b8:	bf00      	nop
  }

  return ret;
 80031ba:	68fb      	ldr	r3, [r7, #12]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40d00000 	.word	0x40d00000
 80031c8:	41480000 	.word	0x41480000
 80031cc:	41d00000 	.word	0x41d00000
 80031d0:	42500000 	.word	0x42500000
 80031d4:	42d00000 	.word	0x42d00000
 80031d8:	43500000 	.word	0x43500000
 80031dc:	43d08000 	.word	0x43d08000
 80031e0:	44504000 	.word	0x44504000
 80031e4:	44d06000 	.word	0x44d06000
 80031e8:	45505000 	.word	0x45505000
 80031ec:	45d05800 	.word	0x45d05800

080031f0 <LSM6DSO_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float Odr)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003202:	2b01      	cmp	r3, #1
 8003204:	d106      	bne.n	8003214 <LSM6DSO_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003206:	ed97 0a00 	vldr	s0, [r7]
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 fb36 	bl	800387c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8003210:	4603      	mov	r3, r0
 8003212:	e005      	b.n	8003220 <LSM6DSO_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003214:	ed97 0a00 	vldr	s0, [r7]
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 fbbb 	bl	8003994 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 800321e:	4603      	mov	r3, r0
  }
}
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <LSM6DSO_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	331c      	adds	r3, #28
 800323a:	f107 020b 	add.w	r2, r7, #11
 800323e:	4611      	mov	r1, r2
 8003240:	4618      	mov	r0, r3
 8003242:	f000 fdc3 	bl	8003dcc <lsm6dso_xl_full_scale_get>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 800324c:	f04f 33ff 	mov.w	r3, #4294967295
 8003250:	e023      	b.n	800329a <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8003252:	7afb      	ldrb	r3, [r7, #11]
 8003254:	2b03      	cmp	r3, #3
 8003256:	d81b      	bhi.n	8003290 <LSM6DSO_ACC_GetFullScale+0x68>
 8003258:	a201      	add	r2, pc, #4	; (adr r2, 8003260 <LSM6DSO_ACC_GetFullScale+0x38>)
 800325a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325e:	bf00      	nop
 8003260:	08003271 	.word	0x08003271
 8003264:	08003289 	.word	0x08003289
 8003268:	08003279 	.word	0x08003279
 800326c:	08003281 	.word	0x08003281
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	2202      	movs	r2, #2
 8003274:	601a      	str	r2, [r3, #0]
      break;
 8003276:	e00f      	b.n	8003298 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	2204      	movs	r2, #4
 800327c:	601a      	str	r2, [r3, #0]
      break;
 800327e:	e00b      	b.n	8003298 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	2208      	movs	r2, #8
 8003284:	601a      	str	r2, [r3, #0]
      break;
 8003286:	e007      	b.n	8003298 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	2210      	movs	r2, #16
 800328c:	601a      	str	r2, [r3, #0]
      break;
 800328e:	e003      	b.n	8003298 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8003290:	f04f 33ff 	mov.w	r3, #4294967295
 8003294:	60fb      	str	r3, [r7, #12]
      break;
 8003296:	bf00      	nop
  }

  return ret;
 8003298:	68fb      	ldr	r3, [r7, #12]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop

080032a4 <LSM6DSO_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	dd0b      	ble.n	80032cc <LSM6DSO_ACC_SetFullScale+0x28>
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	dd06      	ble.n	80032c8 <LSM6DSO_ACC_SetFullScale+0x24>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b08      	cmp	r3, #8
 80032be:	dc01      	bgt.n	80032c4 <LSM6DSO_ACC_SetFullScale+0x20>
 80032c0:	2303      	movs	r3, #3
 80032c2:	e004      	b.n	80032ce <LSM6DSO_ACC_SetFullScale+0x2a>
 80032c4:	2301      	movs	r3, #1
 80032c6:	e002      	b.n	80032ce <LSM6DSO_ACC_SetFullScale+0x2a>
 80032c8:	2302      	movs	r3, #2
 80032ca:	e000      	b.n	80032ce <LSM6DSO_ACC_SetFullScale+0x2a>
 80032cc:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 80032ce:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	331c      	adds	r3, #28
 80032d4:	7bfa      	ldrb	r2, [r7, #15]
 80032d6:	4611      	mov	r1, r2
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 fd51 	bl	8003d80 <lsm6dso_xl_full_scale_set>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 80032e4:	f04f 33ff 	mov.w	r3, #4294967295
 80032e8:	e000      	b.n	80032ec <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <LSM6DSO_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	331c      	adds	r3, #28
 8003302:	f107 0208 	add.w	r2, r7, #8
 8003306:	4611      	mov	r1, r2
 8003308:	4618      	mov	r0, r3
 800330a:	f000 ff4c 	bl	80041a6 <lsm6dso_acceleration_raw_get>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8003314:	f04f 33ff 	mov.w	r3, #4294967295
 8003318:	e00c      	b.n	8003334 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800331a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003322:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800332a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <LSM6DSO_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	331c      	adds	r3, #28
 8003350:	f107 0210 	add.w	r2, r7, #16
 8003354:	4611      	mov	r1, r2
 8003356:	4618      	mov	r0, r3
 8003358:	f000 ff25 	bl	80041a6 <lsm6dso_acceleration_raw_get>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8003362:	f04f 33ff 	mov.w	r3, #4294967295
 8003366:	e03c      	b.n	80033e2 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8003368:	f107 030c 	add.w	r3, r7, #12
 800336c:	4619      	mov	r1, r3
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7ff fe74 	bl	800305c <LSM6DSO_ACC_GetSensitivity>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d002      	beq.n	8003380 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 800337a:	f04f 33ff 	mov.w	r3, #4294967295
 800337e:	e030      	b.n	80033e2 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003380:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003384:	ee07 3a90 	vmov	s15, r3
 8003388:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800338c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003394:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003398:	ee17 2a90 	vmov	r2, s15
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80033a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80033a4:	ee07 3a90 	vmov	s15, r3
 80033a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80033b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033b8:	ee17 2a90 	vmov	r2, s15
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80033c0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80033c4:	ee07 3a90 	vmov	s15, r3
 80033c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80033d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033d8:	ee17 2a90 	vmov	r2, s15
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <LSM6DSO_GYRO_Enable>:
 * @brief  Enable the LSM6DSO gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	e014      	b.n	800342a <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f103 021c 	add.w	r2, r3, #28
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800340c:	4619      	mov	r1, r3
 800340e:	4610      	mov	r0, r2
 8003410:	f000 fe0a 	bl	8004028 <lsm6dso_gy_data_rate_set>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 800341a:	f04f 33ff 	mov.w	r3, #4294967295
 800341e:	e004      	b.n	800342a <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <LSM6DSO_GYRO_Disable>:
 * @brief  Disable the LSM6DSO gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8003444:	2300      	movs	r3, #0
 8003446:	e01f      	b.n	8003488 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f103 021c 	add.w	r2, r3, #28
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	332c      	adds	r3, #44	; 0x2c
 8003452:	4619      	mov	r1, r3
 8003454:	4610      	mov	r0, r2
 8003456:	f000 fe0d 	bl	8004074 <lsm6dso_gy_data_rate_get>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8003460:	f04f 33ff 	mov.w	r3, #4294967295
 8003464:	e010      	b.n	8003488 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	331c      	adds	r3, #28
 800346a:	2100      	movs	r1, #0
 800346c:	4618      	mov	r0, r3
 800346e:	f000 fddb 	bl	8004028 <lsm6dso_gy_data_rate_set>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8003478:	f04f 33ff 	mov.w	r3, #4294967295
 800347c:	e004      	b.n	8003488 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <LSM6DSO_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float *Sensitivity)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	331c      	adds	r3, #28
 80034a2:	f107 020b 	add.w	r2, r7, #11
 80034a6:	4611      	mov	r1, r2
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 fd7b 	bl	8003fa4 <lsm6dso_gy_full_scale_get>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80034b4:	f04f 33ff 	mov.w	r3, #4294967295
 80034b8:	e02d      	b.n	8003516 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80034ba:	7afb      	ldrb	r3, [r7, #11]
 80034bc:	2b06      	cmp	r3, #6
 80034be:	d825      	bhi.n	800350c <LSM6DSO_GYRO_GetSensitivity+0x7c>
 80034c0:	a201      	add	r2, pc, #4	; (adr r2, 80034c8 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 80034c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c6:	bf00      	nop
 80034c8:	080034ed 	.word	0x080034ed
 80034cc:	080034e5 	.word	0x080034e5
 80034d0:	080034f5 	.word	0x080034f5
 80034d4:	0800350d 	.word	0x0800350d
 80034d8:	080034fd 	.word	0x080034fd
 80034dc:	0800350d 	.word	0x0800350d
 80034e0:	08003505 	.word	0x08003505
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	4a0e      	ldr	r2, [pc, #56]	; (8003520 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 80034e8:	601a      	str	r2, [r3, #0]
      break;
 80034ea:	e013      	b.n	8003514 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	4a0d      	ldr	r2, [pc, #52]	; (8003524 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 80034f0:	601a      	str	r2, [r3, #0]
      break;
 80034f2:	e00f      	b.n	8003514 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	4a0c      	ldr	r2, [pc, #48]	; (8003528 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 80034f8:	601a      	str	r2, [r3, #0]
      break;
 80034fa:	e00b      	b.n	8003514 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	4a0b      	ldr	r2, [pc, #44]	; (800352c <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8003500:	601a      	str	r2, [r3, #0]
      break;
 8003502:	e007      	b.n	8003514 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	4a0a      	ldr	r2, [pc, #40]	; (8003530 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8003508:	601a      	str	r2, [r3, #0]
      break;
 800350a:	e003      	b.n	8003514 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 800350c:	f04f 33ff 	mov.w	r3, #4294967295
 8003510:	60fb      	str	r3, [r7, #12]
      break;
 8003512:	bf00      	nop
  }

  return ret;
 8003514:	68fb      	ldr	r3, [r7, #12]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	408c0000 	.word	0x408c0000
 8003524:	410c0000 	.word	0x410c0000
 8003528:	418c0000 	.word	0x418c0000
 800352c:	420c0000 	.word	0x420c0000
 8003530:	428c0000 	.word	0x428c0000

08003534 <LSM6DSO_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float *Odr)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	331c      	adds	r3, #28
 8003546:	f107 020b 	add.w	r2, r7, #11
 800354a:	4611      	mov	r1, r2
 800354c:	4618      	mov	r0, r3
 800354e:	f000 fd91 	bl	8004074 <lsm6dso_gy_data_rate_get>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d002      	beq.n	800355e <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8003558:	f04f 33ff 	mov.w	r3, #4294967295
 800355c:	e04e      	b.n	80035fc <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 800355e:	7afb      	ldrb	r3, [r7, #11]
 8003560:	2b0a      	cmp	r3, #10
 8003562:	d846      	bhi.n	80035f2 <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8003564:	a201      	add	r2, pc, #4	; (adr r2, 800356c <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8003566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356a:	bf00      	nop
 800356c:	08003599 	.word	0x08003599
 8003570:	080035a3 	.word	0x080035a3
 8003574:	080035ab 	.word	0x080035ab
 8003578:	080035b3 	.word	0x080035b3
 800357c:	080035bb 	.word	0x080035bb
 8003580:	080035c3 	.word	0x080035c3
 8003584:	080035cb 	.word	0x080035cb
 8003588:	080035d3 	.word	0x080035d3
 800358c:	080035db 	.word	0x080035db
 8003590:	080035e3 	.word	0x080035e3
 8003594:	080035eb 	.word	0x080035eb
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	601a      	str	r2, [r3, #0]
      break;
 80035a0:	e02b      	b.n	80035fa <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	4a17      	ldr	r2, [pc, #92]	; (8003604 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 80035a6:	601a      	str	r2, [r3, #0]
      break;
 80035a8:	e027      	b.n	80035fa <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	4a16      	ldr	r2, [pc, #88]	; (8003608 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 80035ae:	601a      	str	r2, [r3, #0]
      break;
 80035b0:	e023      	b.n	80035fa <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	4a15      	ldr	r2, [pc, #84]	; (800360c <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 80035b6:	601a      	str	r2, [r3, #0]
      break;
 80035b8:	e01f      	b.n	80035fa <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	4a14      	ldr	r2, [pc, #80]	; (8003610 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 80035be:	601a      	str	r2, [r3, #0]
      break;
 80035c0:	e01b      	b.n	80035fa <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	4a13      	ldr	r2, [pc, #76]	; (8003614 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 80035c6:	601a      	str	r2, [r3, #0]
      break;
 80035c8:	e017      	b.n	80035fa <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	4a12      	ldr	r2, [pc, #72]	; (8003618 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 80035ce:	601a      	str	r2, [r3, #0]
      break;
 80035d0:	e013      	b.n	80035fa <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	4a11      	ldr	r2, [pc, #68]	; (800361c <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 80035d6:	601a      	str	r2, [r3, #0]
      break;
 80035d8:	e00f      	b.n	80035fa <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr =  1667.0f;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	4a10      	ldr	r2, [pc, #64]	; (8003620 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 80035de:	601a      	str	r2, [r3, #0]
      break;
 80035e0:	e00b      	b.n	80035fa <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr =  3333.0f;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	4a0f      	ldr	r2, [pc, #60]	; (8003624 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 80035e6:	601a      	str	r2, [r3, #0]
      break;
 80035e8:	e007      	b.n	80035fa <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	4a0e      	ldr	r2, [pc, #56]	; (8003628 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 80035ee:	601a      	str	r2, [r3, #0]
      break;
 80035f0:	e003      	b.n	80035fa <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 80035f2:	f04f 33ff 	mov.w	r3, #4294967295
 80035f6:	60fb      	str	r3, [r7, #12]
      break;
 80035f8:	bf00      	nop
  }

  return ret;
 80035fa:	68fb      	ldr	r3, [r7, #12]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	41480000 	.word	0x41480000
 8003608:	41d00000 	.word	0x41d00000
 800360c:	42500000 	.word	0x42500000
 8003610:	42d00000 	.word	0x42d00000
 8003614:	43500000 	.word	0x43500000
 8003618:	43d08000 	.word	0x43d08000
 800361c:	44504000 	.word	0x44504000
 8003620:	44d06000 	.word	0x44d06000
 8003624:	45505000 	.word	0x45505000
 8003628:	45d05800 	.word	0x45d05800

0800362c <LSM6DSO_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float Odr)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800363e:	2b01      	cmp	r3, #1
 8003640:	d106      	bne.n	8003650 <LSM6DSO_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003642:	ed97 0a00 	vldr	s0, [r7]
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fa26 	bl	8003a98 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 800364c:	4603      	mov	r3, r0
 800364e:	e005      	b.n	800365c <LSM6DSO_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003650:	ed97 0a00 	vldr	s0, [r7]
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 faab 	bl	8003bb0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 800365a:	4603      	mov	r3, r0
  }
}
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <LSM6DSO_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	331c      	adds	r3, #28
 8003676:	f107 020b 	add.w	r2, r7, #11
 800367a:	4611      	mov	r1, r2
 800367c:	4618      	mov	r0, r3
 800367e:	f000 fc91 	bl	8003fa4 <lsm6dso_gy_full_scale_get>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8003688:	f04f 33ff 	mov.w	r3, #4294967295
 800368c:	e030      	b.n	80036f0 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 800368e:	7afb      	ldrb	r3, [r7, #11]
 8003690:	2b06      	cmp	r3, #6
 8003692:	d828      	bhi.n	80036e6 <LSM6DSO_GYRO_GetFullScale+0x82>
 8003694:	a201      	add	r2, pc, #4	; (adr r2, 800369c <LSM6DSO_GYRO_GetFullScale+0x38>)
 8003696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369a:	bf00      	nop
 800369c:	080036c1 	.word	0x080036c1
 80036a0:	080036b9 	.word	0x080036b9
 80036a4:	080036c9 	.word	0x080036c9
 80036a8:	080036e7 	.word	0x080036e7
 80036ac:	080036d3 	.word	0x080036d3
 80036b0:	080036e7 	.word	0x080036e7
 80036b4:	080036dd 	.word	0x080036dd
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	227d      	movs	r2, #125	; 0x7d
 80036bc:	601a      	str	r2, [r3, #0]
      break;
 80036be:	e016      	b.n	80036ee <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	22fa      	movs	r2, #250	; 0xfa
 80036c4:	601a      	str	r2, [r3, #0]
      break;
 80036c6:	e012      	b.n	80036ee <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80036ce:	601a      	str	r2, [r3, #0]
      break;
 80036d0:	e00d      	b.n	80036ee <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036d8:	601a      	str	r2, [r3, #0]
      break;
 80036da:	e008      	b.n	80036ee <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80036e2:	601a      	str	r2, [r3, #0]
      break;
 80036e4:	e003      	b.n	80036ee <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 80036e6:	f04f 33ff 	mov.w	r3, #4294967295
 80036ea:	60fb      	str	r3, [r7, #12]
      break;
 80036ec:	bf00      	nop
  }

  return ret;
 80036ee:	68fb      	ldr	r3, [r7, #12]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <LSM6DSO_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b7d      	cmp	r3, #125	; 0x7d
 8003706:	dd12      	ble.n	800372e <LSM6DSO_GYRO_SetFullScale+0x36>
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	2bfa      	cmp	r3, #250	; 0xfa
 800370c:	dd0d      	ble.n	800372a <LSM6DSO_GYRO_SetFullScale+0x32>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003714:	dd07      	ble.n	8003726 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800371c:	dc01      	bgt.n	8003722 <LSM6DSO_GYRO_SetFullScale+0x2a>
 800371e:	2304      	movs	r3, #4
 8003720:	e006      	b.n	8003730 <LSM6DSO_GYRO_SetFullScale+0x38>
 8003722:	2306      	movs	r3, #6
 8003724:	e004      	b.n	8003730 <LSM6DSO_GYRO_SetFullScale+0x38>
 8003726:	2302      	movs	r3, #2
 8003728:	e002      	b.n	8003730 <LSM6DSO_GYRO_SetFullScale+0x38>
 800372a:	2300      	movs	r3, #0
 800372c:	e000      	b.n	8003730 <LSM6DSO_GYRO_SetFullScale+0x38>
 800372e:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8003730:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	331c      	adds	r3, #28
 8003736:	7bfa      	ldrb	r2, [r7, #15]
 8003738:	4611      	mov	r1, r2
 800373a:	4618      	mov	r0, r3
 800373c:	f000 fc0c 	bl	8003f58 <lsm6dso_gy_full_scale_set>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8003746:	f04f 33ff 	mov.w	r3, #4294967295
 800374a:	e000      	b.n	800374e <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <LSM6DSO_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b084      	sub	sp, #16
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	6039      	str	r1, [r7, #0]
  axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	331c      	adds	r3, #28
 8003764:	f107 0208 	add.w	r2, r7, #8
 8003768:	4611      	mov	r1, r2
 800376a:	4618      	mov	r0, r3
 800376c:	f000 fd0a 	bl	8004184 <lsm6dso_angular_rate_raw_get>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8003776:	f04f 33ff 	mov.w	r3, #4294967295
 800377a:	e00c      	b.n	8003796 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800377c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003784:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800378c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <LSM6DSO_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b086      	sub	sp, #24
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
 80037a6:	6039      	str	r1, [r7, #0]
  axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	331c      	adds	r3, #28
 80037ac:	f107 0210 	add.w	r2, r7, #16
 80037b0:	4611      	mov	r1, r2
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 fce6 	bl	8004184 <lsm6dso_angular_rate_raw_get>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 80037be:	f04f 33ff 	mov.w	r3, #4294967295
 80037c2:	e03c      	b.n	800383e <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80037c4:	f107 030c 	add.w	r3, r7, #12
 80037c8:	4619      	mov	r1, r3
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7ff fe60 	bl	8003490 <LSM6DSO_GYRO_GetSensitivity>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d002      	beq.n	80037dc <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 80037d6:	f04f 33ff 	mov.w	r3, #4294967295
 80037da:	e030      	b.n	800383e <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80037dc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80037e0:	ee07 3a90 	vmov	s15, r3
 80037e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80037ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037f4:	ee17 2a90 	vmov	r2, s15
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80037fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003800:	ee07 3a90 	vmov	s15, r3
 8003804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003808:	edd7 7a03 	vldr	s15, [r7, #12]
 800380c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003810:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003814:	ee17 2a90 	vmov	r2, s15
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800381c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003820:	ee07 3a90 	vmov	s15, r3
 8003824:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003828:	edd7 7a03 	vldr	s15, [r7, #12]
 800382c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003830:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003834:	ee17 2a90 	vmov	r2, s15
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <LSM6DSO_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	460b      	mov	r3, r1
 8003850:	70fb      	strb	r3, [r7, #3]
 8003852:	4613      	mov	r3, r2
 8003854:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f103 001c 	add.w	r0, r3, #28
 800385c:	1cba      	adds	r2, r7, #2
 800385e:	78f9      	ldrb	r1, [r7, #3]
 8003860:	2301      	movs	r3, #1
 8003862:	f000 fa75 	bl	8003d50 <lsm6dso_write_reg>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 800386c:	f04f 33ff 	mov.w	r3, #4294967295
 8003870:	e000      	b.n	8003874 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float Odr)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSO_XL_ODR_26Hz
 8003888:	edd7 7a00 	vldr	s15, [r7]
 800388c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003890:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003898:	d801      	bhi.n	800389e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 800389a:	2301      	movs	r3, #1
 800389c:	e058      	b.n	8003950 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800389e:	edd7 7a00 	vldr	s15, [r7]
 80038a2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80038a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ae:	d801      	bhi.n	80038b4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e04d      	b.n	8003950 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80038b4:	edd7 7a00 	vldr	s15, [r7]
 80038b8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003978 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xfc>
 80038bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c4:	d801      	bhi.n	80038ca <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80038c6:	2303      	movs	r3, #3
 80038c8:	e042      	b.n	8003950 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80038ca:	edd7 7a00 	vldr	s15, [r7]
 80038ce:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800397c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x100>
 80038d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038da:	d801      	bhi.n	80038e0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 80038dc:	2304      	movs	r3, #4
 80038de:	e037      	b.n	8003950 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80038e0:	edd7 7a00 	vldr	s15, [r7]
 80038e4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003980 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x104>
 80038e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f0:	d801      	bhi.n	80038f6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80038f2:	2305      	movs	r3, #5
 80038f4:	e02c      	b.n	8003950 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80038f6:	edd7 7a00 	vldr	s15, [r7]
 80038fa:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003984 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
 80038fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003906:	d801      	bhi.n	800390c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8003908:	2306      	movs	r3, #6
 800390a:	e021      	b.n	8003950 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800390c:	edd7 7a00 	vldr	s15, [r7]
 8003910:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003988 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8003914:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800391c:	d801      	bhi.n	8003922 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800391e:	2307      	movs	r3, #7
 8003920:	e016      	b.n	8003950 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003922:	edd7 7a00 	vldr	s15, [r7]
 8003926:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800398c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 800392a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800392e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003932:	d801      	bhi.n	8003938 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8003934:	2308      	movs	r3, #8
 8003936:	e00b      	b.n	8003950 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003938:	edd7 7a00 	vldr	s15, [r7]
 800393c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003990 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8003940:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003948:	d801      	bhi.n	800394e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800394a:	2309      	movs	r3, #9
 800394c:	e000      	b.n	8003950 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800394e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8003950:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
          : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
          :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	331c      	adds	r3, #28
 8003956:	7bfa      	ldrb	r2, [r7, #15]
 8003958:	4611      	mov	r1, r2
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fa6e 	bl	8003e3c <lsm6dso_xl_data_rate_set>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 8003966:	f04f 33ff 	mov.w	r3, #4294967295
 800396a:	e000      	b.n	800396e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	42500000 	.word	0x42500000
 800397c:	42d00000 	.word	0x42d00000
 8003980:	43500000 	.word	0x43500000
 8003984:	43d08000 	.word	0x43d08000
 8003988:	44504000 	.word	0x44504000
 800398c:	44d06000 	.word	0x44d06000
 8003990:	45505000 	.word	0x45505000

08003994 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float Odr)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSO_XL_ODR_26Hz
 80039a0:	edd7 7a00 	vldr	s15, [r7]
 80039a4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80039a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039b0:	d801      	bhi.n	80039b6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e058      	b.n	8003a68 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80039b6:	edd7 7a00 	vldr	s15, [r7]
 80039ba:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80039be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c6:	d801      	bhi.n	80039cc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e04d      	b.n	8003a68 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80039cc:	edd7 7a00 	vldr	s15, [r7]
 80039d0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003a7c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80039d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039dc:	d801      	bhi.n	80039e2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80039de:	2303      	movs	r3, #3
 80039e0:	e042      	b.n	8003a68 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80039e2:	edd7 7a00 	vldr	s15, [r7]
 80039e6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003a80 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xec>
 80039ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f2:	d801      	bhi.n	80039f8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 80039f4:	2304      	movs	r3, #4
 80039f6:	e037      	b.n	8003a68 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80039f8:	edd7 7a00 	vldr	s15, [r7]
 80039fc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003a84 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8003a00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a08:	d801      	bhi.n	8003a0e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8003a0a:	2305      	movs	r3, #5
 8003a0c:	e02c      	b.n	8003a68 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003a0e:	edd7 7a00 	vldr	s15, [r7]
 8003a12:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003a88 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8003a16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a1e:	d801      	bhi.n	8003a24 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8003a20:	2306      	movs	r3, #6
 8003a22:	e021      	b.n	8003a68 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003a24:	edd7 7a00 	vldr	s15, [r7]
 8003a28:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003a8c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8003a2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a34:	d801      	bhi.n	8003a3a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8003a36:	2307      	movs	r3, #7
 8003a38:	e016      	b.n	8003a68 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003a3a:	edd7 7a00 	vldr	s15, [r7]
 8003a3e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003a90 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8003a42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a4a:	d801      	bhi.n	8003a50 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8003a4c:	2308      	movs	r3, #8
 8003a4e:	e00b      	b.n	8003a68 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003a50:	edd7 7a00 	vldr	s15, [r7]
 8003a54:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003a94 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8003a58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a60:	d801      	bhi.n	8003a66 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8003a62:	2309      	movs	r3, #9
 8003a64:	e000      	b.n	8003a68 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003a66:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	42500000 	.word	0x42500000
 8003a80:	42d00000 	.word	0x42d00000
 8003a84:	43500000 	.word	0x43500000
 8003a88:	43d08000 	.word	0x43d08000
 8003a8c:	44504000 	.word	0x44504000
 8003a90:	44d06000 	.word	0x44d06000
 8003a94:	45505000 	.word	0x45505000

08003a98 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float Odr)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8003aa4:	edd7 7a00 	vldr	s15, [r7]
 8003aa8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003aac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab4:	d801      	bhi.n	8003aba <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e058      	b.n	8003b6c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003aba:	edd7 7a00 	vldr	s15, [r7]
 8003abe:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aca:	d801      	bhi.n	8003ad0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e04d      	b.n	8003b6c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003ad0:	edd7 7a00 	vldr	s15, [r7]
 8003ad4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003b94 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8003ad8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae0:	d801      	bhi.n	8003ae6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e042      	b.n	8003b6c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003ae6:	edd7 7a00 	vldr	s15, [r7]
 8003aea:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003b98 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8003aee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af6:	d801      	bhi.n	8003afc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8003af8:	2304      	movs	r3, #4
 8003afa:	e037      	b.n	8003b6c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003afc:	edd7 7a00 	vldr	s15, [r7]
 8003b00:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003b9c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8003b04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b0c:	d801      	bhi.n	8003b12 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8003b0e:	2305      	movs	r3, #5
 8003b10:	e02c      	b.n	8003b6c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003b12:	edd7 7a00 	vldr	s15, [r7]
 8003b16:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003ba0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8003b1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b22:	d801      	bhi.n	8003b28 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8003b24:	2306      	movs	r3, #6
 8003b26:	e021      	b.n	8003b6c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003b28:	edd7 7a00 	vldr	s15, [r7]
 8003b2c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003ba4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8003b30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b38:	d801      	bhi.n	8003b3e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8003b3a:	2307      	movs	r3, #7
 8003b3c:	e016      	b.n	8003b6c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003b3e:	edd7 7a00 	vldr	s15, [r7]
 8003b42:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003ba8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8003b46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b4e:	d801      	bhi.n	8003b54 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8003b50:	2308      	movs	r3, #8
 8003b52:	e00b      	b.n	8003b6c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003b54:	edd7 7a00 	vldr	s15, [r7]
 8003b58:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003bac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8003b5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b64:	d801      	bhi.n	8003b6a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8003b66:	2309      	movs	r3, #9
 8003b68:	e000      	b.n	8003b6c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003b6a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8003b6c:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
          : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
          :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	331c      	adds	r3, #28
 8003b72:	7bfa      	ldrb	r2, [r7, #15]
 8003b74:	4611      	mov	r1, r2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fa56 	bl	8004028 <lsm6dso_gy_data_rate_set>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 8003b82:	f04f 33ff 	mov.w	r3, #4294967295
 8003b86:	e000      	b.n	8003b8a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	42500000 	.word	0x42500000
 8003b98:	42d00000 	.word	0x42d00000
 8003b9c:	43500000 	.word	0x43500000
 8003ba0:	43d08000 	.word	0x43d08000
 8003ba4:	44504000 	.word	0x44504000
 8003ba8:	44d06000 	.word	0x44d06000
 8003bac:	45505000 	.word	0x45505000

08003bb0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float Odr)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8003bbc:	edd7 7a00 	vldr	s15, [r7]
 8003bc0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003bc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bcc:	d801      	bhi.n	8003bd2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e058      	b.n	8003c84 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003bd2:	edd7 7a00 	vldr	s15, [r7]
 8003bd6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003bda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be2:	d801      	bhi.n	8003be8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e04d      	b.n	8003c84 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003be8:	edd7 7a00 	vldr	s15, [r7]
 8003bec:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003c98 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8003bf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bf8:	d801      	bhi.n	8003bfe <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e042      	b.n	8003c84 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003bfe:	edd7 7a00 	vldr	s15, [r7]
 8003c02:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003c9c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8003c06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c0e:	d801      	bhi.n	8003c14 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8003c10:	2304      	movs	r3, #4
 8003c12:	e037      	b.n	8003c84 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003c14:	edd7 7a00 	vldr	s15, [r7]
 8003c18:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003ca0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8003c1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c24:	d801      	bhi.n	8003c2a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8003c26:	2305      	movs	r3, #5
 8003c28:	e02c      	b.n	8003c84 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003c2a:	edd7 7a00 	vldr	s15, [r7]
 8003c2e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003ca4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8003c32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c3a:	d801      	bhi.n	8003c40 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8003c3c:	2306      	movs	r3, #6
 8003c3e:	e021      	b.n	8003c84 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003c40:	edd7 7a00 	vldr	s15, [r7]
 8003c44:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003ca8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8003c48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c50:	d801      	bhi.n	8003c56 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8003c52:	2307      	movs	r3, #7
 8003c54:	e016      	b.n	8003c84 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003c56:	edd7 7a00 	vldr	s15, [r7]
 8003c5a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003cac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8003c5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c66:	d801      	bhi.n	8003c6c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8003c68:	2308      	movs	r3, #8
 8003c6a:	e00b      	b.n	8003c84 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003c6c:	edd7 7a00 	vldr	s15, [r7]
 8003c70:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003cb0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8003c74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7c:	d801      	bhi.n	8003c82 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8003c7e:	2309      	movs	r3, #9
 8003c80:	e000      	b.n	8003c84 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003c82:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                 : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                 : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                 :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	42500000 	.word	0x42500000
 8003c9c:	42d00000 	.word	0x42d00000
 8003ca0:	43500000 	.word	0x43500000
 8003ca4:	43d08000 	.word	0x43d08000
 8003ca8:	44504000 	.word	0x44504000
 8003cac:	44d06000 	.word	0x44d06000
 8003cb0:	45505000 	.word	0x45505000

08003cb4 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003cb4:	b590      	push	{r4, r7, lr}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	607a      	str	r2, [r7, #4]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	72fb      	strb	r3, [r7, #11]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	695c      	ldr	r4, [r3, #20]
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	7b1b      	ldrb	r3, [r3, #12]
 8003cd4:	b298      	uxth	r0, r3
 8003cd6:	7afb      	ldrb	r3, [r7, #11]
 8003cd8:	b299      	uxth	r1, r3
 8003cda:	893b      	ldrh	r3, [r7, #8]
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	47a0      	blx	r4
 8003ce0:	4603      	mov	r3, r0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	371c      	adds	r7, #28
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd90      	pop	{r4, r7, pc}

08003cea <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003cea:	b590      	push	{r4, r7, lr}
 8003cec:	b087      	sub	sp, #28
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	607a      	str	r2, [r7, #4]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	72fb      	strb	r3, [r7, #11]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	691c      	ldr	r4, [r3, #16]
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	7b1b      	ldrb	r3, [r3, #12]
 8003d0a:	b298      	uxth	r0, r3
 8003d0c:	7afb      	ldrb	r3, [r7, #11]
 8003d0e:	b299      	uxth	r1, r3
 8003d10:	893b      	ldrh	r3, [r7, #8]
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	47a0      	blx	r4
 8003d16:	4603      	mov	r3, r0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	371c      	adds	r7, #28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd90      	pop	{r4, r7, pc}

08003d20 <lsm6dso_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_read_reg(lsm6dso_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8003d20:	b590      	push	{r4, r7, lr}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	607a      	str	r2, [r7, #4]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	72fb      	strb	r3, [r7, #11]
 8003d30:	4613      	mov	r3, r2
 8003d32:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	685c      	ldr	r4, [r3, #4]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6898      	ldr	r0, [r3, #8]
 8003d3c:	893b      	ldrh	r3, [r7, #8]
 8003d3e:	7af9      	ldrb	r1, [r7, #11]
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	47a0      	blx	r4
 8003d44:	6178      	str	r0, [r7, #20]
  return ret;
 8003d46:	697b      	ldr	r3, [r7, #20]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	371c      	adds	r7, #28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd90      	pop	{r4, r7, pc}

08003d50 <lsm6dso_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_write_reg(lsm6dso_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8003d50:	b590      	push	{r4, r7, lr}
 8003d52:	b087      	sub	sp, #28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	607a      	str	r2, [r7, #4]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	72fb      	strb	r3, [r7, #11]
 8003d60:	4613      	mov	r3, r2
 8003d62:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681c      	ldr	r4, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6898      	ldr	r0, [r3, #8]
 8003d6c:	893b      	ldrh	r3, [r7, #8]
 8003d6e:	7af9      	ldrb	r1, [r7, #11]
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	47a0      	blx	r4
 8003d74:	6178      	str	r0, [r7, #20]
  return ret;
 8003d76:	697b      	ldr	r3, [r7, #20]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	371c      	adds	r7, #28
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd90      	pop	{r4, r7, pc}

08003d80 <lsm6dso_xl_full_scale_set>:
  * @param  val      change the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_full_scale_set(lsm6dso_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8003d8c:	f107 0208 	add.w	r2, r7, #8
 8003d90:	2301      	movs	r3, #1
 8003d92:	2110      	movs	r1, #16
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7ff ffc3 	bl	8003d20 <lsm6dso_read_reg>
 8003d9a:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10f      	bne.n	8003dc2 <lsm6dso_xl_full_scale_set+0x42>
    reg.fs_xl = (uint8_t) val;
 8003da2:	78fb      	ldrb	r3, [r7, #3]
 8003da4:	f003 0303 	and.w	r3, r3, #3
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	7a3b      	ldrb	r3, [r7, #8]
 8003dac:	f362 0383 	bfi	r3, r2, #2, #2
 8003db0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8003db2:	f107 0208 	add.w	r2, r7, #8
 8003db6:	2301      	movs	r3, #1
 8003db8:	2110      	movs	r1, #16
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7ff ffc8 	bl	8003d50 <lsm6dso_write_reg>
 8003dc0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <lsm6dso_xl_full_scale_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_full_scale_get(lsm6dso_ctx_t *ctx, lsm6dso_fs_xl_t *val)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8003dd6:	f107 0208 	add.w	r2, r7, #8
 8003dda:	2301      	movs	r3, #1
 8003ddc:	2110      	movs	r1, #16
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7ff ff9e 	bl	8003d20 <lsm6dso_read_reg>
 8003de4:	60f8      	str	r0, [r7, #12]
  switch (reg.fs_xl) {
 8003de6:	7a3b      	ldrb	r3, [r7, #8]
 8003de8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b03      	cmp	r3, #3
 8003df0:	d81a      	bhi.n	8003e28 <lsm6dso_xl_full_scale_get+0x5c>
 8003df2:	a201      	add	r2, pc, #4	; (adr r2, 8003df8 <lsm6dso_xl_full_scale_get+0x2c>)
 8003df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df8:	08003e09 	.word	0x08003e09
 8003dfc:	08003e11 	.word	0x08003e11
 8003e00:	08003e19 	.word	0x08003e19
 8003e04:	08003e21 	.word	0x08003e21
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	701a      	strb	r2, [r3, #0]
      break;
 8003e0e:	e00f      	b.n	8003e30 <lsm6dso_xl_full_scale_get+0x64>
    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2201      	movs	r2, #1
 8003e14:	701a      	strb	r2, [r3, #0]
      break;
 8003e16:	e00b      	b.n	8003e30 <lsm6dso_xl_full_scale_get+0x64>
    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	701a      	strb	r2, [r3, #0]
      break;
 8003e1e:	e007      	b.n	8003e30 <lsm6dso_xl_full_scale_get+0x64>
    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2203      	movs	r2, #3
 8003e24:	701a      	strb	r2, [r3, #0]
      break;
 8003e26:	e003      	b.n	8003e30 <lsm6dso_xl_full_scale_get+0x64>
    default:
      *val = LSM6DSO_2g;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	701a      	strb	r2, [r3, #0]
      break;
 8003e2e:	bf00      	nop
  }

  return ret;
 8003e30:	68fb      	ldr	r3, [r7, #12]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop

08003e3c <lsm6dso_xl_data_rate_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_data_rate_set(lsm6dso_ctx_t *ctx, lsm6dso_odr_xl_t val)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8003e48:	f107 0208 	add.w	r2, r7, #8
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	2110      	movs	r1, #16
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7ff ff65 	bl	8003d20 <lsm6dso_read_reg>
 8003e56:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10f      	bne.n	8003e7e <lsm6dso_xl_data_rate_set+0x42>
    reg.odr_xl = (uint8_t) val;
 8003e5e:	78fb      	ldrb	r3, [r7, #3]
 8003e60:	f003 030f 	and.w	r3, r3, #15
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	7a3b      	ldrb	r3, [r7, #8]
 8003e68:	f362 1307 	bfi	r3, r2, #4, #4
 8003e6c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8003e6e:	f107 0208 	add.w	r2, r7, #8
 8003e72:	2301      	movs	r3, #1
 8003e74:	2110      	movs	r1, #16
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7ff ff6a 	bl	8003d50 <lsm6dso_write_reg>
 8003e7c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <lsm6dso_xl_data_rate_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_data_rate_get(lsm6dso_ctx_t *ctx, lsm6dso_odr_xl_t *val)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8003e92:	f107 0208 	add.w	r2, r7, #8
 8003e96:	2301      	movs	r3, #1
 8003e98:	2110      	movs	r1, #16
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff ff40 	bl	8003d20 <lsm6dso_read_reg>
 8003ea0:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl) {
 8003ea2:	7a3b      	ldrb	r3, [r7, #8]
 8003ea4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b0b      	cmp	r3, #11
 8003eac:	d84a      	bhi.n	8003f44 <lsm6dso_xl_data_rate_get+0xbc>
 8003eae:	a201      	add	r2, pc, #4	; (adr r2, 8003eb4 <lsm6dso_xl_data_rate_get+0x2c>)
 8003eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb4:	08003ee5 	.word	0x08003ee5
 8003eb8:	08003eed 	.word	0x08003eed
 8003ebc:	08003ef5 	.word	0x08003ef5
 8003ec0:	08003efd 	.word	0x08003efd
 8003ec4:	08003f05 	.word	0x08003f05
 8003ec8:	08003f0d 	.word	0x08003f0d
 8003ecc:	08003f15 	.word	0x08003f15
 8003ed0:	08003f1d 	.word	0x08003f1d
 8003ed4:	08003f25 	.word	0x08003f25
 8003ed8:	08003f2d 	.word	0x08003f2d
 8003edc:	08003f35 	.word	0x08003f35
 8003ee0:	08003f3d 	.word	0x08003f3d
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	701a      	strb	r2, [r3, #0]
      break;
 8003eea:	e02f      	b.n	8003f4c <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	701a      	strb	r2, [r3, #0]
      break;
 8003ef2:	e02b      	b.n	8003f4c <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	701a      	strb	r2, [r3, #0]
      break;
 8003efa:	e027      	b.n	8003f4c <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	2203      	movs	r2, #3
 8003f00:	701a      	strb	r2, [r3, #0]
      break;
 8003f02:	e023      	b.n	8003f4c <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	2204      	movs	r2, #4
 8003f08:	701a      	strb	r2, [r3, #0]
      break;
 8003f0a:	e01f      	b.n	8003f4c <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2205      	movs	r2, #5
 8003f10:	701a      	strb	r2, [r3, #0]
      break;
 8003f12:	e01b      	b.n	8003f4c <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	2206      	movs	r2, #6
 8003f18:	701a      	strb	r2, [r3, #0]
      break;
 8003f1a:	e017      	b.n	8003f4c <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	2207      	movs	r2, #7
 8003f20:	701a      	strb	r2, [r3, #0]
      break;
 8003f22:	e013      	b.n	8003f4c <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	2208      	movs	r2, #8
 8003f28:	701a      	strb	r2, [r3, #0]
      break;
 8003f2a:	e00f      	b.n	8003f4c <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2209      	movs	r2, #9
 8003f30:	701a      	strb	r2, [r3, #0]
      break;
 8003f32:	e00b      	b.n	8003f4c <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	220a      	movs	r2, #10
 8003f38:	701a      	strb	r2, [r3, #0]
      break;
 8003f3a:	e007      	b.n	8003f4c <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_6Hz5:
      *val = LSM6DSO_XL_ODR_6Hz5;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	220b      	movs	r2, #11
 8003f40:	701a      	strb	r2, [r3, #0]
      break;
 8003f42:	e003      	b.n	8003f4c <lsm6dso_xl_data_rate_get+0xc4>
    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	2200      	movs	r2, #0
 8003f48:	701a      	strb	r2, [r3, #0]
      break;
 8003f4a:	bf00      	nop
  }
  return ret;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop

08003f58 <lsm6dso_gy_full_scale_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_full_scale_set(lsm6dso_ctx_t *ctx, lsm6dso_fs_g_t val)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	460b      	mov	r3, r1
 8003f62:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8003f64:	f107 0208 	add.w	r2, r7, #8
 8003f68:	2301      	movs	r3, #1
 8003f6a:	2111      	movs	r1, #17
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f7ff fed7 	bl	8003d20 <lsm6dso_read_reg>
 8003f72:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10f      	bne.n	8003f9a <lsm6dso_gy_full_scale_set+0x42>
    reg.fs_g = (uint8_t) val;
 8003f7a:	78fb      	ldrb	r3, [r7, #3]
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	7a3b      	ldrb	r3, [r7, #8]
 8003f84:	f362 0343 	bfi	r3, r2, #1, #3
 8003f88:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8003f8a:	f107 0208 	add.w	r2, r7, #8
 8003f8e:	2301      	movs	r3, #1
 8003f90:	2111      	movs	r1, #17
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7ff fedc 	bl	8003d50 <lsm6dso_write_reg>
 8003f98:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <lsm6dso_gy_full_scale_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_full_scale_get(lsm6dso_ctx_t *ctx, lsm6dso_fs_g_t *val)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8003fae:	f107 0208 	add.w	r2, r7, #8
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	2111      	movs	r1, #17
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7ff feb2 	bl	8003d20 <lsm6dso_read_reg>
 8003fbc:	60f8      	str	r0, [r7, #12]
  switch (reg.fs_g) {
 8003fbe:	7a3b      	ldrb	r3, [r7, #8]
 8003fc0:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b06      	cmp	r3, #6
 8003fc8:	d824      	bhi.n	8004014 <lsm6dso_gy_full_scale_get+0x70>
 8003fca:	a201      	add	r2, pc, #4	; (adr r2, 8003fd0 <lsm6dso_gy_full_scale_get+0x2c>)
 8003fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd0:	08003fed 	.word	0x08003fed
 8003fd4:	08003ff5 	.word	0x08003ff5
 8003fd8:	08003ffd 	.word	0x08003ffd
 8003fdc:	08004015 	.word	0x08004015
 8003fe0:	08004005 	.word	0x08004005
 8003fe4:	08004015 	.word	0x08004015
 8003fe8:	0800400d 	.word	0x0800400d
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	701a      	strb	r2, [r3, #0]
      break;
 8003ff2:	e013      	b.n	800401c <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	701a      	strb	r2, [r3, #0]
      break;
 8003ffa:	e00f      	b.n	800401c <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	2202      	movs	r2, #2
 8004000:	701a      	strb	r2, [r3, #0]
      break;
 8004002:	e00b      	b.n	800401c <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	2204      	movs	r2, #4
 8004008:	701a      	strb	r2, [r3, #0]
      break;
 800400a:	e007      	b.n	800401c <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	2206      	movs	r2, #6
 8004010:	701a      	strb	r2, [r3, #0]
      break;
 8004012:	e003      	b.n	800401c <lsm6dso_gy_full_scale_get+0x78>
    default:
      *val = LSM6DSO_250dps;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	2200      	movs	r2, #0
 8004018:	701a      	strb	r2, [r3, #0]
      break;
 800401a:	bf00      	nop
  }

  return ret;
 800401c:	68fb      	ldr	r3, [r7, #12]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop

08004028 <lsm6dso_gy_data_rate_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_data_rate_set(lsm6dso_ctx_t *ctx, lsm6dso_odr_g_t val)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8004034:	f107 0208 	add.w	r2, r7, #8
 8004038:	2301      	movs	r3, #1
 800403a:	2111      	movs	r1, #17
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f7ff fe6f 	bl	8003d20 <lsm6dso_read_reg>
 8004042:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10f      	bne.n	800406a <lsm6dso_gy_data_rate_set+0x42>
    reg.odr_g = (uint8_t) val;
 800404a:	78fb      	ldrb	r3, [r7, #3]
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	b2da      	uxtb	r2, r3
 8004052:	7a3b      	ldrb	r3, [r7, #8]
 8004054:	f362 1307 	bfi	r3, r2, #4, #4
 8004058:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 800405a:	f107 0208 	add.w	r2, r7, #8
 800405e:	2301      	movs	r3, #1
 8004060:	2111      	movs	r1, #17
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff fe74 	bl	8003d50 <lsm6dso_write_reg>
 8004068:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800406a:	68fb      	ldr	r3, [r7, #12]
}
 800406c:	4618      	mov	r0, r3
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <lsm6dso_gy_data_rate_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_data_rate_get(lsm6dso_ctx_t *ctx, lsm6dso_odr_g_t *val)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 800407e:	f107 0208 	add.w	r2, r7, #8
 8004082:	2301      	movs	r3, #1
 8004084:	2111      	movs	r1, #17
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7ff fe4a 	bl	8003d20 <lsm6dso_read_reg>
 800408c:	60f8      	str	r0, [r7, #12]
  switch (reg.odr_g) {
 800408e:	7a3b      	ldrb	r3, [r7, #8]
 8004090:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b0a      	cmp	r3, #10
 8004098:	d844      	bhi.n	8004124 <lsm6dso_gy_data_rate_get+0xb0>
 800409a:	a201      	add	r2, pc, #4	; (adr r2, 80040a0 <lsm6dso_gy_data_rate_get+0x2c>)
 800409c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a0:	080040cd 	.word	0x080040cd
 80040a4:	080040d5 	.word	0x080040d5
 80040a8:	080040dd 	.word	0x080040dd
 80040ac:	080040e5 	.word	0x080040e5
 80040b0:	080040ed 	.word	0x080040ed
 80040b4:	080040f5 	.word	0x080040f5
 80040b8:	080040fd 	.word	0x080040fd
 80040bc:	08004105 	.word	0x08004105
 80040c0:	0800410d 	.word	0x0800410d
 80040c4:	08004115 	.word	0x08004115
 80040c8:	0800411d 	.word	0x0800411d
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	2200      	movs	r2, #0
 80040d0:	701a      	strb	r2, [r3, #0]
      break;
 80040d2:	e02b      	b.n	800412c <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	2201      	movs	r2, #1
 80040d8:	701a      	strb	r2, [r3, #0]
      break;
 80040da:	e027      	b.n	800412c <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2202      	movs	r2, #2
 80040e0:	701a      	strb	r2, [r3, #0]
      break;
 80040e2:	e023      	b.n	800412c <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2203      	movs	r2, #3
 80040e8:	701a      	strb	r2, [r3, #0]
      break;
 80040ea:	e01f      	b.n	800412c <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2204      	movs	r2, #4
 80040f0:	701a      	strb	r2, [r3, #0]
      break;
 80040f2:	e01b      	b.n	800412c <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2205      	movs	r2, #5
 80040f8:	701a      	strb	r2, [r3, #0]
      break;
 80040fa:	e017      	b.n	800412c <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	2206      	movs	r2, #6
 8004100:	701a      	strb	r2, [r3, #0]
      break;
 8004102:	e013      	b.n	800412c <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	2207      	movs	r2, #7
 8004108:	701a      	strb	r2, [r3, #0]
      break;
 800410a:	e00f      	b.n	800412c <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	2208      	movs	r2, #8
 8004110:	701a      	strb	r2, [r3, #0]
      break;
 8004112:	e00b      	b.n	800412c <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2209      	movs	r2, #9
 8004118:	701a      	strb	r2, [r3, #0]
      break;
 800411a:	e007      	b.n	800412c <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	220a      	movs	r2, #10
 8004120:	701a      	strb	r2, [r3, #0]
      break;
 8004122:	e003      	b.n	800412c <lsm6dso_gy_data_rate_get+0xb8>
    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2200      	movs	r2, #0
 8004128:	701a      	strb	r2, [r3, #0]
      break;
 800412a:	bf00      	nop
  }
  return ret;
 800412c:	68fb      	ldr	r3, [r7, #12]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop

08004138 <lsm6dso_block_data_update_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of bdu in reg CTRL3_C
  *
  */
int32_t lsm6dso_block_data_update_set(lsm6dso_ctx_t *ctx, uint8_t val)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 8004144:	f107 0208 	add.w	r2, r7, #8
 8004148:	2301      	movs	r3, #1
 800414a:	2112      	movs	r1, #18
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7ff fde7 	bl	8003d20 <lsm6dso_read_reg>
 8004152:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10f      	bne.n	800417a <lsm6dso_block_data_update_set+0x42>
    reg.bdu = val;
 800415a:	78fb      	ldrb	r3, [r7, #3]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	b2da      	uxtb	r2, r3
 8004162:	7a3b      	ldrb	r3, [r7, #8]
 8004164:	f362 1386 	bfi	r3, r2, #6, #1
 8004168:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 800416a:	f107 0208 	add.w	r2, r7, #8
 800416e:	2301      	movs	r3, #1
 8004170:	2112      	movs	r1, #18
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7ff fdec 	bl	8003d50 <lsm6dso_write_reg>
 8004178:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800417a:	68fb      	ldr	r3, [r7, #12]
}
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <lsm6dso_angular_rate_raw_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_angular_rate_raw_get(lsm6dso_ctx_t *ctx, uint8_t *buff)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 800418e:	2306      	movs	r3, #6
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	2122      	movs	r1, #34	; 0x22
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7ff fdc3 	bl	8003d20 <lsm6dso_read_reg>
 800419a:	60f8      	str	r0, [r7, #12]
  return ret;
 800419c:	68fb      	ldr	r3, [r7, #12]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <lsm6dso_acceleration_raw_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_acceleration_raw_get(lsm6dso_ctx_t *ctx, uint8_t *buff)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b084      	sub	sp, #16
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 80041b0:	2306      	movs	r3, #6
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	2128      	movs	r1, #40	; 0x28
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7ff fdb2 	bl	8003d20 <lsm6dso_read_reg>
 80041bc:	60f8      	str	r0, [r7, #12]
  return ret;
 80041be:	68fb      	ldr	r3, [r7, #12]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <lsm6dso_device_id_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_device_id_get(lsm6dso_ctx_t *ctx, uint8_t *buff)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 80041d2:	2301      	movs	r3, #1
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	210f      	movs	r1, #15
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f7ff fda1 	bl	8003d20 <lsm6dso_read_reg>
 80041de:	60f8      	str	r0, [r7, #12]
  return ret;
 80041e0:	68fb      	ldr	r3, [r7, #12]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <lsm6dso_auto_increment_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of if_inc in reg CTRL3_C
  *
  */
int32_t lsm6dso_auto_increment_set(lsm6dso_ctx_t *ctx, uint8_t val)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b084      	sub	sp, #16
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
 80041f2:	460b      	mov	r3, r1
 80041f4:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 80041f6:	f107 0208 	add.w	r2, r7, #8
 80041fa:	2301      	movs	r3, #1
 80041fc:	2112      	movs	r1, #18
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff fd8e 	bl	8003d20 <lsm6dso_read_reg>
 8004204:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10f      	bne.n	800422c <lsm6dso_auto_increment_set+0x42>
    reg.if_inc = val;
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	b2da      	uxtb	r2, r3
 8004214:	7a3b      	ldrb	r3, [r7, #8]
 8004216:	f362 0382 	bfi	r3, r2, #2, #1
 800421a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 800421c:	f107 0208 	add.w	r2, r7, #8
 8004220:	2301      	movs	r3, #1
 8004222:	2112      	movs	r1, #18
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7ff fd93 	bl	8003d50 <lsm6dso_write_reg>
 800422a:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800422c:	68fb      	ldr	r3, [r7, #12]
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <lsm6dso_fifo_mode_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of fifo_mode in reg FIFO_CTRL4
  *
  */
int32_t lsm6dso_fifo_mode_set(lsm6dso_ctx_t *ctx, lsm6dso_fifo_mode_t val)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b084      	sub	sp, #16
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	460b      	mov	r3, r1
 8004240:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t*)&reg, 1);
 8004242:	f107 0208 	add.w	r2, r7, #8
 8004246:	2301      	movs	r3, #1
 8004248:	210a      	movs	r1, #10
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7ff fd68 	bl	8003d20 <lsm6dso_read_reg>
 8004250:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10f      	bne.n	8004278 <lsm6dso_fifo_mode_set+0x42>
    reg.fifo_mode = (uint8_t)val;
 8004258:	78fb      	ldrb	r3, [r7, #3]
 800425a:	f003 0307 	and.w	r3, r3, #7
 800425e:	b2da      	uxtb	r2, r3
 8004260:	7a3b      	ldrb	r3, [r7, #8]
 8004262:	f362 0302 	bfi	r3, r2, #0, #3
 8004266:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t*)&reg, 1);
 8004268:	f107 0208 	add.w	r2, r7, #8
 800426c:	2301      	movs	r3, #1
 800426e:	210a      	movs	r1, #10
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff fd6d 	bl	8003d50 <lsm6dso_write_reg>
 8004276:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004278:	68fb      	ldr	r3, [r7, #12]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
	...

08004284 <IKS01A3_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b08e      	sub	sp, #56	; 0x38
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800428e:	2300      	movs	r3, #0
 8004290:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8004292:	2301      	movs	r3, #1
 8004294:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8004296:	2300      	movs	r3, #0
 8004298:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d036      	beq.n	800430e <IKS01A3_MOTION_SENSOR_Init+0x8a>
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d302      	bcc.n	80042aa <IKS01A3_MOTION_SENSOR_Init+0x26>
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d064      	beq.n	8004372 <IKS01A3_MOTION_SENSOR_Init+0xee>
 80042a8:	e095      	b.n	80043d6 <IKS01A3_MOTION_SENSOR_Init+0x152>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 80042aa:	6838      	ldr	r0, [r7, #0]
 80042ac:	f000 f924 	bl	80044f8 <LSM6DSO_0_Probe>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <IKS01A3_MOTION_SENSOR_Init+0x38>
      {
        return BSP_ERROR_NO_INIT;
 80042b6:	f04f 33ff 	mov.w	r3, #4294967295
 80042ba:	e0cc      	b.n	8004456 <IKS01A3_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80042bc:	4a68      	ldr	r2, [pc, #416]	; (8004460 <IKS01A3_MOTION_SENSOR_Init+0x1dc>)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	4967      	ldr	r1, [pc, #412]	; (8004464 <IKS01A3_MOTION_SENSOR_Init+0x1e0>)
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80042ce:	f107 010c 	add.w	r1, r7, #12
 80042d2:	4610      	mov	r0, r2
 80042d4:	4798      	blx	r3
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d002      	beq.n	80042e2 <IKS01A3_MOTION_SENSOR_Init+0x5e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80042dc:	f06f 0306 	mvn.w	r3, #6
 80042e0:	e0b9      	b.n	8004456 <IKS01A3_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 80042e2:	7b3b      	ldrb	r3, [r7, #12]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d103      	bne.n	80042f0 <IKS01A3_MOTION_SENSOR_Init+0x6c>
      {
        component_functions |= MOTION_ACCELERO;
 80042e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ea:	f043 0302 	orr.w	r3, r3, #2
 80042ee:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80042f0:	7b7b      	ldrb	r3, [r7, #13]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d103      	bne.n	80042fe <IKS01A3_MOTION_SENSOR_Init+0x7a>
      {
        component_functions |= MOTION_GYRO;
 80042f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80042fe:	7bbb      	ldrb	r3, [r7, #14]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d16c      	bne.n	80043de <IKS01A3_MOTION_SENSOR_Init+0x15a>
      {
        component_functions |= MOTION_MAGNETO;
 8004304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004306:	f043 0304 	orr.w	r3, r3, #4
 800430a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800430c:	e067      	b.n	80043de <IKS01A3_MOTION_SENSOR_Init+0x15a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 800430e:	6838      	ldr	r0, [r7, #0]
 8004310:	f000 f9ae 	bl	8004670 <LIS2DW12_0_Probe>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <IKS01A3_MOTION_SENSOR_Init+0x9c>
      {
        return BSP_ERROR_NO_INIT;
 800431a:	f04f 33ff 	mov.w	r3, #4294967295
 800431e:	e09a      	b.n	8004456 <IKS01A3_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004320:	4a4f      	ldr	r2, [pc, #316]	; (8004460 <IKS01A3_MOTION_SENSOR_Init+0x1dc>)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	494e      	ldr	r1, [pc, #312]	; (8004464 <IKS01A3_MOTION_SENSOR_Init+0x1e0>)
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004332:	f107 010c 	add.w	r1, r7, #12
 8004336:	4610      	mov	r0, r2
 8004338:	4798      	blx	r3
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d002      	beq.n	8004346 <IKS01A3_MOTION_SENSOR_Init+0xc2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004340:	f06f 0306 	mvn.w	r3, #6
 8004344:	e087      	b.n	8004456 <IKS01A3_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 8004346:	7b3b      	ldrb	r3, [r7, #12]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d103      	bne.n	8004354 <IKS01A3_MOTION_SENSOR_Init+0xd0>
      {
        component_functions |= MOTION_ACCELERO;
 800434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434e:	f043 0302 	orr.w	r3, r3, #2
 8004352:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8004354:	7b7b      	ldrb	r3, [r7, #13]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d103      	bne.n	8004362 <IKS01A3_MOTION_SENSOR_Init+0xde>
      {
        component_functions |= MOTION_GYRO;
 800435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435c:	f043 0301 	orr.w	r3, r3, #1
 8004360:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8004362:	7bbb      	ldrb	r3, [r7, #14]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d13c      	bne.n	80043e2 <IKS01A3_MOTION_SENSOR_Init+0x15e>
      {
        component_functions |= MOTION_MAGNETO;
 8004368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436a:	f043 0304 	orr.w	r3, r3, #4
 800436e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8004370:	e037      	b.n	80043e2 <IKS01A3_MOTION_SENSOR_Init+0x15e>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 8004372:	6838      	ldr	r0, [r7, #0]
 8004374:	f000 fa20 	bl	80047b8 <LIS2MDL_0_Probe>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <IKS01A3_MOTION_SENSOR_Init+0x100>
      {
        return BSP_ERROR_NO_INIT;
 800437e:	f04f 33ff 	mov.w	r3, #4294967295
 8004382:	e068      	b.n	8004456 <IKS01A3_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004384:	4a36      	ldr	r2, [pc, #216]	; (8004460 <IKS01A3_MOTION_SENSOR_Init+0x1dc>)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	4935      	ldr	r1, [pc, #212]	; (8004464 <IKS01A3_MOTION_SENSOR_Init+0x1e0>)
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004396:	f107 010c 	add.w	r1, r7, #12
 800439a:	4610      	mov	r0, r2
 800439c:	4798      	blx	r3
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d002      	beq.n	80043aa <IKS01A3_MOTION_SENSOR_Init+0x126>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80043a4:	f06f 0306 	mvn.w	r3, #6
 80043a8:	e055      	b.n	8004456 <IKS01A3_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 80043aa:	7b3b      	ldrb	r3, [r7, #12]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d103      	bne.n	80043b8 <IKS01A3_MOTION_SENSOR_Init+0x134>
      {
        component_functions |= MOTION_ACCELERO;
 80043b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b2:	f043 0302 	orr.w	r3, r3, #2
 80043b6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80043b8:	7b7b      	ldrb	r3, [r7, #13]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d103      	bne.n	80043c6 <IKS01A3_MOTION_SENSOR_Init+0x142>
      {
        component_functions |= MOTION_GYRO;
 80043be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c0:	f043 0301 	orr.w	r3, r3, #1
 80043c4:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80043c6:	7bbb      	ldrb	r3, [r7, #14]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d10c      	bne.n	80043e6 <IKS01A3_MOTION_SENSOR_Init+0x162>
      {
        component_functions |= MOTION_MAGNETO;
 80043cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ce:	f043 0304 	orr.w	r3, r3, #4
 80043d2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80043d4:	e007      	b.n	80043e6 <IKS01A3_MOTION_SENSOR_Init+0x162>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80043d6:	f06f 0301 	mvn.w	r3, #1
 80043da:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80043dc:	e004      	b.n	80043e8 <IKS01A3_MOTION_SENSOR_Init+0x164>
      break;
 80043de:	bf00      	nop
 80043e0:	e002      	b.n	80043e8 <IKS01A3_MOTION_SENSOR_Init+0x164>
      break;
 80043e2:	bf00      	nop
 80043e4:	e000      	b.n	80043e8 <IKS01A3_MOTION_SENSOR_Init+0x164>
      break;
 80043e6:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80043e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <IKS01A3_MOTION_SENSOR_Init+0x16e>
  {
    return ret;
 80043ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f0:	e031      	b.n	8004456 <IKS01A3_MOTION_SENSOR_Init+0x1d2>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 80043f2:	2300      	movs	r3, #0
 80043f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043f6:	e02a      	b.n	800444e <IKS01A3_MOTION_SENSOR_Init+0x1ca>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fc:	401a      	ands	r2, r3
 80043fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004400:	429a      	cmp	r2, r3
 8004402:	d11e      	bne.n	8004442 <IKS01A3_MOTION_SENSOR_Init+0x1be>
 8004404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004408:	401a      	ands	r2, r3
 800440a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440c:	429a      	cmp	r2, r3
 800440e:	d118      	bne.n	8004442 <IKS01A3_MOTION_SENSOR_Init+0x1be>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8004410:	4a15      	ldr	r2, [pc, #84]	; (8004468 <IKS01A3_MOTION_SENSOR_Init+0x1e4>)
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004414:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004418:	4814      	ldr	r0, [pc, #80]	; (800446c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	4413      	add	r3, r2
 8004422:	440b      	add	r3, r1
 8004424:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	490e      	ldr	r1, [pc, #56]	; (8004464 <IKS01A3_MOTION_SENSOR_Init+0x1e0>)
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004432:	4610      	mov	r0, r2
 8004434:	4798      	blx	r3
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <IKS01A3_MOTION_SENSOR_Init+0x1be>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800443c:	f06f 0304 	mvn.w	r3, #4
 8004440:	e009      	b.n	8004456 <IKS01A3_MOTION_SENSOR_Init+0x1d2>
      }
    }
    function = function << 1;
 8004442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8004448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800444a:	3301      	adds	r3, #1
 800444c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800444e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004450:	2b02      	cmp	r3, #2
 8004452:	d9d1      	bls.n	80043f8 <IKS01A3_MOTION_SENSOR_Init+0x174>
  }

  return ret;
 8004454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004456:	4618      	mov	r0, r3
 8004458:	3738      	adds	r7, #56	; 0x38
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	2000019c 	.word	0x2000019c
 8004464:	200079e4 	.word	0x200079e4
 8004468:	200000c0 	.word	0x200000c0
 800446c:	20000178 	.word	0x20000178

08004470 <IKS01A3_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b02      	cmp	r3, #2
 8004480:	d903      	bls.n	800448a <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004482:	f06f 0301 	mvn.w	r3, #1
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	e029      	b.n	80044de <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800448a:	4a17      	ldr	r2, [pc, #92]	; (80044e8 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	401a      	ands	r2, r3
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	429a      	cmp	r2, r3
 800449a:	d11d      	bne.n	80044d8 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800449c:	4a13      	ldr	r2, [pc, #76]	; (80044ec <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80044a4:	4812      	ldr	r0, [pc, #72]	; (80044f0 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4613      	mov	r3, r2
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	4413      	add	r3, r2
 80044ae:	440b      	add	r3, r1
 80044b0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	490f      	ldr	r1, [pc, #60]	; (80044f4 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	4610      	mov	r0, r2
 80044c2:	4798      	blx	r3
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80044ca:	f06f 0304 	mvn.w	r3, #4
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	e005      	b.n	80044de <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	e002      	b.n	80044de <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80044d8:	f06f 0301 	mvn.w	r3, #1
 80044dc:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80044de:	697b      	ldr	r3, [r7, #20]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3718      	adds	r7, #24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	200001a8 	.word	0x200001a8
 80044ec:	200000c0 	.word	0x200000c0
 80044f0:	20000178 	.word	0x20000178
 80044f4:	200079e4 	.word	0x200079e4

080044f8 <LSM6DSO_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b092      	sub	sp, #72	; 0x48
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8004500:	2300      	movs	r3, #0
 8004502:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8004504:	2300      	movs	r3, #0
 8004506:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8004508:	23d7      	movs	r3, #215	; 0xd7
 800450a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 800450e:	4b4a      	ldr	r3, [pc, #296]	; (8004638 <LSM6DSO_0_Probe+0x140>)
 8004510:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8004512:	4b4a      	ldr	r3, [pc, #296]	; (800463c <LSM6DSO_0_Probe+0x144>)
 8004514:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8004516:	4b4a      	ldr	r3, [pc, #296]	; (8004640 <LSM6DSO_0_Probe+0x148>)
 8004518:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800451a:	4b4a      	ldr	r3, [pc, #296]	; (8004644 <LSM6DSO_0_Probe+0x14c>)
 800451c:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 800451e:	4b4a      	ldr	r3, [pc, #296]	; (8004648 <LSM6DSO_0_Probe+0x150>)
 8004520:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 8004522:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004526:	4619      	mov	r1, r3
 8004528:	4848      	ldr	r0, [pc, #288]	; (800464c <LSM6DSO_0_Probe+0x154>)
 800452a:	f7fe fc09 	bl	8002d40 <LSM6DSO_RegisterBusIO>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <LSM6DSO_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004534:	f06f 0306 	mvn.w	r3, #6
 8004538:	647b      	str	r3, [r7, #68]	; 0x44
 800453a:	e077      	b.n	800462c <LSM6DSO_0_Probe+0x134>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 800453c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8004540:	4619      	mov	r1, r3
 8004542:	4842      	ldr	r0, [pc, #264]	; (800464c <LSM6DSO_0_Probe+0x154>)
 8004544:	f7fe fcf2 	bl	8002f2c <LSM6DSO_ReadID>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <LSM6DSO_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800454e:	f06f 0306 	mvn.w	r3, #6
 8004552:	647b      	str	r3, [r7, #68]	; 0x44
 8004554:	e06a      	b.n	800462c <LSM6DSO_0_Probe+0x134>
  }
  else if (id != LSM6DSO_ID)
 8004556:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800455a:	2b68      	cmp	r3, #104	; 0x68
 800455c:	d003      	beq.n	8004566 <LSM6DSO_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800455e:	f06f 0306 	mvn.w	r3, #6
 8004562:	647b      	str	r3, [r7, #68]	; 0x44
 8004564:	e062      	b.n	800462c <LSM6DSO_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8004566:	f107 0308 	add.w	r3, r7, #8
 800456a:	4619      	mov	r1, r3
 800456c:	4837      	ldr	r0, [pc, #220]	; (800464c <LSM6DSO_0_Probe+0x154>)
 800456e:	f7fe fcf3 	bl	8002f58 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8004572:	7a7b      	ldrb	r3, [r7, #9]
 8004574:	461a      	mov	r2, r3
 8004576:	7a3b      	ldrb	r3, [r7, #8]
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	431a      	orrs	r2, r3
 800457c:	7abb      	ldrb	r3, [r7, #10]
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4313      	orrs	r3, r2
 8004582:	4a33      	ldr	r2, [pc, #204]	; (8004650 <LSM6DSO_0_Probe+0x158>)
 8004584:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8004586:	4b33      	ldr	r3, [pc, #204]	; (8004654 <LSM6DSO_0_Probe+0x15c>)
 8004588:	4a30      	ldr	r2, [pc, #192]	; (800464c <LSM6DSO_0_Probe+0x154>)
 800458a:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 800458c:	4b32      	ldr	r3, [pc, #200]	; (8004658 <LSM6DSO_0_Probe+0x160>)
 800458e:	4a33      	ldr	r2, [pc, #204]	; (800465c <LSM6DSO_0_Probe+0x164>)
 8004590:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8004592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004594:	2b00      	cmp	r3, #0
 8004596:	d11d      	bne.n	80045d4 <LSM6DSO_0_Probe+0xdc>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d018      	beq.n	80045d4 <LSM6DSO_0_Probe+0xdc>
 80045a2:	7a7b      	ldrb	r3, [r7, #9]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d115      	bne.n	80045d4 <LSM6DSO_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 80045a8:	4b2d      	ldr	r3, [pc, #180]	; (8004660 <LSM6DSO_0_Probe+0x168>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	4a2d      	ldr	r2, [pc, #180]	; (8004664 <LSM6DSO_0_Probe+0x16c>)
 80045ae:	492e      	ldr	r1, [pc, #184]	; (8004668 <LSM6DSO_0_Probe+0x170>)
 80045b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 80045b4:	4b28      	ldr	r3, [pc, #160]	; (8004658 <LSM6DSO_0_Probe+0x160>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a26      	ldr	r2, [pc, #152]	; (8004654 <LSM6DSO_0_Probe+0x15c>)
 80045bc:	6812      	ldr	r2, [r2, #0]
 80045be:	4610      	mov	r0, r2
 80045c0:	4798      	blx	r3
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <LSM6DSO_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80045c8:	f06f 0304 	mvn.w	r3, #4
 80045cc:	647b      	str	r3, [r7, #68]	; 0x44
 80045ce:	e001      	b.n	80045d4 <LSM6DSO_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80045d0:	2300      	movs	r3, #0
 80045d2:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80045d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d11d      	bne.n	8004616 <LSM6DSO_0_Probe+0x11e>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d018      	beq.n	8004616 <LSM6DSO_0_Probe+0x11e>
 80045e4:	7a3b      	ldrb	r3, [r7, #8]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d115      	bne.n	8004616 <LSM6DSO_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80045ea:	4b1d      	ldr	r3, [pc, #116]	; (8004660 <LSM6DSO_0_Probe+0x168>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	4a1d      	ldr	r2, [pc, #116]	; (8004664 <LSM6DSO_0_Probe+0x16c>)
 80045f0:	491e      	ldr	r1, [pc, #120]	; (800466c <LSM6DSO_0_Probe+0x174>)
 80045f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 80045f6:	4b18      	ldr	r3, [pc, #96]	; (8004658 <LSM6DSO_0_Probe+0x160>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a15      	ldr	r2, [pc, #84]	; (8004654 <LSM6DSO_0_Probe+0x15c>)
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	4610      	mov	r0, r2
 8004602:	4798      	blx	r3
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <LSM6DSO_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800460a:	f06f 0304 	mvn.w	r3, #4
 800460e:	647b      	str	r3, [r7, #68]	; 0x44
 8004610:	e001      	b.n	8004616 <LSM6DSO_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004612:	2300      	movs	r3, #0
 8004614:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8004616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004618:	2b00      	cmp	r3, #0
 800461a:	d107      	bne.n	800462c <LSM6DSO_0_Probe+0x134>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f003 0304 	and.w	r3, r3, #4
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <LSM6DSO_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004626:	f06f 0304 	mvn.w	r3, #4
 800462a:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 800462c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800462e:	4618      	mov	r0, r3
 8004630:	3748      	adds	r7, #72	; 0x48
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	08000c75 	.word	0x08000c75
 800463c:	08000cf1 	.word	0x08000cf1
 8004640:	08000da5 	.word	0x08000da5
 8004644:	08000d41 	.word	0x08000d41
 8004648:	08000e09 	.word	0x08000e09
 800464c:	200001b4 	.word	0x200001b4
 8004650:	200001a8 	.word	0x200001a8
 8004654:	200079e4 	.word	0x200079e4
 8004658:	2000019c 	.word	0x2000019c
 800465c:	20000068 	.word	0x20000068
 8004660:	200000c0 	.word	0x200000c0
 8004664:	20000178 	.word	0x20000178
 8004668:	2000009c 	.word	0x2000009c
 800466c:	20000078 	.word	0x20000078

08004670 <LIS2DW12_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval BSP status
 */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b092      	sub	sp, #72	; 0x48
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8004678:	2300      	movs	r3, #0
 800467a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 800467c:	2300      	movs	r3, #0
 800467e:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8004680:	2333      	movs	r3, #51	; 0x33
 8004682:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 8004686:	4b3f      	ldr	r3, [pc, #252]	; (8004784 <LIS2DW12_0_Probe+0x114>)
 8004688:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800468a:	4b3f      	ldr	r3, [pc, #252]	; (8004788 <LIS2DW12_0_Probe+0x118>)
 800468c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800468e:	4b3f      	ldr	r3, [pc, #252]	; (800478c <LIS2DW12_0_Probe+0x11c>)
 8004690:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8004692:	4b3f      	ldr	r3, [pc, #252]	; (8004790 <LIS2DW12_0_Probe+0x120>)
 8004694:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 8004696:	4b3f      	ldr	r3, [pc, #252]	; (8004794 <LIS2DW12_0_Probe+0x124>)
 8004698:	643b      	str	r3, [r7, #64]	; 0x40

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 800469a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800469e:	4619      	mov	r1, r3
 80046a0:	483d      	ldr	r0, [pc, #244]	; (8004798 <LIS2DW12_0_Probe+0x128>)
 80046a2:	f7fc fc4b 	bl	8000f3c <LIS2DW12_RegisterBusIO>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d003      	beq.n	80046b4 <LIS2DW12_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80046ac:	f06f 0306 	mvn.w	r3, #6
 80046b0:	647b      	str	r3, [r7, #68]	; 0x44
 80046b2:	e062      	b.n	800477a <LIS2DW12_0_Probe+0x10a>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 80046b4:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80046b8:	4619      	mov	r1, r3
 80046ba:	4837      	ldr	r0, [pc, #220]	; (8004798 <LIS2DW12_0_Probe+0x128>)
 80046bc:	f7fc fd28 	bl	8001110 <LIS2DW12_ReadID>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <LIS2DW12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80046c6:	f06f 0306 	mvn.w	r3, #6
 80046ca:	647b      	str	r3, [r7, #68]	; 0x44
 80046cc:	e055      	b.n	800477a <LIS2DW12_0_Probe+0x10a>
  }
  else if (id != LIS2DW12_ID)
 80046ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046d2:	2b44      	cmp	r3, #68	; 0x44
 80046d4:	d003      	beq.n	80046de <LIS2DW12_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80046d6:	f06f 0306 	mvn.w	r3, #6
 80046da:	647b      	str	r3, [r7, #68]	; 0x44
 80046dc:	e04d      	b.n	800477a <LIS2DW12_0_Probe+0x10a>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 80046de:	f107 0308 	add.w	r3, r7, #8
 80046e2:	4619      	mov	r1, r3
 80046e4:	482c      	ldr	r0, [pc, #176]	; (8004798 <LIS2DW12_0_Probe+0x128>)
 80046e6:	f7fc fd29 	bl	800113c <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80046ea:	7a7b      	ldrb	r3, [r7, #9]
 80046ec:	461a      	mov	r2, r3
 80046ee:	7a3b      	ldrb	r3, [r7, #8]
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	431a      	orrs	r2, r3
 80046f4:	7abb      	ldrb	r3, [r7, #10]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4313      	orrs	r3, r2
 80046fa:	4a28      	ldr	r2, [pc, #160]	; (800479c <LIS2DW12_0_Probe+0x12c>)
 80046fc:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 80046fe:	4b28      	ldr	r3, [pc, #160]	; (80047a0 <LIS2DW12_0_Probe+0x130>)
 8004700:	4a25      	ldr	r2, [pc, #148]	; (8004798 <LIS2DW12_0_Probe+0x128>)
 8004702:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8004704:	4b27      	ldr	r3, [pc, #156]	; (80047a4 <LIS2DW12_0_Probe+0x134>)
 8004706:	4a28      	ldr	r2, [pc, #160]	; (80047a8 <LIS2DW12_0_Probe+0x138>)
 8004708:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800470a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800470c:	2b00      	cmp	r3, #0
 800470e:	d11e      	bne.n	800474e <LIS2DW12_0_Probe+0xde>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d019      	beq.n	800474e <LIS2DW12_0_Probe+0xde>
 800471a:	7a3b      	ldrb	r3, [r7, #8]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d116      	bne.n	800474e <LIS2DW12_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8004720:	4b22      	ldr	r3, [pc, #136]	; (80047ac <LIS2DW12_0_Probe+0x13c>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	4a22      	ldr	r2, [pc, #136]	; (80047b0 <LIS2DW12_0_Probe+0x140>)
 8004726:	3303      	adds	r3, #3
 8004728:	4922      	ldr	r1, [pc, #136]	; (80047b4 <LIS2DW12_0_Probe+0x144>)
 800472a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 800472e:	4b1d      	ldr	r3, [pc, #116]	; (80047a4 <LIS2DW12_0_Probe+0x134>)
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a1a      	ldr	r2, [pc, #104]	; (80047a0 <LIS2DW12_0_Probe+0x130>)
 8004736:	6852      	ldr	r2, [r2, #4]
 8004738:	4610      	mov	r0, r2
 800473a:	4798      	blx	r3
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <LIS2DW12_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004742:	f06f 0304 	mvn.w	r3, #4
 8004746:	647b      	str	r3, [r7, #68]	; 0x44
 8004748:	e001      	b.n	800474e <LIS2DW12_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800474a:	2300      	movs	r3, #0
 800474c:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800474e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004750:	2b00      	cmp	r3, #0
 8004752:	d107      	bne.n	8004764 <LIS2DW12_0_Probe+0xf4>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d002      	beq.n	8004764 <LIS2DW12_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800475e:	f06f 0304 	mvn.w	r3, #4
 8004762:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8004764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004766:	2b00      	cmp	r3, #0
 8004768:	d107      	bne.n	800477a <LIS2DW12_0_Probe+0x10a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d002      	beq.n	800477a <LIS2DW12_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004774:	f06f 0304 	mvn.w	r3, #4
 8004778:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 800477a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800477c:	4618      	mov	r0, r3
 800477e:	3748      	adds	r7, #72	; 0x48
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	08000c75 	.word	0x08000c75
 8004788:	08000cf1 	.word	0x08000cf1
 800478c:	08000da5 	.word	0x08000da5
 8004790:	08000d41 	.word	0x08000d41
 8004794:	08000e09 	.word	0x08000e09
 8004798:	200001e4 	.word	0x200001e4
 800479c:	200001a8 	.word	0x200001a8
 80047a0:	200079e4 	.word	0x200079e4
 80047a4:	2000019c 	.word	0x2000019c
 80047a8:	20000000 	.word	0x20000000
 80047ac:	200000c0 	.word	0x200000c0
 80047b0:	20000178 	.word	0x20000178
 80047b4:	20000010 	.word	0x20000010

080047b8 <LIS2MDL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval BSP status
 */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b092      	sub	sp, #72	; 0x48
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 80047c0:	2300      	movs	r3, #0
 80047c2:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 80047c4:	2300      	movs	r3, #0
 80047c6:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 80047c8:	233d      	movs	r3, #61	; 0x3d
 80047ca:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 80047ce:	4b3f      	ldr	r3, [pc, #252]	; (80048cc <LIS2MDL_0_Probe+0x114>)
 80047d0:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80047d2:	4b3f      	ldr	r3, [pc, #252]	; (80048d0 <LIS2MDL_0_Probe+0x118>)
 80047d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80047d6:	4b3f      	ldr	r3, [pc, #252]	; (80048d4 <LIS2MDL_0_Probe+0x11c>)
 80047d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80047da:	4b3f      	ldr	r3, [pc, #252]	; (80048d8 <LIS2MDL_0_Probe+0x120>)
 80047dc:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 80047de:	4b3f      	ldr	r3, [pc, #252]	; (80048dc <LIS2MDL_0_Probe+0x124>)
 80047e0:	643b      	str	r3, [r7, #64]	; 0x40

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 80047e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047e6:	4619      	mov	r1, r3
 80047e8:	483d      	ldr	r0, [pc, #244]	; (80048e0 <LIS2MDL_0_Probe+0x128>)
 80047ea:	f7fd fe75 	bl	80024d8 <LIS2MDL_RegisterBusIO>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <LIS2MDL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80047f4:	f06f 0306 	mvn.w	r3, #6
 80047f8:	647b      	str	r3, [r7, #68]	; 0x44
 80047fa:	e062      	b.n	80048c2 <LIS2MDL_0_Probe+0x10a>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 80047fc:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8004800:	4619      	mov	r1, r3
 8004802:	4837      	ldr	r0, [pc, #220]	; (80048e0 <LIS2MDL_0_Probe+0x128>)
 8004804:	f7fd ff31 	bl	800266a <LIS2MDL_ReadID>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <LIS2MDL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800480e:	f06f 0306 	mvn.w	r3, #6
 8004812:	647b      	str	r3, [r7, #68]	; 0x44
 8004814:	e055      	b.n	80048c2 <LIS2MDL_0_Probe+0x10a>
  }
  else if (id != LIS2MDL_ID)
 8004816:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800481a:	2b40      	cmp	r3, #64	; 0x40
 800481c:	d003      	beq.n	8004826 <LIS2MDL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800481e:	f06f 0306 	mvn.w	r3, #6
 8004822:	647b      	str	r3, [r7, #68]	; 0x44
 8004824:	e04d      	b.n	80048c2 <LIS2MDL_0_Probe+0x10a>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8004826:	f107 0308 	add.w	r3, r7, #8
 800482a:	4619      	mov	r1, r3
 800482c:	482c      	ldr	r0, [pc, #176]	; (80048e0 <LIS2MDL_0_Probe+0x128>)
 800482e:	f7fd ff33 	bl	8002698 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8004832:	7a7b      	ldrb	r3, [r7, #9]
 8004834:	461a      	mov	r2, r3
 8004836:	7a3b      	ldrb	r3, [r7, #8]
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	431a      	orrs	r2, r3
 800483c:	7abb      	ldrb	r3, [r7, #10]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4313      	orrs	r3, r2
 8004842:	4a28      	ldr	r2, [pc, #160]	; (80048e4 <LIS2MDL_0_Probe+0x12c>)
 8004844:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8004846:	4b28      	ldr	r3, [pc, #160]	; (80048e8 <LIS2MDL_0_Probe+0x130>)
 8004848:	4a25      	ldr	r2, [pc, #148]	; (80048e0 <LIS2MDL_0_Probe+0x128>)
 800484a:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800484c:	4b27      	ldr	r3, [pc, #156]	; (80048ec <LIS2MDL_0_Probe+0x134>)
 800484e:	4a28      	ldr	r2, [pc, #160]	; (80048f0 <LIS2MDL_0_Probe+0x138>)
 8004850:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8004852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004854:	2b00      	cmp	r3, #0
 8004856:	d11e      	bne.n	8004896 <LIS2MDL_0_Probe+0xde>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f003 0304 	and.w	r3, r3, #4
 800485e:	2b00      	cmp	r3, #0
 8004860:	d019      	beq.n	8004896 <LIS2MDL_0_Probe+0xde>
 8004862:	7abb      	ldrb	r3, [r7, #10]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d116      	bne.n	8004896 <LIS2MDL_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8004868:	4b22      	ldr	r3, [pc, #136]	; (80048f4 <LIS2MDL_0_Probe+0x13c>)
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	4a22      	ldr	r2, [pc, #136]	; (80048f8 <LIS2MDL_0_Probe+0x140>)
 800486e:	3306      	adds	r3, #6
 8004870:	4922      	ldr	r1, [pc, #136]	; (80048fc <LIS2MDL_0_Probe+0x144>)
 8004872:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8004876:	4b1d      	ldr	r3, [pc, #116]	; (80048ec <LIS2MDL_0_Probe+0x134>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a1a      	ldr	r2, [pc, #104]	; (80048e8 <LIS2MDL_0_Probe+0x130>)
 800487e:	6892      	ldr	r2, [r2, #8]
 8004880:	4610      	mov	r0, r2
 8004882:	4798      	blx	r3
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <LIS2MDL_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800488a:	f06f 0304 	mvn.w	r3, #4
 800488e:	647b      	str	r3, [r7, #68]	; 0x44
 8004890:	e001      	b.n	8004896 <LIS2MDL_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004892:	2300      	movs	r3, #0
 8004894:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8004896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004898:	2b00      	cmp	r3, #0
 800489a:	d107      	bne.n	80048ac <LIS2MDL_0_Probe+0xf4>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d002      	beq.n	80048ac <LIS2MDL_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80048a6:	f06f 0304 	mvn.w	r3, #4
 80048aa:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80048ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d107      	bne.n	80048c2 <LIS2MDL_0_Probe+0x10a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d002      	beq.n	80048c2 <LIS2MDL_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80048bc:	f06f 0304 	mvn.w	r3, #4
 80048c0:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 80048c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3748      	adds	r7, #72	; 0x48
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	08000c75 	.word	0x08000c75
 80048d0:	08000cf1 	.word	0x08000cf1
 80048d4:	08000da5 	.word	0x08000da5
 80048d8:	08000d41 	.word	0x08000d41
 80048dc:	08000e09 	.word	0x08000e09
 80048e0:	20000218 	.word	0x20000218
 80048e4:	200001a8 	.word	0x200001a8
 80048e8:	200079e4 	.word	0x200079e4
 80048ec:	2000019c 	.word	0x2000019c
 80048f0:	20000034 	.word	0x20000034
 80048f4:	200000c0 	.word	0x200000c0
 80048f8:	20000178 	.word	0x20000178
 80048fc:	20000044 	.word	0x20000044

08004900 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004904:	4a17      	ldr	r2, [pc, #92]	; (8004964 <SystemInit+0x64>)
 8004906:	4b17      	ldr	r3, [pc, #92]	; (8004964 <SystemInit+0x64>)
 8004908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004910:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004914:	4a14      	ldr	r2, [pc, #80]	; (8004968 <SystemInit+0x68>)
 8004916:	4b14      	ldr	r3, [pc, #80]	; (8004968 <SystemInit+0x68>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f043 0301 	orr.w	r3, r3, #1
 800491e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004920:	4b11      	ldr	r3, [pc, #68]	; (8004968 <SystemInit+0x68>)
 8004922:	2200      	movs	r2, #0
 8004924:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004926:	4a10      	ldr	r2, [pc, #64]	; (8004968 <SystemInit+0x68>)
 8004928:	4b0f      	ldr	r3, [pc, #60]	; (8004968 <SystemInit+0x68>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004930:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004934:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004936:	4b0c      	ldr	r3, [pc, #48]	; (8004968 <SystemInit+0x68>)
 8004938:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800493c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800493e:	4a0a      	ldr	r2, [pc, #40]	; (8004968 <SystemInit+0x68>)
 8004940:	4b09      	ldr	r3, [pc, #36]	; (8004968 <SystemInit+0x68>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004948:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800494a:	4b07      	ldr	r3, [pc, #28]	; (8004968 <SystemInit+0x68>)
 800494c:	2200      	movs	r2, #0
 800494e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004950:	4b04      	ldr	r3, [pc, #16]	; (8004964 <SystemInit+0x64>)
 8004952:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004956:	609a      	str	r2, [r3, #8]
#endif
}
 8004958:	bf00      	nop
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	e000ed00 	.word	0xe000ed00
 8004968:	40021000 	.word	0x40021000

0800496c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004976:	4a0c      	ldr	r2, [pc, #48]	; (80049a8 <HAL_Init+0x3c>)
 8004978:	4b0b      	ldr	r3, [pc, #44]	; (80049a8 <HAL_Init+0x3c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004980:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004982:	2003      	movs	r0, #3
 8004984:	f000 f8db 	bl	8004b3e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004988:	2000      	movs	r0, #0
 800498a:	f7fc f8f9 	bl	8000b80 <HAL_InitTick>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	71fb      	strb	r3, [r7, #7]
 8004998:	e001      	b.n	800499e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800499a:	f7fc f887 	bl	8000aac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800499e:	79fb      	ldrb	r3, [r7, #7]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40022000 	.word	0x40022000

080049ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049b0:	4b05      	ldr	r3, [pc, #20]	; (80049c8 <HAL_IncTick+0x1c>)
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	4b05      	ldr	r3, [pc, #20]	; (80049cc <HAL_IncTick+0x20>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4413      	add	r3, r2
 80049ba:	4a03      	ldr	r2, [pc, #12]	; (80049c8 <HAL_IncTick+0x1c>)
 80049bc:	6013      	str	r3, [r2, #0]
}
 80049be:	bf00      	nop
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	200079f0 	.word	0x200079f0
 80049cc:	200000dc 	.word	0x200000dc

080049d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
  return uwTick;
 80049d4:	4b03      	ldr	r3, [pc, #12]	; (80049e4 <HAL_GetTick+0x14>)
 80049d6:	681b      	ldr	r3, [r3, #0]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	200079f0 	.word	0x200079f0

080049e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049f8:	4b0c      	ldr	r3, [pc, #48]	; (8004a2c <__NVIC_SetPriorityGrouping+0x44>)
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a04:	4013      	ands	r3, r2
 8004a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a1a:	4a04      	ldr	r2, [pc, #16]	; (8004a2c <__NVIC_SetPriorityGrouping+0x44>)
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	60d3      	str	r3, [r2, #12]
}
 8004a20:	bf00      	nop
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	e000ed00 	.word	0xe000ed00

08004a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a34:	4b04      	ldr	r3, [pc, #16]	; (8004a48 <__NVIC_GetPriorityGrouping+0x18>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	0a1b      	lsrs	r3, r3, #8
 8004a3a:	f003 0307 	and.w	r3, r3, #7
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	e000ed00 	.word	0xe000ed00

08004a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	4603      	mov	r3, r0
 8004a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	db0b      	blt.n	8004a76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a5e:	4909      	ldr	r1, [pc, #36]	; (8004a84 <__NVIC_EnableIRQ+0x38>)
 8004a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a64:	095b      	lsrs	r3, r3, #5
 8004a66:	79fa      	ldrb	r2, [r7, #7]
 8004a68:	f002 021f 	and.w	r2, r2, #31
 8004a6c:	2001      	movs	r0, #1
 8004a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8004a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	e000e100 	.word	0xe000e100

08004a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	4603      	mov	r3, r0
 8004a90:	6039      	str	r1, [r7, #0]
 8004a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	db0a      	blt.n	8004ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a9c:	490d      	ldr	r1, [pc, #52]	; (8004ad4 <__NVIC_SetPriority+0x4c>)
 8004a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	b2d2      	uxtb	r2, r2
 8004aa6:	0112      	lsls	r2, r2, #4
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	440b      	add	r3, r1
 8004aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ab0:	e00a      	b.n	8004ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ab2:	4909      	ldr	r1, [pc, #36]	; (8004ad8 <__NVIC_SetPriority+0x50>)
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	f003 030f 	and.w	r3, r3, #15
 8004aba:	3b04      	subs	r3, #4
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	b2d2      	uxtb	r2, r2
 8004ac0:	0112      	lsls	r2, r2, #4
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	761a      	strb	r2, [r3, #24]
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	e000e100 	.word	0xe000e100
 8004ad8:	e000ed00 	.word	0xe000ed00

08004adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b089      	sub	sp, #36	; 0x24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	f1c3 0307 	rsb	r3, r3, #7
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	bf28      	it	cs
 8004afa:	2304      	movcs	r3, #4
 8004afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	3304      	adds	r3, #4
 8004b02:	2b06      	cmp	r3, #6
 8004b04:	d902      	bls.n	8004b0c <NVIC_EncodePriority+0x30>
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	3b03      	subs	r3, #3
 8004b0a:	e000      	b.n	8004b0e <NVIC_EncodePriority+0x32>
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b10:	2201      	movs	r2, #1
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	fa02 f303 	lsl.w	r3, r2, r3
 8004b18:	1e5a      	subs	r2, r3, #1
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	401a      	ands	r2, r3
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b22:	2101      	movs	r1, #1
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2a:	1e59      	subs	r1, r3, #1
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b30:	4313      	orrs	r3, r2
         );
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3724      	adds	r7, #36	; 0x24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b082      	sub	sp, #8
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7ff ff4e 	bl	80049e8 <__NVIC_SetPriorityGrouping>
}
 8004b4c:	bf00      	nop
 8004b4e:	3708      	adds	r7, #8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
 8004b60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004b62:	2300      	movs	r3, #0
 8004b64:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b66:	f7ff ff63 	bl	8004a30 <__NVIC_GetPriorityGrouping>
 8004b6a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	6978      	ldr	r0, [r7, #20]
 8004b72:	f7ff ffb3 	bl	8004adc <NVIC_EncodePriority>
 8004b76:	4602      	mov	r2, r0
 8004b78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b7c:	4611      	mov	r1, r2
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7ff ff82 	bl	8004a88 <__NVIC_SetPriority>
}
 8004b84:	bf00      	nop
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7ff ff56 	bl	8004a4c <__NVIC_EnableIRQ>
}
 8004ba0:	bf00      	nop
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b087      	sub	sp, #28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bb6:	e154      	b.n	8004e62 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 8146 	beq.w	8004e5c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d003      	beq.n	8004be0 <HAL_GPIO_Init+0x38>
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2b12      	cmp	r3, #18
 8004bde:	d123      	bne.n	8004c28 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	08da      	lsrs	r2, r3, #3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3208      	adds	r2, #8
 8004be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	220f      	movs	r2, #15
 8004bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfc:	43db      	mvns	r3, r3
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	4013      	ands	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	691a      	ldr	r2, [r3, #16]
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f003 0307 	and.w	r3, r3, #7
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	fa02 f303 	lsl.w	r3, r2, r3
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	08da      	lsrs	r2, r3, #3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	3208      	adds	r2, #8
 8004c22:	6939      	ldr	r1, [r7, #16]
 8004c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	2203      	movs	r2, #3
 8004c34:	fa02 f303 	lsl.w	r3, r2, r3
 8004c38:	43db      	mvns	r3, r3
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f003 0203 	and.w	r2, r3, #3
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d00b      	beq.n	8004c7c <HAL_GPIO_Init+0xd4>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d007      	beq.n	8004c7c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c70:	2b11      	cmp	r3, #17
 8004c72:	d003      	beq.n	8004c7c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	2b12      	cmp	r3, #18
 8004c7a:	d130      	bne.n	8004cde <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	2203      	movs	r2, #3
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	43db      	mvns	r3, r3
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	4013      	ands	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	68da      	ldr	r2, [r3, #12]
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	091b      	lsrs	r3, r3, #4
 8004cc8:	f003 0201 	and.w	r2, r3, #1
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	2203      	movs	r2, #3
 8004cea:	fa02 f303 	lsl.w	r3, r2, r3
 8004cee:	43db      	mvns	r3, r3
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	689a      	ldr	r2, [r3, #8]
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f000 80a0 	beq.w	8004e5c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d1c:	4a58      	ldr	r2, [pc, #352]	; (8004e80 <HAL_GPIO_Init+0x2d8>)
 8004d1e:	4b58      	ldr	r3, [pc, #352]	; (8004e80 <HAL_GPIO_Init+0x2d8>)
 8004d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d22:	f043 0301 	orr.w	r3, r3, #1
 8004d26:	6613      	str	r3, [r2, #96]	; 0x60
 8004d28:	4b55      	ldr	r3, [pc, #340]	; (8004e80 <HAL_GPIO_Init+0x2d8>)
 8004d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	60bb      	str	r3, [r7, #8]
 8004d32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004d34:	4a53      	ldr	r2, [pc, #332]	; (8004e84 <HAL_GPIO_Init+0x2dc>)
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	089b      	lsrs	r3, r3, #2
 8004d3a:	3302      	adds	r3, #2
 8004d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f003 0303 	and.w	r3, r3, #3
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	220f      	movs	r2, #15
 8004d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d50:	43db      	mvns	r3, r3
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	4013      	ands	r3, r2
 8004d56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d5e:	d019      	beq.n	8004d94 <HAL_GPIO_Init+0x1ec>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a49      	ldr	r2, [pc, #292]	; (8004e88 <HAL_GPIO_Init+0x2e0>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d013      	beq.n	8004d90 <HAL_GPIO_Init+0x1e8>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a48      	ldr	r2, [pc, #288]	; (8004e8c <HAL_GPIO_Init+0x2e4>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d00d      	beq.n	8004d8c <HAL_GPIO_Init+0x1e4>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a47      	ldr	r2, [pc, #284]	; (8004e90 <HAL_GPIO_Init+0x2e8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d007      	beq.n	8004d88 <HAL_GPIO_Init+0x1e0>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a46      	ldr	r2, [pc, #280]	; (8004e94 <HAL_GPIO_Init+0x2ec>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d101      	bne.n	8004d84 <HAL_GPIO_Init+0x1dc>
 8004d80:	2304      	movs	r3, #4
 8004d82:	e008      	b.n	8004d96 <HAL_GPIO_Init+0x1ee>
 8004d84:	2307      	movs	r3, #7
 8004d86:	e006      	b.n	8004d96 <HAL_GPIO_Init+0x1ee>
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e004      	b.n	8004d96 <HAL_GPIO_Init+0x1ee>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e002      	b.n	8004d96 <HAL_GPIO_Init+0x1ee>
 8004d90:	2301      	movs	r3, #1
 8004d92:	e000      	b.n	8004d96 <HAL_GPIO_Init+0x1ee>
 8004d94:	2300      	movs	r3, #0
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	f002 0203 	and.w	r2, r2, #3
 8004d9c:	0092      	lsls	r2, r2, #2
 8004d9e:	4093      	lsls	r3, r2
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004da6:	4937      	ldr	r1, [pc, #220]	; (8004e84 <HAL_GPIO_Init+0x2dc>)
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	089b      	lsrs	r3, r3, #2
 8004dac:	3302      	adds	r3, #2
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004db4:	4b38      	ldr	r3, [pc, #224]	; (8004e98 <HAL_GPIO_Init+0x2f0>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	43db      	mvns	r3, r3
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d003      	beq.n	8004dd8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004dd8:	4a2f      	ldr	r2, [pc, #188]	; (8004e98 <HAL_GPIO_Init+0x2f0>)
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004dde:	4b2e      	ldr	r3, [pc, #184]	; (8004e98 <HAL_GPIO_Init+0x2f0>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	43db      	mvns	r3, r3
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	4013      	ands	r3, r2
 8004dec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e02:	4a25      	ldr	r2, [pc, #148]	; (8004e98 <HAL_GPIO_Init+0x2f0>)
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e08:	4b23      	ldr	r3, [pc, #140]	; (8004e98 <HAL_GPIO_Init+0x2f0>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	43db      	mvns	r3, r3
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	4013      	ands	r3, r2
 8004e16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e2c:	4a1a      	ldr	r2, [pc, #104]	; (8004e98 <HAL_GPIO_Init+0x2f0>)
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e32:	4b19      	ldr	r3, [pc, #100]	; (8004e98 <HAL_GPIO_Init+0x2f0>)
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e56:	4a10      	ldr	r2, [pc, #64]	; (8004e98 <HAL_GPIO_Init+0x2f0>)
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	3301      	adds	r3, #1
 8004e60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	fa22 f303 	lsr.w	r3, r2, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f47f aea3 	bne.w	8004bb8 <HAL_GPIO_Init+0x10>
  }
}
 8004e72:	bf00      	nop
 8004e74:	371c      	adds	r7, #28
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40021000 	.word	0x40021000
 8004e84:	40010000 	.word	0x40010000
 8004e88:	48000400 	.word	0x48000400
 8004e8c:	48000800 	.word	0x48000800
 8004e90:	48000c00 	.word	0x48000c00
 8004e94:	48001000 	.word	0x48001000
 8004e98:	40010400 	.word	0x40010400

08004e9c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b087      	sub	sp, #28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004eaa:	e0b7      	b.n	800501c <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004eac:	2201      	movs	r2, #1
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	409a      	lsls	r2, r3
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 80ab 	beq.w	8005016 <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004ec0:	4a5d      	ldr	r2, [pc, #372]	; (8005038 <HAL_GPIO_DeInit+0x19c>)
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	089b      	lsrs	r3, r3, #2
 8004ec6:	3302      	adds	r3, #2
 8004ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ecc:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f003 0303 	and.w	r3, r3, #3
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	220f      	movs	r2, #15
 8004ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004ee8:	d019      	beq.n	8004f1e <HAL_GPIO_DeInit+0x82>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a53      	ldr	r2, [pc, #332]	; (800503c <HAL_GPIO_DeInit+0x1a0>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d013      	beq.n	8004f1a <HAL_GPIO_DeInit+0x7e>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a52      	ldr	r2, [pc, #328]	; (8005040 <HAL_GPIO_DeInit+0x1a4>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d00d      	beq.n	8004f16 <HAL_GPIO_DeInit+0x7a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a51      	ldr	r2, [pc, #324]	; (8005044 <HAL_GPIO_DeInit+0x1a8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d007      	beq.n	8004f12 <HAL_GPIO_DeInit+0x76>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a50      	ldr	r2, [pc, #320]	; (8005048 <HAL_GPIO_DeInit+0x1ac>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d101      	bne.n	8004f0e <HAL_GPIO_DeInit+0x72>
 8004f0a:	2304      	movs	r3, #4
 8004f0c:	e008      	b.n	8004f20 <HAL_GPIO_DeInit+0x84>
 8004f0e:	2307      	movs	r3, #7
 8004f10:	e006      	b.n	8004f20 <HAL_GPIO_DeInit+0x84>
 8004f12:	2303      	movs	r3, #3
 8004f14:	e004      	b.n	8004f20 <HAL_GPIO_DeInit+0x84>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e002      	b.n	8004f20 <HAL_GPIO_DeInit+0x84>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e000      	b.n	8004f20 <HAL_GPIO_DeInit+0x84>
 8004f1e:	2300      	movs	r3, #0
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	f002 0203 	and.w	r2, r2, #3
 8004f26:	0092      	lsls	r2, r2, #2
 8004f28:	fa03 f202 	lsl.w	r2, r3, r2
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d132      	bne.n	8004f98 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004f32:	4946      	ldr	r1, [pc, #280]	; (800504c <HAL_GPIO_DeInit+0x1b0>)
 8004f34:	4b45      	ldr	r3, [pc, #276]	; (800504c <HAL_GPIO_DeInit+0x1b0>)
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	43db      	mvns	r3, r3
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004f40:	4942      	ldr	r1, [pc, #264]	; (800504c <HAL_GPIO_DeInit+0x1b0>)
 8004f42:	4b42      	ldr	r3, [pc, #264]	; (800504c <HAL_GPIO_DeInit+0x1b0>)
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004f4e:	493f      	ldr	r1, [pc, #252]	; (800504c <HAL_GPIO_DeInit+0x1b0>)
 8004f50:	4b3e      	ldr	r3, [pc, #248]	; (800504c <HAL_GPIO_DeInit+0x1b0>)
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	43db      	mvns	r3, r3
 8004f58:	4013      	ands	r3, r2
 8004f5a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8004f5c:	493b      	ldr	r1, [pc, #236]	; (800504c <HAL_GPIO_DeInit+0x1b0>)
 8004f5e:	4b3b      	ldr	r3, [pc, #236]	; (800504c <HAL_GPIO_DeInit+0x1b0>)
 8004f60:	68da      	ldr	r2, [r3, #12]
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	43db      	mvns	r3, r3
 8004f66:	4013      	ands	r3, r2
 8004f68:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f003 0303 	and.w	r3, r3, #3
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	220f      	movs	r2, #15
 8004f74:	fa02 f303 	lsl.w	r3, r2, r3
 8004f78:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004f7a:	482f      	ldr	r0, [pc, #188]	; (8005038 <HAL_GPIO_DeInit+0x19c>)
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	089b      	lsrs	r3, r3, #2
 8004f80:	492d      	ldr	r1, [pc, #180]	; (8005038 <HAL_GPIO_DeInit+0x19c>)
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	0892      	lsrs	r2, r2, #2
 8004f86:	3202      	adds	r2, #2
 8004f88:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	43d2      	mvns	r2, r2
 8004f90:	400a      	ands	r2, r1
 8004f92:	3302      	adds	r3, #2
 8004f94:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	2103      	movs	r1, #3
 8004fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	08da      	lsrs	r2, r3, #3
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	08d9      	lsrs	r1, r3, #3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3108      	adds	r1, #8
 8004fb8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f003 0307 	and.w	r3, r3, #7
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	200f      	movs	r0, #15
 8004fc6:	fa00 f303 	lsl.w	r3, r0, r3
 8004fca:	43db      	mvns	r3, r3
 8004fcc:	4019      	ands	r1, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3208      	adds	r2, #8
 8004fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689a      	ldr	r2, [r3, #8]
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	2103      	movs	r1, #3
 8004fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe4:	43db      	mvns	r3, r3
 8004fe6:	401a      	ands	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	401a      	ands	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68da      	ldr	r2, [r3, #12]
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	2103      	movs	r1, #3
 800500a:	fa01 f303 	lsl.w	r3, r1, r3
 800500e:	43db      	mvns	r3, r3
 8005010:	401a      	ands	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	3301      	adds	r3, #1
 800501a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	fa22 f303 	lsr.w	r3, r2, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	f47f af41 	bne.w	8004eac <HAL_GPIO_DeInit+0x10>
  }
}
 800502a:	bf00      	nop
 800502c:	371c      	adds	r7, #28
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	40010000 	.word	0x40010000
 800503c:	48000400 	.word	0x48000400
 8005040:	48000800 	.word	0x48000800
 8005044:	48000c00 	.word	0x48000c00
 8005048:	48001000 	.word	0x48001000
 800504c:	40010400 	.word	0x40010400

08005050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	460b      	mov	r3, r1
 800505a:	807b      	strh	r3, [r7, #2]
 800505c:	4613      	mov	r3, r2
 800505e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005060:	787b      	ldrb	r3, [r7, #1]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005066:	887a      	ldrh	r2, [r7, #2]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800506c:	e002      	b.n	8005074 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800506e:	887a      	ldrh	r2, [r7, #2]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	460b      	mov	r3, r1
 800508a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	695a      	ldr	r2, [r3, #20]
 8005090:	887b      	ldrh	r3, [r7, #2]
 8005092:	4013      	ands	r3, r2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d003      	beq.n	80050a0 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005098:	887a      	ldrh	r2, [r7, #2]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800509e:	e002      	b.n	80050a6 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80050a0:	887a      	ldrh	r2, [r7, #2]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	619a      	str	r2, [r3, #24]
}
 80050a6:	bf00      	nop
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b082      	sub	sp, #8
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d101      	bne.n	80050c4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e080      	b.n	80051c6 <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d106      	bne.n	80050de <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f8a7 	bl	800522c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2224      	movs	r2, #36	; 0x24
 80050e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6812      	ldr	r2, [r2, #0]
 80050ee:	6812      	ldr	r2, [r2, #0]
 80050f0:	f022 0201 	bic.w	r2, r2, #1
 80050f4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	6852      	ldr	r2, [r2, #4]
 80050fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005102:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	6812      	ldr	r2, [r2, #0]
 800510c:	6892      	ldr	r2, [r2, #8]
 800510e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005112:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d107      	bne.n	800512c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6892      	ldr	r2, [r2, #8]
 8005124:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005128:	609a      	str	r2, [r3, #8]
 800512a:	e006      	b.n	800513a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	6892      	ldr	r2, [r2, #8]
 8005134:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005138:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d104      	bne.n	800514c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800514a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800515a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800515e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6812      	ldr	r2, [r2, #0]
 8005168:	68d2      	ldr	r2, [r2, #12]
 800516a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800516e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6911      	ldr	r1, [r2, #16]
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6952      	ldr	r2, [r2, #20]
 800517c:	4311      	orrs	r1, r2
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	6992      	ldr	r2, [r2, #24]
 8005182:	0212      	lsls	r2, r2, #8
 8005184:	430a      	orrs	r2, r1
 8005186:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	69d1      	ldr	r1, [r2, #28]
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6a12      	ldr	r2, [r2, #32]
 8005194:	430a      	orrs	r2, r1
 8005196:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6812      	ldr	r2, [r2, #0]
 80051a0:	6812      	ldr	r2, [r2, #0]
 80051a2:	f042 0201 	orr.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b082      	sub	sp, #8
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d101      	bne.n	80051e0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e021      	b.n	8005224 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2224      	movs	r2, #36	; 0x24
 80051e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6812      	ldr	r2, [r2, #0]
 80051f0:	6812      	ldr	r2, [r2, #0]
 80051f2:	f022 0201 	bic.w	r2, r2, #1
 80051f6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f821 	bl	8005240 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af02      	add	r7, sp, #8
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	4608      	mov	r0, r1
 800525e:	4611      	mov	r1, r2
 8005260:	461a      	mov	r2, r3
 8005262:	4603      	mov	r3, r0
 8005264:	817b      	strh	r3, [r7, #10]
 8005266:	460b      	mov	r3, r1
 8005268:	813b      	strh	r3, [r7, #8]
 800526a:	4613      	mov	r3, r2
 800526c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b20      	cmp	r3, #32
 8005278:	f040 80f9 	bne.w	800546e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <HAL_I2C_Mem_Write+0x34>
 8005282:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005284:	2b00      	cmp	r3, #0
 8005286:	d105      	bne.n	8005294 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800528e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e0ed      	b.n	8005470 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800529a:	2b01      	cmp	r3, #1
 800529c:	d101      	bne.n	80052a2 <HAL_I2C_Mem_Write+0x4e>
 800529e:	2302      	movs	r3, #2
 80052a0:	e0e6      	b.n	8005470 <HAL_I2C_Mem_Write+0x21c>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80052aa:	f7ff fb91 	bl	80049d0 <HAL_GetTick>
 80052ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	2319      	movs	r3, #25
 80052b6:	2201      	movs	r2, #1
 80052b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 fadd 	bl	800587c <I2C_WaitOnFlagUntilTimeout>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d001      	beq.n	80052cc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e0d1      	b.n	8005470 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2221      	movs	r2, #33	; 0x21
 80052d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2240      	movs	r2, #64	; 0x40
 80052d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6a3a      	ldr	r2, [r7, #32]
 80052e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80052ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052f4:	88f8      	ldrh	r0, [r7, #6]
 80052f6:	893a      	ldrh	r2, [r7, #8]
 80052f8:	8979      	ldrh	r1, [r7, #10]
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	9301      	str	r3, [sp, #4]
 80052fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	4603      	mov	r3, r0
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 f9ed 	bl	80056e4 <I2C_RequestMemoryWrite>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d005      	beq.n	800531c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e0a9      	b.n	8005470 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005320:	b29b      	uxth	r3, r3
 8005322:	2bff      	cmp	r3, #255	; 0xff
 8005324:	d90e      	bls.n	8005344 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	22ff      	movs	r2, #255	; 0xff
 800532a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005330:	b2da      	uxtb	r2, r3
 8005332:	8979      	ldrh	r1, [r7, #10]
 8005334:	2300      	movs	r3, #0
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f000 fbbf 	bl	8005ac0 <I2C_TransferConfig>
 8005342:	e00f      	b.n	8005364 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005348:	b29a      	uxth	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005352:	b2da      	uxtb	r2, r3
 8005354:	8979      	ldrh	r1, [r7, #10]
 8005356:	2300      	movs	r3, #0
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f000 fbae 	bl	8005ac0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 fac7 	bl	80058fc <I2C_WaitOnTXISFlagUntilTimeout>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e07b      	b.n	8005470 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005380:	7812      	ldrb	r2, [r2, #0]
 8005382:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	1c5a      	adds	r2, r3, #1
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005392:	b29b      	uxth	r3, r3
 8005394:	3b01      	subs	r3, #1
 8005396:	b29a      	uxth	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a0:	3b01      	subs	r3, #1
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d034      	beq.n	800541c <HAL_I2C_Mem_Write+0x1c8>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d130      	bne.n	800541c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c0:	2200      	movs	r2, #0
 80053c2:	2180      	movs	r1, #128	; 0x80
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f000 fa59 	bl	800587c <I2C_WaitOnFlagUntilTimeout>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e04d      	b.n	8005470 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d8:	b29b      	uxth	r3, r3
 80053da:	2bff      	cmp	r3, #255	; 0xff
 80053dc:	d90e      	bls.n	80053fc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	22ff      	movs	r2, #255	; 0xff
 80053e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	8979      	ldrh	r1, [r7, #10]
 80053ec:	2300      	movs	r3, #0
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 fb63 	bl	8005ac0 <I2C_TransferConfig>
 80053fa:	e00f      	b.n	800541c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005400:	b29a      	uxth	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800540a:	b2da      	uxtb	r2, r3
 800540c:	8979      	ldrh	r1, [r7, #10]
 800540e:	2300      	movs	r3, #0
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 fb52 	bl	8005ac0 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005420:	b29b      	uxth	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d19e      	bne.n	8005364 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 faa6 	bl	800597c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e01a      	b.n	8005470 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2220      	movs	r2, #32
 8005440:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6859      	ldr	r1, [r3, #4]
 800544c:	4b0a      	ldr	r3, [pc, #40]	; (8005478 <HAL_I2C_Mem_Write+0x224>)
 800544e:	400b      	ands	r3, r1
 8005450:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2220      	movs	r2, #32
 8005456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800546a:	2300      	movs	r3, #0
 800546c:	e000      	b.n	8005470 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800546e:	2302      	movs	r3, #2
  }
}
 8005470:	4618      	mov	r0, r3
 8005472:	3718      	adds	r7, #24
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	fe00e800 	.word	0xfe00e800

0800547c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b088      	sub	sp, #32
 8005480:	af02      	add	r7, sp, #8
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	4608      	mov	r0, r1
 8005486:	4611      	mov	r1, r2
 8005488:	461a      	mov	r2, r3
 800548a:	4603      	mov	r3, r0
 800548c:	817b      	strh	r3, [r7, #10]
 800548e:	460b      	mov	r3, r1
 8005490:	813b      	strh	r3, [r7, #8]
 8005492:	4613      	mov	r3, r2
 8005494:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b20      	cmp	r3, #32
 80054a0:	f040 80fd 	bne.w	800569e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <HAL_I2C_Mem_Read+0x34>
 80054aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d105      	bne.n	80054bc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e0f1      	b.n	80056a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d101      	bne.n	80054ca <HAL_I2C_Mem_Read+0x4e>
 80054c6:	2302      	movs	r3, #2
 80054c8:	e0ea      	b.n	80056a0 <HAL_I2C_Mem_Read+0x224>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80054d2:	f7ff fa7d 	bl	80049d0 <HAL_GetTick>
 80054d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	2319      	movs	r3, #25
 80054de:	2201      	movs	r2, #1
 80054e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f000 f9c9 	bl	800587c <I2C_WaitOnFlagUntilTimeout>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e0d5      	b.n	80056a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2222      	movs	r2, #34	; 0x22
 80054f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2240      	movs	r2, #64	; 0x40
 8005500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6a3a      	ldr	r2, [r7, #32]
 800550e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005514:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800551c:	88f8      	ldrh	r0, [r7, #6]
 800551e:	893a      	ldrh	r2, [r7, #8]
 8005520:	8979      	ldrh	r1, [r7, #10]
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	9301      	str	r3, [sp, #4]
 8005526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	4603      	mov	r3, r0
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 f92d 	bl	800578c <I2C_RequestMemoryRead>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d005      	beq.n	8005544 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e0ad      	b.n	80056a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005548:	b29b      	uxth	r3, r3
 800554a:	2bff      	cmp	r3, #255	; 0xff
 800554c:	d90e      	bls.n	800556c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	22ff      	movs	r2, #255	; 0xff
 8005552:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005558:	b2da      	uxtb	r2, r3
 800555a:	8979      	ldrh	r1, [r7, #10]
 800555c:	4b52      	ldr	r3, [pc, #328]	; (80056a8 <HAL_I2C_Mem_Read+0x22c>)
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 faab 	bl	8005ac0 <I2C_TransferConfig>
 800556a:	e00f      	b.n	800558c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005570:	b29a      	uxth	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800557a:	b2da      	uxtb	r2, r3
 800557c:	8979      	ldrh	r1, [r7, #10]
 800557e:	4b4a      	ldr	r3, [pc, #296]	; (80056a8 <HAL_I2C_Mem_Read+0x22c>)
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 fa9a 	bl	8005ac0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005592:	2200      	movs	r2, #0
 8005594:	2104      	movs	r1, #4
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 f970 	bl	800587c <I2C_WaitOnFlagUntilTimeout>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e07c      	b.n	80056a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	6812      	ldr	r2, [r2, #0]
 80055ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055b0:	b2d2      	uxtb	r2, r2
 80055b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	1c5a      	adds	r2, r3, #1
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c2:	3b01      	subs	r3, #1
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055dc:	b29b      	uxth	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d034      	beq.n	800564c <HAL_I2C_Mem_Read+0x1d0>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d130      	bne.n	800564c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f0:	2200      	movs	r2, #0
 80055f2:	2180      	movs	r1, #128	; 0x80
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f000 f941 	bl	800587c <I2C_WaitOnFlagUntilTimeout>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e04d      	b.n	80056a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005608:	b29b      	uxth	r3, r3
 800560a:	2bff      	cmp	r3, #255	; 0xff
 800560c:	d90e      	bls.n	800562c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	22ff      	movs	r2, #255	; 0xff
 8005612:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005618:	b2da      	uxtb	r2, r3
 800561a:	8979      	ldrh	r1, [r7, #10]
 800561c:	2300      	movs	r3, #0
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 fa4b 	bl	8005ac0 <I2C_TransferConfig>
 800562a:	e00f      	b.n	800564c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005630:	b29a      	uxth	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800563a:	b2da      	uxtb	r2, r3
 800563c:	8979      	ldrh	r1, [r7, #10]
 800563e:	2300      	movs	r3, #0
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 fa3a 	bl	8005ac0 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005650:	b29b      	uxth	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d19a      	bne.n	800558c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 f98e 	bl	800597c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e01a      	b.n	80056a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2220      	movs	r2, #32
 8005670:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	6859      	ldr	r1, [r3, #4]
 800567c:	4b0b      	ldr	r3, [pc, #44]	; (80056ac <HAL_I2C_Mem_Read+0x230>)
 800567e:	400b      	ands	r3, r1
 8005680:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2220      	movs	r2, #32
 8005686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800569a:	2300      	movs	r3, #0
 800569c:	e000      	b.n	80056a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800569e:	2302      	movs	r3, #2
  }
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3718      	adds	r7, #24
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	80002400 	.word	0x80002400
 80056ac:	fe00e800 	.word	0xfe00e800

080056b0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056be:	b2db      	uxtb	r3, r3
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
* @retval I2C Error Code
*/
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80056d8:	4618      	mov	r0, r3
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af02      	add	r7, sp, #8
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	4608      	mov	r0, r1
 80056ee:	4611      	mov	r1, r2
 80056f0:	461a      	mov	r2, r3
 80056f2:	4603      	mov	r3, r0
 80056f4:	817b      	strh	r3, [r7, #10]
 80056f6:	460b      	mov	r3, r1
 80056f8:	813b      	strh	r3, [r7, #8]
 80056fa:	4613      	mov	r3, r2
 80056fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80056fe:	88fb      	ldrh	r3, [r7, #6]
 8005700:	b2da      	uxtb	r2, r3
 8005702:	8979      	ldrh	r1, [r7, #10]
 8005704:	4b20      	ldr	r3, [pc, #128]	; (8005788 <I2C_RequestMemoryWrite+0xa4>)
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 f9d7 	bl	8005ac0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005712:	69fa      	ldr	r2, [r7, #28]
 8005714:	69b9      	ldr	r1, [r7, #24]
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f000 f8f0 	bl	80058fc <I2C_WaitOnTXISFlagUntilTimeout>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e02c      	b.n	8005780 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005726:	88fb      	ldrh	r3, [r7, #6]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d105      	bne.n	8005738 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	893a      	ldrh	r2, [r7, #8]
 8005732:	b2d2      	uxtb	r2, r2
 8005734:	629a      	str	r2, [r3, #40]	; 0x28
 8005736:	e015      	b.n	8005764 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	893a      	ldrh	r2, [r7, #8]
 800573e:	0a12      	lsrs	r2, r2, #8
 8005740:	b292      	uxth	r2, r2
 8005742:	b2d2      	uxtb	r2, r2
 8005744:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005746:	69fa      	ldr	r2, [r7, #28]
 8005748:	69b9      	ldr	r1, [r7, #24]
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f000 f8d6 	bl	80058fc <I2C_WaitOnTXISFlagUntilTimeout>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e012      	b.n	8005780 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	893a      	ldrh	r2, [r7, #8]
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	2200      	movs	r2, #0
 800576c:	2180      	movs	r1, #128	; 0x80
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f000 f884 	bl	800587c <I2C_WaitOnFlagUntilTimeout>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e000      	b.n	8005780 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	80002000 	.word	0x80002000

0800578c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af02      	add	r7, sp, #8
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	4608      	mov	r0, r1
 8005796:	4611      	mov	r1, r2
 8005798:	461a      	mov	r2, r3
 800579a:	4603      	mov	r3, r0
 800579c:	817b      	strh	r3, [r7, #10]
 800579e:	460b      	mov	r3, r1
 80057a0:	813b      	strh	r3, [r7, #8]
 80057a2:	4613      	mov	r3, r2
 80057a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80057a6:	88fb      	ldrh	r3, [r7, #6]
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	8979      	ldrh	r1, [r7, #10]
 80057ac:	4b20      	ldr	r3, [pc, #128]	; (8005830 <I2C_RequestMemoryRead+0xa4>)
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	2300      	movs	r3, #0
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f000 f984 	bl	8005ac0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057b8:	69fa      	ldr	r2, [r7, #28]
 80057ba:	69b9      	ldr	r1, [r7, #24]
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 f89d 	bl	80058fc <I2C_WaitOnTXISFlagUntilTimeout>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e02c      	b.n	8005826 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057cc:	88fb      	ldrh	r3, [r7, #6]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d105      	bne.n	80057de <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	893a      	ldrh	r2, [r7, #8]
 80057d8:	b2d2      	uxtb	r2, r2
 80057da:	629a      	str	r2, [r3, #40]	; 0x28
 80057dc:	e015      	b.n	800580a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	893a      	ldrh	r2, [r7, #8]
 80057e4:	0a12      	lsrs	r2, r2, #8
 80057e6:	b292      	uxth	r2, r2
 80057e8:	b2d2      	uxtb	r2, r2
 80057ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057ec:	69fa      	ldr	r2, [r7, #28]
 80057ee:	69b9      	ldr	r1, [r7, #24]
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 f883 	bl	80058fc <I2C_WaitOnTXISFlagUntilTimeout>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e012      	b.n	8005826 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	893a      	ldrh	r2, [r7, #8]
 8005806:	b2d2      	uxtb	r2, r2
 8005808:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	2200      	movs	r2, #0
 8005812:	2140      	movs	r1, #64	; 0x40
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 f831 	bl	800587c <I2C_WaitOnFlagUntilTimeout>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e000      	b.n	8005826 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	80002000 	.word	0x80002000

08005834 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b02      	cmp	r3, #2
 8005848:	d103      	bne.n	8005852 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2200      	movs	r2, #0
 8005850:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b01      	cmp	r3, #1
 800585e:	d007      	beq.n	8005870 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	6812      	ldr	r2, [r2, #0]
 8005868:	6992      	ldr	r2, [r2, #24]
 800586a:	f042 0201 	orr.w	r2, r2, #1
 800586e:	619a      	str	r2, [r3, #24]
  }
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	603b      	str	r3, [r7, #0]
 8005888:	4613      	mov	r3, r2
 800588a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800588c:	e022      	b.n	80058d4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005894:	d01e      	beq.n	80058d4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005896:	f7ff f89b 	bl	80049d0 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	1ad2      	subs	r2, r2, r3
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d802      	bhi.n	80058ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d113      	bne.n	80058d4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b0:	f043 0220 	orr.w	r2, r3, #32
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e00f      	b.n	80058f4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	699a      	ldr	r2, [r3, #24]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	401a      	ands	r2, r3
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	bf0c      	ite	eq
 80058e4:	2301      	moveq	r3, #1
 80058e6:	2300      	movne	r3, #0
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	461a      	mov	r2, r3
 80058ec:	79fb      	ldrb	r3, [r7, #7]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d0cd      	beq.n	800588e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005908:	e02c      	b.n	8005964 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	68b9      	ldr	r1, [r7, #8]
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f000 f870 	bl	80059f4 <I2C_IsAcknowledgeFailed>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e02a      	b.n	8005974 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005924:	d01e      	beq.n	8005964 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005926:	f7ff f853 	bl	80049d0 <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	1ad2      	subs	r2, r2, r3
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	429a      	cmp	r2, r3
 8005934:	d802      	bhi.n	800593c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d113      	bne.n	8005964 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005940:	f043 0220 	orr.w	r2, r3, #32
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2220      	movs	r2, #32
 800594c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e007      	b.n	8005974 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b02      	cmp	r3, #2
 8005970:	d1cb      	bne.n	800590a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005988:	e028      	b.n	80059dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	68b9      	ldr	r1, [r7, #8]
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f000 f830 	bl	80059f4 <I2C_IsAcknowledgeFailed>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e026      	b.n	80059ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800599e:	f7ff f817 	bl	80049d0 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	1ad2      	subs	r2, r2, r3
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d802      	bhi.n	80059b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d113      	bne.n	80059dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b8:	f043 0220 	orr.w	r2, r3, #32
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2220      	movs	r2, #32
 80059c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e007      	b.n	80059ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	f003 0320 	and.w	r3, r3, #32
 80059e6:	2b20      	cmp	r3, #32
 80059e8:	d1cf      	bne.n	800598a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	f003 0310 	and.w	r3, r3, #16
 8005a0a:	2b10      	cmp	r3, #16
 8005a0c:	d151      	bne.n	8005ab2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a0e:	e022      	b.n	8005a56 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a16:	d01e      	beq.n	8005a56 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a18:	f7fe ffda 	bl	80049d0 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	1ad2      	subs	r2, r2, r3
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d802      	bhi.n	8005a2e <I2C_IsAcknowledgeFailed+0x3a>
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d113      	bne.n	8005a56 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a32:	f043 0220 	orr.w	r2, r3, #32
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e02e      	b.n	8005ab4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	f003 0320 	and.w	r3, r3, #32
 8005a60:	2b20      	cmp	r3, #32
 8005a62:	d1d5      	bne.n	8005a10 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2210      	movs	r2, #16
 8005a6a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2220      	movs	r2, #32
 8005a72:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f7ff fedd 	bl	8005834 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6859      	ldr	r1, [r3, #4]
 8005a84:	4b0d      	ldr	r3, [pc, #52]	; (8005abc <I2C_IsAcknowledgeFailed+0xc8>)
 8005a86:	400b      	ands	r3, r1
 8005a88:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a8e:	f043 0204 	orr.w	r2, r3, #4
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e000      	b.n	8005ab4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	fe00e800 	.word	0xfe00e800

08005ac0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	607b      	str	r3, [r7, #4]
 8005aca:	460b      	mov	r3, r1
 8005acc:	817b      	strh	r3, [r7, #10]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6859      	ldr	r1, [r3, #4]
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	0d5b      	lsrs	r3, r3, #21
 8005ae0:	f403 6080 	and.w	r0, r3, #1024	; 0x400
 8005ae4:	4b0b      	ldr	r3, [pc, #44]	; (8005b14 <I2C_TransferConfig+0x54>)
 8005ae6:	4303      	orrs	r3, r0
 8005ae8:	43db      	mvns	r3, r3
 8005aea:	4019      	ands	r1, r3
 8005aec:	897b      	ldrh	r3, [r7, #10]
 8005aee:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8005af2:	7a7b      	ldrb	r3, [r7, #9]
 8005af4:	041b      	lsls	r3, r3, #16
 8005af6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005afa:	4318      	orrs	r0, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4318      	orrs	r0, r3
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	4303      	orrs	r3, r0
 8005b04:	430b      	orrs	r3, r1
 8005b06:	6053      	str	r3, [r2, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005b08:	bf00      	nop
 8005b0a:	3714      	adds	r7, #20
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr
 8005b14:	03ff63ff 	.word	0x03ff63ff

08005b18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b20      	cmp	r3, #32
 8005b2c:	d138      	bne.n	8005ba0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d101      	bne.n	8005b3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005b38:	2302      	movs	r3, #2
 8005b3a:	e032      	b.n	8005ba2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2224      	movs	r2, #36	; 0x24
 8005b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	6812      	ldr	r2, [r2, #0]
 8005b54:	6812      	ldr	r2, [r2, #0]
 8005b56:	f022 0201 	bic.w	r2, r2, #1
 8005b5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	6812      	ldr	r2, [r2, #0]
 8005b64:	6812      	ldr	r2, [r2, #0]
 8005b66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	6812      	ldr	r2, [r2, #0]
 8005b74:	6811      	ldr	r1, [r2, #0]
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6812      	ldr	r2, [r2, #0]
 8005b84:	6812      	ldr	r2, [r2, #0]
 8005b86:	f042 0201 	orr.w	r2, r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	e000      	b.n	8005ba2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ba0:	2302      	movs	r3, #2
  }
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b085      	sub	sp, #20
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b20      	cmp	r3, #32
 8005bc2:	d139      	bne.n	8005c38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d101      	bne.n	8005bd2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005bce:	2302      	movs	r3, #2
 8005bd0:	e033      	b.n	8005c3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2224      	movs	r2, #36	; 0x24
 8005bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	6812      	ldr	r2, [r2, #0]
 8005bea:	6812      	ldr	r2, [r2, #0]
 8005bec:	f022 0201 	bic.w	r2, r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005c00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	021b      	lsls	r3, r3, #8
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	6812      	ldr	r2, [r2, #0]
 8005c1c:	6812      	ldr	r2, [r2, #0]
 8005c1e:	f042 0201 	orr.w	r2, r2, #1
 8005c22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2220      	movs	r2, #32
 8005c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c34:	2300      	movs	r3, #0
 8005c36:	e000      	b.n	8005c3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005c38:	2302      	movs	r3, #2
  }
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
	...

08005c48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005c4c:	4b04      	ldr	r3, [pc, #16]	; (8005c60 <HAL_PWREx_GetVoltageRange+0x18>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	40007000 	.word	0x40007000

08005c64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c72:	d130      	bne.n	8005cd6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c74:	4b23      	ldr	r3, [pc, #140]	; (8005d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c80:	d038      	beq.n	8005cf4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c82:	4a20      	ldr	r2, [pc, #128]	; (8005d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c84:	4b1f      	ldr	r3, [pc, #124]	; (8005d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005c8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c90:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c92:	4b1d      	ldr	r3, [pc, #116]	; (8005d08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2232      	movs	r2, #50	; 0x32
 8005c98:	fb02 f303 	mul.w	r3, r2, r3
 8005c9c:	4a1b      	ldr	r2, [pc, #108]	; (8005d0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca2:	0c9b      	lsrs	r3, r3, #18
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ca8:	e002      	b.n	8005cb0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	3b01      	subs	r3, #1
 8005cae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005cb0:	4b14      	ldr	r3, [pc, #80]	; (8005d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cbc:	d102      	bne.n	8005cc4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1f2      	bne.n	8005caa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005cc4:	4b0f      	ldr	r3, [pc, #60]	; (8005d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cd0:	d110      	bne.n	8005cf4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e00f      	b.n	8005cf6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005cd6:	4b0b      	ldr	r3, [pc, #44]	; (8005d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ce2:	d007      	beq.n	8005cf4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005ce4:	4a07      	ldr	r2, [pc, #28]	; (8005d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ce6:	4b07      	ldr	r3, [pc, #28]	; (8005d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005cee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005cf2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	40007000 	.word	0x40007000
 8005d08:	200000d4 	.word	0x200000d4
 8005d0c:	431bde83 	.word	0x431bde83

08005d10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d101      	bne.n	8005d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e3db      	b.n	80064da <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d22:	4ba4      	ldr	r3, [pc, #656]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f003 030c 	and.w	r3, r3, #12
 8005d2a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d2c:	4ba1      	ldr	r3, [pc, #644]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f003 0303 	and.w	r3, r3, #3
 8005d34:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0310 	and.w	r3, r3, #16
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 80e1 	beq.w	8005f06 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d007      	beq.n	8005d5a <HAL_RCC_OscConfig+0x4a>
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	2b0c      	cmp	r3, #12
 8005d4e:	f040 8088 	bne.w	8005e62 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	f040 8084 	bne.w	8005e62 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d5a:	4b96      	ldr	r3, [pc, #600]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d005      	beq.n	8005d72 <HAL_RCC_OscConfig+0x62>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e3b3      	b.n	80064da <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a1a      	ldr	r2, [r3, #32]
 8005d76:	4b8f      	ldr	r3, [pc, #572]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0308 	and.w	r3, r3, #8
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d004      	beq.n	8005d8c <HAL_RCC_OscConfig+0x7c>
 8005d82:	4b8c      	ldr	r3, [pc, #560]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d8a:	e005      	b.n	8005d98 <HAL_RCC_OscConfig+0x88>
 8005d8c:	4b89      	ldr	r3, [pc, #548]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d92:	091b      	lsrs	r3, r3, #4
 8005d94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d923      	bls.n	8005de4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f000 fd79 	bl	8006898 <RCC_SetFlashLatencyFromMSIRange>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e394      	b.n	80064da <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005db0:	4a80      	ldr	r2, [pc, #512]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005db2:	4b80      	ldr	r3, [pc, #512]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f043 0308 	orr.w	r3, r3, #8
 8005dba:	6013      	str	r3, [r2, #0]
 8005dbc:	497d      	ldr	r1, [pc, #500]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005dbe:	4b7d      	ldr	r3, [pc, #500]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005dce:	4979      	ldr	r1, [pc, #484]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005dd0:	4b78      	ldr	r3, [pc, #480]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	69db      	ldr	r3, [r3, #28]
 8005ddc:	021b      	lsls	r3, r3, #8
 8005dde:	4313      	orrs	r3, r2
 8005de0:	604b      	str	r3, [r1, #4]
 8005de2:	e022      	b.n	8005e2a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005de4:	4a73      	ldr	r2, [pc, #460]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005de6:	4b73      	ldr	r3, [pc, #460]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f043 0308 	orr.w	r3, r3, #8
 8005dee:	6013      	str	r3, [r2, #0]
 8005df0:	4970      	ldr	r1, [pc, #448]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005df2:	4b70      	ldr	r3, [pc, #448]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e02:	496c      	ldr	r1, [pc, #432]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005e04:	4b6b      	ldr	r3, [pc, #428]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	69db      	ldr	r3, [r3, #28]
 8005e10:	021b      	lsls	r3, r3, #8
 8005e12:	4313      	orrs	r3, r2
 8005e14:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 fd3c 	bl	8006898 <RCC_SetFlashLatencyFromMSIRange>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e357      	b.n	80064da <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e2a:	f000 fc41 	bl	80066b0 <HAL_RCC_GetSysClockFreq>
 8005e2e:	4601      	mov	r1, r0
 8005e30:	4b60      	ldr	r3, [pc, #384]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	091b      	lsrs	r3, r3, #4
 8005e36:	f003 030f 	and.w	r3, r3, #15
 8005e3a:	4a5f      	ldr	r2, [pc, #380]	; (8005fb8 <HAL_RCC_OscConfig+0x2a8>)
 8005e3c:	5cd3      	ldrb	r3, [r2, r3]
 8005e3e:	f003 031f 	and.w	r3, r3, #31
 8005e42:	fa21 f303 	lsr.w	r3, r1, r3
 8005e46:	4a5d      	ldr	r2, [pc, #372]	; (8005fbc <HAL_RCC_OscConfig+0x2ac>)
 8005e48:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005e4a:	4b5d      	ldr	r3, [pc, #372]	; (8005fc0 <HAL_RCC_OscConfig+0x2b0>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7fa fe96 	bl	8000b80 <HAL_InitTick>
 8005e54:	4603      	mov	r3, r0
 8005e56:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d052      	beq.n	8005f04 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8005e5e:	7bfb      	ldrb	r3, [r7, #15]
 8005e60:	e33b      	b.n	80064da <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d032      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005e6a:	4a52      	ldr	r2, [pc, #328]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005e6c:	4b51      	ldr	r3, [pc, #324]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f043 0301 	orr.w	r3, r3, #1
 8005e74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005e76:	f7fe fdab 	bl	80049d0 <HAL_GetTick>
 8005e7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e7c:	e008      	b.n	8005e90 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e7e:	f7fe fda7 	bl	80049d0 <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d901      	bls.n	8005e90 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e324      	b.n	80064da <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e90:	4b48      	ldr	r3, [pc, #288]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d0f0      	beq.n	8005e7e <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e9c:	4a45      	ldr	r2, [pc, #276]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005e9e:	4b45      	ldr	r3, [pc, #276]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f043 0308 	orr.w	r3, r3, #8
 8005ea6:	6013      	str	r3, [r2, #0]
 8005ea8:	4942      	ldr	r1, [pc, #264]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005eaa:	4b42      	ldr	r3, [pc, #264]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005eba:	493e      	ldr	r1, [pc, #248]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005ebc:	4b3d      	ldr	r3, [pc, #244]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	69db      	ldr	r3, [r3, #28]
 8005ec8:	021b      	lsls	r3, r3, #8
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	604b      	str	r3, [r1, #4]
 8005ece:	e01a      	b.n	8005f06 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005ed0:	4a38      	ldr	r2, [pc, #224]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005ed2:	4b38      	ldr	r3, [pc, #224]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f023 0301 	bic.w	r3, r3, #1
 8005eda:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005edc:	f7fe fd78 	bl	80049d0 <HAL_GetTick>
 8005ee0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005ee2:	e008      	b.n	8005ef6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ee4:	f7fe fd74 	bl	80049d0 <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d901      	bls.n	8005ef6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e2f1      	b.n	80064da <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005ef6:	4b2f      	ldr	r3, [pc, #188]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0302 	and.w	r3, r3, #2
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1f0      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x1d4>
 8005f02:	e000      	b.n	8005f06 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005f04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d074      	beq.n	8005ffc <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	2b08      	cmp	r3, #8
 8005f16:	d005      	beq.n	8005f24 <HAL_RCC_OscConfig+0x214>
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	2b0c      	cmp	r3, #12
 8005f1c:	d10e      	bne.n	8005f3c <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d10b      	bne.n	8005f3c <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f24:	4b23      	ldr	r3, [pc, #140]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d064      	beq.n	8005ffa <HAL_RCC_OscConfig+0x2ea>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d160      	bne.n	8005ffa <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e2ce      	b.n	80064da <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f44:	d106      	bne.n	8005f54 <HAL_RCC_OscConfig+0x244>
 8005f46:	4a1b      	ldr	r2, [pc, #108]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005f48:	4b1a      	ldr	r3, [pc, #104]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f50:	6013      	str	r3, [r2, #0]
 8005f52:	e01d      	b.n	8005f90 <HAL_RCC_OscConfig+0x280>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f5c:	d10c      	bne.n	8005f78 <HAL_RCC_OscConfig+0x268>
 8005f5e:	4a15      	ldr	r2, [pc, #84]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005f60:	4b14      	ldr	r3, [pc, #80]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f68:	6013      	str	r3, [r2, #0]
 8005f6a:	4a12      	ldr	r2, [pc, #72]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005f6c:	4b11      	ldr	r3, [pc, #68]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	e00b      	b.n	8005f90 <HAL_RCC_OscConfig+0x280>
 8005f78:	4a0e      	ldr	r2, [pc, #56]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005f7a:	4b0e      	ldr	r3, [pc, #56]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f82:	6013      	str	r3, [r2, #0]
 8005f84:	4a0b      	ldr	r2, [pc, #44]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005f86:	4b0b      	ldr	r3, [pc, #44]	; (8005fb4 <HAL_RCC_OscConfig+0x2a4>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d01c      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f98:	f7fe fd1a 	bl	80049d0 <HAL_GetTick>
 8005f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f9e:	e011      	b.n	8005fc4 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fa0:	f7fe fd16 	bl	80049d0 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b64      	cmp	r3, #100	; 0x64
 8005fac:	d90a      	bls.n	8005fc4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e293      	b.n	80064da <HAL_RCC_OscConfig+0x7ca>
 8005fb2:	bf00      	nop
 8005fb4:	40021000 	.word	0x40021000
 8005fb8:	0800a6d0 	.word	0x0800a6d0
 8005fbc:	200000d4 	.word	0x200000d4
 8005fc0:	200000d8 	.word	0x200000d8
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fc4:	4bae      	ldr	r3, [pc, #696]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d0e7      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x290>
 8005fd0:	e014      	b.n	8005ffc <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd2:	f7fe fcfd 	bl	80049d0 <HAL_GetTick>
 8005fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005fd8:	e008      	b.n	8005fec <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fda:	f7fe fcf9 	bl	80049d0 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	2b64      	cmp	r3, #100	; 0x64
 8005fe6:	d901      	bls.n	8005fec <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e276      	b.n	80064da <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005fec:	4ba4      	ldr	r3, [pc, #656]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1f0      	bne.n	8005fda <HAL_RCC_OscConfig+0x2ca>
 8005ff8:	e000      	b.n	8005ffc <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ffa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b00      	cmp	r3, #0
 8006006:	d060      	beq.n	80060ca <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	2b04      	cmp	r3, #4
 800600c:	d005      	beq.n	800601a <HAL_RCC_OscConfig+0x30a>
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	2b0c      	cmp	r3, #12
 8006012:	d119      	bne.n	8006048 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	2b02      	cmp	r3, #2
 8006018:	d116      	bne.n	8006048 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800601a:	4b99      	ldr	r3, [pc, #612]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006022:	2b00      	cmp	r3, #0
 8006024:	d005      	beq.n	8006032 <HAL_RCC_OscConfig+0x322>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e253      	b.n	80064da <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006032:	4993      	ldr	r1, [pc, #588]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 8006034:	4b92      	ldr	r3, [pc, #584]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	061b      	lsls	r3, r3, #24
 8006042:	4313      	orrs	r3, r2
 8006044:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006046:	e040      	b.n	80060ca <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d023      	beq.n	8006098 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006050:	4a8b      	ldr	r2, [pc, #556]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 8006052:	4b8b      	ldr	r3, [pc, #556]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800605a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800605c:	f7fe fcb8 	bl	80049d0 <HAL_GetTick>
 8006060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006062:	e008      	b.n	8006076 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006064:	f7fe fcb4 	bl	80049d0 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2b02      	cmp	r3, #2
 8006070:	d901      	bls.n	8006076 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e231      	b.n	80064da <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006076:	4b82      	ldr	r3, [pc, #520]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800607e:	2b00      	cmp	r3, #0
 8006080:	d0f0      	beq.n	8006064 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006082:	497f      	ldr	r1, [pc, #508]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 8006084:	4b7e      	ldr	r3, [pc, #504]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	061b      	lsls	r3, r3, #24
 8006092:	4313      	orrs	r3, r2
 8006094:	604b      	str	r3, [r1, #4]
 8006096:	e018      	b.n	80060ca <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006098:	4a79      	ldr	r2, [pc, #484]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 800609a:	4b79      	ldr	r3, [pc, #484]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a4:	f7fe fc94 	bl	80049d0 <HAL_GetTick>
 80060a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80060aa:	e008      	b.n	80060be <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060ac:	f7fe fc90 	bl	80049d0 <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d901      	bls.n	80060be <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e20d      	b.n	80064da <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80060be:	4b70      	ldr	r3, [pc, #448]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1f0      	bne.n	80060ac <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0308 	and.w	r3, r3, #8
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d03c      	beq.n	8006150 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d01c      	beq.n	8006118 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060de:	4a68      	ldr	r2, [pc, #416]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 80060e0:	4b67      	ldr	r3, [pc, #412]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 80060e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060e6:	f043 0301 	orr.w	r3, r3, #1
 80060ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ee:	f7fe fc6f 	bl	80049d0 <HAL_GetTick>
 80060f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060f4:	e008      	b.n	8006108 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060f6:	f7fe fc6b 	bl	80049d0 <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	2b02      	cmp	r3, #2
 8006102:	d901      	bls.n	8006108 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e1e8      	b.n	80064da <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006108:	4b5d      	ldr	r3, [pc, #372]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 800610a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	2b00      	cmp	r3, #0
 8006114:	d0ef      	beq.n	80060f6 <HAL_RCC_OscConfig+0x3e6>
 8006116:	e01b      	b.n	8006150 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006118:	4a59      	ldr	r2, [pc, #356]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 800611a:	4b59      	ldr	r3, [pc, #356]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 800611c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006120:	f023 0301 	bic.w	r3, r3, #1
 8006124:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006128:	f7fe fc52 	bl	80049d0 <HAL_GetTick>
 800612c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800612e:	e008      	b.n	8006142 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006130:	f7fe fc4e 	bl	80049d0 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	2b02      	cmp	r3, #2
 800613c:	d901      	bls.n	8006142 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e1cb      	b.n	80064da <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006142:	4b4f      	ldr	r3, [pc, #316]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 8006144:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1ef      	bne.n	8006130 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0304 	and.w	r3, r3, #4
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 80a5 	beq.w	80062a8 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800615e:	2300      	movs	r3, #0
 8006160:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006162:	4b47      	ldr	r3, [pc, #284]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 8006164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10d      	bne.n	800618a <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800616e:	4a44      	ldr	r2, [pc, #272]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 8006170:	4b43      	ldr	r3, [pc, #268]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 8006172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006178:	6593      	str	r3, [r2, #88]	; 0x58
 800617a:	4b41      	ldr	r3, [pc, #260]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 800617c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800617e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006182:	60bb      	str	r3, [r7, #8]
 8006184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006186:	2301      	movs	r3, #1
 8006188:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800618a:	4b3e      	ldr	r3, [pc, #248]	; (8006284 <HAL_RCC_OscConfig+0x574>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006192:	2b00      	cmp	r3, #0
 8006194:	d118      	bne.n	80061c8 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006196:	4a3b      	ldr	r2, [pc, #236]	; (8006284 <HAL_RCC_OscConfig+0x574>)
 8006198:	4b3a      	ldr	r3, [pc, #232]	; (8006284 <HAL_RCC_OscConfig+0x574>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061a2:	f7fe fc15 	bl	80049d0 <HAL_GetTick>
 80061a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061a8:	e008      	b.n	80061bc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061aa:	f7fe fc11 	bl	80049d0 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d901      	bls.n	80061bc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e18e      	b.n	80064da <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061bc:	4b31      	ldr	r3, [pc, #196]	; (8006284 <HAL_RCC_OscConfig+0x574>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d0f0      	beq.n	80061aa <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d108      	bne.n	80061e2 <HAL_RCC_OscConfig+0x4d2>
 80061d0:	4a2b      	ldr	r2, [pc, #172]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 80061d2:	4b2b      	ldr	r3, [pc, #172]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 80061d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061d8:	f043 0301 	orr.w	r3, r3, #1
 80061dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061e0:	e024      	b.n	800622c <HAL_RCC_OscConfig+0x51c>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	2b05      	cmp	r3, #5
 80061e8:	d110      	bne.n	800620c <HAL_RCC_OscConfig+0x4fc>
 80061ea:	4a25      	ldr	r2, [pc, #148]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 80061ec:	4b24      	ldr	r3, [pc, #144]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 80061ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f2:	f043 0304 	orr.w	r3, r3, #4
 80061f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061fa:	4a21      	ldr	r2, [pc, #132]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 80061fc:	4b20      	ldr	r3, [pc, #128]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 80061fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006202:	f043 0301 	orr.w	r3, r3, #1
 8006206:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800620a:	e00f      	b.n	800622c <HAL_RCC_OscConfig+0x51c>
 800620c:	4a1c      	ldr	r2, [pc, #112]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 800620e:	4b1c      	ldr	r3, [pc, #112]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 8006210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006214:	f023 0301 	bic.w	r3, r3, #1
 8006218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800621c:	4a18      	ldr	r2, [pc, #96]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 800621e:	4b18      	ldr	r3, [pc, #96]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 8006220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006224:	f023 0304 	bic.w	r3, r3, #4
 8006228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d016      	beq.n	8006262 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006234:	f7fe fbcc 	bl	80049d0 <HAL_GetTick>
 8006238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800623a:	e00a      	b.n	8006252 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800623c:	f7fe fbc8 	bl	80049d0 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	f241 3288 	movw	r2, #5000	; 0x1388
 800624a:	4293      	cmp	r3, r2
 800624c:	d901      	bls.n	8006252 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e143      	b.n	80064da <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006252:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <HAL_RCC_OscConfig+0x570>)
 8006254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006258:	f003 0302 	and.w	r3, r3, #2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d0ed      	beq.n	800623c <HAL_RCC_OscConfig+0x52c>
 8006260:	e019      	b.n	8006296 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006262:	f7fe fbb5 	bl	80049d0 <HAL_GetTick>
 8006266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006268:	e00e      	b.n	8006288 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800626a:	f7fe fbb1 	bl	80049d0 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	f241 3288 	movw	r2, #5000	; 0x1388
 8006278:	4293      	cmp	r3, r2
 800627a:	d905      	bls.n	8006288 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e12c      	b.n	80064da <HAL_RCC_OscConfig+0x7ca>
 8006280:	40021000 	.word	0x40021000
 8006284:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006288:	4b96      	ldr	r3, [pc, #600]	; (80064e4 <HAL_RCC_OscConfig+0x7d4>)
 800628a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1e9      	bne.n	800626a <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006296:	7ffb      	ldrb	r3, [r7, #31]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d105      	bne.n	80062a8 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800629c:	4a91      	ldr	r2, [pc, #580]	; (80064e4 <HAL_RCC_OscConfig+0x7d4>)
 800629e:	4b91      	ldr	r3, [pc, #580]	; (80064e4 <HAL_RCC_OscConfig+0x7d4>)
 80062a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0320 	and.w	r3, r3, #32
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d03c      	beq.n	800632e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d01c      	beq.n	80062f6 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80062bc:	4a89      	ldr	r2, [pc, #548]	; (80064e4 <HAL_RCC_OscConfig+0x7d4>)
 80062be:	4b89      	ldr	r3, [pc, #548]	; (80064e4 <HAL_RCC_OscConfig+0x7d4>)
 80062c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062c4:	f043 0301 	orr.w	r3, r3, #1
 80062c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062cc:	f7fe fb80 	bl	80049d0 <HAL_GetTick>
 80062d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80062d2:	e008      	b.n	80062e6 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062d4:	f7fe fb7c 	bl	80049d0 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e0f9      	b.n	80064da <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80062e6:	4b7f      	ldr	r3, [pc, #508]	; (80064e4 <HAL_RCC_OscConfig+0x7d4>)
 80062e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d0ef      	beq.n	80062d4 <HAL_RCC_OscConfig+0x5c4>
 80062f4:	e01b      	b.n	800632e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80062f6:	4a7b      	ldr	r2, [pc, #492]	; (80064e4 <HAL_RCC_OscConfig+0x7d4>)
 80062f8:	4b7a      	ldr	r3, [pc, #488]	; (80064e4 <HAL_RCC_OscConfig+0x7d4>)
 80062fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062fe:	f023 0301 	bic.w	r3, r3, #1
 8006302:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006306:	f7fe fb63 	bl	80049d0 <HAL_GetTick>
 800630a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800630c:	e008      	b.n	8006320 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800630e:	f7fe fb5f 	bl	80049d0 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	2b02      	cmp	r3, #2
 800631a:	d901      	bls.n	8006320 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e0dc      	b.n	80064da <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006320:	4b70      	ldr	r3, [pc, #448]	; (80064e4 <HAL_RCC_OscConfig+0x7d4>)
 8006322:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1ef      	bne.n	800630e <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 80d0 	beq.w	80064d8 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	2b0c      	cmp	r3, #12
 800633c:	f000 808d 	beq.w	800645a <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006344:	2b02      	cmp	r3, #2
 8006346:	d15a      	bne.n	80063fe <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006348:	4a66      	ldr	r2, [pc, #408]	; (80064e4 <HAL_RCC_OscConfig+0x7d4>)
 800634a:	4b66      	ldr	r3, [pc, #408]	; (80064e4 <HAL_RCC_OscConfig+0x7d4>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006354:	f7fe fb3c 	bl	80049d0 <HAL_GetTick>
 8006358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800635a:	e008      	b.n	800636e <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800635c:	f7fe fb38 	bl	80049d0 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b02      	cmp	r3, #2
 8006368:	d901      	bls.n	800636e <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e0b5      	b.n	80064da <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800636e:	4b5d      	ldr	r3, [pc, #372]	; (80064e4 <HAL_RCC_OscConfig+0x7d4>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1f0      	bne.n	800635c <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800637a:	485a      	ldr	r0, [pc, #360]	; (80064e4 <HAL_RCC_OscConfig+0x7d4>)
 800637c:	4b59      	ldr	r3, [pc, #356]	; (80064e4 <HAL_RCC_OscConfig+0x7d4>)
 800637e:	68da      	ldr	r2, [r3, #12]
 8006380:	4b59      	ldr	r3, [pc, #356]	; (80064e8 <HAL_RCC_OscConfig+0x7d8>)
 8006382:	4013      	ands	r3, r2
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800638c:	3a01      	subs	r2, #1
 800638e:	0112      	lsls	r2, r2, #4
 8006390:	4311      	orrs	r1, r2
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006396:	0212      	lsls	r2, r2, #8
 8006398:	4311      	orrs	r1, r2
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800639e:	0852      	lsrs	r2, r2, #1
 80063a0:	3a01      	subs	r2, #1
 80063a2:	0552      	lsls	r2, r2, #21
 80063a4:	4311      	orrs	r1, r2
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80063aa:	0852      	lsrs	r2, r2, #1
 80063ac:	3a01      	subs	r2, #1
 80063ae:	0652      	lsls	r2, r2, #25
 80063b0:	4311      	orrs	r1, r2
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063b6:	06d2      	lsls	r2, r2, #27
 80063b8:	430a      	orrs	r2, r1
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60c3      	str	r3, [r0, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063be:	4a49      	ldr	r2, [pc, #292]	; (80064e4 <HAL_RCC_OscConfig+0x7d4>)
 80063c0:	4b48      	ldr	r3, [pc, #288]	; (80064e4 <HAL_RCC_OscConfig+0x7d4>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063c8:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80063ca:	4a46      	ldr	r2, [pc, #280]	; (80064e4 <HAL_RCC_OscConfig+0x7d4>)
 80063cc:	4b45      	ldr	r3, [pc, #276]	; (80064e4 <HAL_RCC_OscConfig+0x7d4>)
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063d4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d6:	f7fe fafb 	bl	80049d0 <HAL_GetTick>
 80063da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063dc:	e008      	b.n	80063f0 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063de:	f7fe faf7 	bl	80049d0 <HAL_GetTick>
 80063e2:	4602      	mov	r2, r0
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d901      	bls.n	80063f0 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e074      	b.n	80064da <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063f0:	4b3c      	ldr	r3, [pc, #240]	; (80064e4 <HAL_RCC_OscConfig+0x7d4>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d0f0      	beq.n	80063de <HAL_RCC_OscConfig+0x6ce>
 80063fc:	e06c      	b.n	80064d8 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063fe:	4a39      	ldr	r2, [pc, #228]	; (80064e4 <HAL_RCC_OscConfig+0x7d4>)
 8006400:	4b38      	ldr	r3, [pc, #224]	; (80064e4 <HAL_RCC_OscConfig+0x7d4>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006408:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800640a:	4b36      	ldr	r3, [pc, #216]	; (80064e4 <HAL_RCC_OscConfig+0x7d4>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d105      	bne.n	8006422 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006416:	4a33      	ldr	r2, [pc, #204]	; (80064e4 <HAL_RCC_OscConfig+0x7d4>)
 8006418:	4b32      	ldr	r3, [pc, #200]	; (80064e4 <HAL_RCC_OscConfig+0x7d4>)
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f023 0303 	bic.w	r3, r3, #3
 8006420:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006422:	4a30      	ldr	r2, [pc, #192]	; (80064e4 <HAL_RCC_OscConfig+0x7d4>)
 8006424:	4b2f      	ldr	r3, [pc, #188]	; (80064e4 <HAL_RCC_OscConfig+0x7d4>)
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800642c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006430:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006432:	f7fe facd 	bl	80049d0 <HAL_GetTick>
 8006436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006438:	e008      	b.n	800644c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800643a:	f7fe fac9 	bl	80049d0 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	2b02      	cmp	r3, #2
 8006446:	d901      	bls.n	800644c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e046      	b.n	80064da <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800644c:	4b25      	ldr	r3, [pc, #148]	; (80064e4 <HAL_RCC_OscConfig+0x7d4>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1f0      	bne.n	800643a <HAL_RCC_OscConfig+0x72a>
 8006458:	e03e      	b.n	80064d8 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645e:	2b01      	cmp	r3, #1
 8006460:	d101      	bne.n	8006466 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e039      	b.n	80064da <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8006466:	4b1f      	ldr	r3, [pc, #124]	; (80064e4 <HAL_RCC_OscConfig+0x7d4>)
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	f003 0203 	and.w	r2, r3, #3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006476:	429a      	cmp	r2, r3
 8006478:	d12c      	bne.n	80064d4 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006484:	3b01      	subs	r3, #1
 8006486:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006488:	429a      	cmp	r2, r3
 800648a:	d123      	bne.n	80064d4 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006496:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006498:	429a      	cmp	r2, r3
 800649a:	d11b      	bne.n	80064d4 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a6:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d113      	bne.n	80064d4 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b6:	085b      	lsrs	r3, r3, #1
 80064b8:	3b01      	subs	r3, #1
 80064ba:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80064bc:	429a      	cmp	r2, r3
 80064be:	d109      	bne.n	80064d4 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ca:	085b      	lsrs	r3, r3, #1
 80064cc:	3b01      	subs	r3, #1
 80064ce:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d001      	beq.n	80064d8 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e000      	b.n	80064da <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3720      	adds	r7, #32
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	40021000 	.word	0x40021000
 80064e8:	019d808c 	.word	0x019d808c

080064ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d101      	bne.n	8006500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e0c8      	b.n	8006692 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006500:	4b66      	ldr	r3, [pc, #408]	; (800669c <HAL_RCC_ClockConfig+0x1b0>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0207 	and.w	r2, r3, #7
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	429a      	cmp	r2, r3
 800650c:	d210      	bcs.n	8006530 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800650e:	4963      	ldr	r1, [pc, #396]	; (800669c <HAL_RCC_ClockConfig+0x1b0>)
 8006510:	4b62      	ldr	r3, [pc, #392]	; (800669c <HAL_RCC_ClockConfig+0x1b0>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f023 0207 	bic.w	r2, r3, #7
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	4313      	orrs	r3, r2
 800651c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800651e:	4b5f      	ldr	r3, [pc, #380]	; (800669c <HAL_RCC_ClockConfig+0x1b0>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0207 	and.w	r2, r3, #7
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	429a      	cmp	r2, r3
 800652a:	d001      	beq.n	8006530 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e0b0      	b.n	8006692 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b00      	cmp	r3, #0
 800653a:	d04c      	beq.n	80065d6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	2b03      	cmp	r3, #3
 8006542:	d107      	bne.n	8006554 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006544:	4b56      	ldr	r3, [pc, #344]	; (80066a0 <HAL_RCC_ClockConfig+0x1b4>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d121      	bne.n	8006594 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e09e      	b.n	8006692 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	2b02      	cmp	r3, #2
 800655a:	d107      	bne.n	800656c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800655c:	4b50      	ldr	r3, [pc, #320]	; (80066a0 <HAL_RCC_ClockConfig+0x1b4>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d115      	bne.n	8006594 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e092      	b.n	8006692 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d107      	bne.n	8006584 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006574:	4b4a      	ldr	r3, [pc, #296]	; (80066a0 <HAL_RCC_ClockConfig+0x1b4>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0302 	and.w	r3, r3, #2
 800657c:	2b00      	cmp	r3, #0
 800657e:	d109      	bne.n	8006594 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e086      	b.n	8006692 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006584:	4b46      	ldr	r3, [pc, #280]	; (80066a0 <HAL_RCC_ClockConfig+0x1b4>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800658c:	2b00      	cmp	r3, #0
 800658e:	d101      	bne.n	8006594 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e07e      	b.n	8006692 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006594:	4942      	ldr	r1, [pc, #264]	; (80066a0 <HAL_RCC_ClockConfig+0x1b4>)
 8006596:	4b42      	ldr	r3, [pc, #264]	; (80066a0 <HAL_RCC_ClockConfig+0x1b4>)
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f023 0203 	bic.w	r2, r3, #3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065a6:	f7fe fa13 	bl	80049d0 <HAL_GetTick>
 80065aa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065ac:	e00a      	b.n	80065c4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065ae:	f7fe fa0f 	bl	80049d0 <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80065bc:	4293      	cmp	r3, r2
 80065be:	d901      	bls.n	80065c4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e066      	b.n	8006692 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065c4:	4b36      	ldr	r3, [pc, #216]	; (80066a0 <HAL_RCC_ClockConfig+0x1b4>)
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f003 020c 	and.w	r2, r3, #12
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d1eb      	bne.n	80065ae <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d008      	beq.n	80065f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065e2:	492f      	ldr	r1, [pc, #188]	; (80066a0 <HAL_RCC_ClockConfig+0x1b4>)
 80065e4:	4b2e      	ldr	r3, [pc, #184]	; (80066a0 <HAL_RCC_ClockConfig+0x1b4>)
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065f4:	4b29      	ldr	r3, [pc, #164]	; (800669c <HAL_RCC_ClockConfig+0x1b0>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0207 	and.w	r2, r3, #7
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d910      	bls.n	8006624 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006602:	4926      	ldr	r1, [pc, #152]	; (800669c <HAL_RCC_ClockConfig+0x1b0>)
 8006604:	4b25      	ldr	r3, [pc, #148]	; (800669c <HAL_RCC_ClockConfig+0x1b0>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f023 0207 	bic.w	r2, r3, #7
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	4313      	orrs	r3, r2
 8006610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006612:	4b22      	ldr	r3, [pc, #136]	; (800669c <HAL_RCC_ClockConfig+0x1b0>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0207 	and.w	r2, r3, #7
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	429a      	cmp	r2, r3
 800661e:	d001      	beq.n	8006624 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e036      	b.n	8006692 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0304 	and.w	r3, r3, #4
 800662c:	2b00      	cmp	r3, #0
 800662e:	d008      	beq.n	8006642 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006630:	491b      	ldr	r1, [pc, #108]	; (80066a0 <HAL_RCC_ClockConfig+0x1b4>)
 8006632:	4b1b      	ldr	r3, [pc, #108]	; (80066a0 <HAL_RCC_ClockConfig+0x1b4>)
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	4313      	orrs	r3, r2
 8006640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0308 	and.w	r3, r3, #8
 800664a:	2b00      	cmp	r3, #0
 800664c:	d009      	beq.n	8006662 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800664e:	4914      	ldr	r1, [pc, #80]	; (80066a0 <HAL_RCC_ClockConfig+0x1b4>)
 8006650:	4b13      	ldr	r3, [pc, #76]	; (80066a0 <HAL_RCC_ClockConfig+0x1b4>)
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	00db      	lsls	r3, r3, #3
 800665e:	4313      	orrs	r3, r2
 8006660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006662:	f000 f825 	bl	80066b0 <HAL_RCC_GetSysClockFreq>
 8006666:	4601      	mov	r1, r0
 8006668:	4b0d      	ldr	r3, [pc, #52]	; (80066a0 <HAL_RCC_ClockConfig+0x1b4>)
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	091b      	lsrs	r3, r3, #4
 800666e:	f003 030f 	and.w	r3, r3, #15
 8006672:	4a0c      	ldr	r2, [pc, #48]	; (80066a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006674:	5cd3      	ldrb	r3, [r2, r3]
 8006676:	f003 031f 	and.w	r3, r3, #31
 800667a:	fa21 f303 	lsr.w	r3, r1, r3
 800667e:	4a0a      	ldr	r2, [pc, #40]	; (80066a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006682:	4b0a      	ldr	r3, [pc, #40]	; (80066ac <HAL_RCC_ClockConfig+0x1c0>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4618      	mov	r0, r3
 8006688:	f7fa fa7a 	bl	8000b80 <HAL_InitTick>
 800668c:	4603      	mov	r3, r0
 800668e:	72fb      	strb	r3, [r7, #11]

  return status;
 8006690:	7afb      	ldrb	r3, [r7, #11]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	40022000 	.word	0x40022000
 80066a0:	40021000 	.word	0x40021000
 80066a4:	0800a6d0 	.word	0x0800a6d0
 80066a8:	200000d4 	.word	0x200000d4
 80066ac:	200000d8 	.word	0x200000d8

080066b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b089      	sub	sp, #36	; 0x24
 80066b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	61fb      	str	r3, [r7, #28]
 80066ba:	2300      	movs	r3, #0
 80066bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066be:	4b3d      	ldr	r3, [pc, #244]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x104>)
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f003 030c 	and.w	r3, r3, #12
 80066c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066c8:	4b3a      	ldr	r3, [pc, #232]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x104>)
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	f003 0303 	and.w	r3, r3, #3
 80066d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d005      	beq.n	80066e4 <HAL_RCC_GetSysClockFreq+0x34>
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	2b0c      	cmp	r3, #12
 80066dc:	d121      	bne.n	8006722 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d11e      	bne.n	8006722 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80066e4:	4b33      	ldr	r3, [pc, #204]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x104>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0308 	and.w	r3, r3, #8
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d107      	bne.n	8006700 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80066f0:	4b30      	ldr	r3, [pc, #192]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x104>)
 80066f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066f6:	0a1b      	lsrs	r3, r3, #8
 80066f8:	f003 030f 	and.w	r3, r3, #15
 80066fc:	61fb      	str	r3, [r7, #28]
 80066fe:	e005      	b.n	800670c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006700:	4b2c      	ldr	r3, [pc, #176]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x104>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	091b      	lsrs	r3, r3, #4
 8006706:	f003 030f 	and.w	r3, r3, #15
 800670a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800670c:	4a2a      	ldr	r2, [pc, #168]	; (80067b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006714:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10d      	bne.n	8006738 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006720:	e00a      	b.n	8006738 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	2b04      	cmp	r3, #4
 8006726:	d102      	bne.n	800672e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006728:	4b24      	ldr	r3, [pc, #144]	; (80067bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800672a:	61bb      	str	r3, [r7, #24]
 800672c:	e004      	b.n	8006738 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	2b08      	cmp	r3, #8
 8006732:	d101      	bne.n	8006738 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006734:	4b22      	ldr	r3, [pc, #136]	; (80067c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006736:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	2b0c      	cmp	r3, #12
 800673c:	d133      	bne.n	80067a6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800673e:	4b1d      	ldr	r3, [pc, #116]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x104>)
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f003 0303 	and.w	r3, r3, #3
 8006746:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	2b02      	cmp	r3, #2
 800674c:	d002      	beq.n	8006754 <HAL_RCC_GetSysClockFreq+0xa4>
 800674e:	2b03      	cmp	r3, #3
 8006750:	d003      	beq.n	800675a <HAL_RCC_GetSysClockFreq+0xaa>
 8006752:	e005      	b.n	8006760 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006754:	4b19      	ldr	r3, [pc, #100]	; (80067bc <HAL_RCC_GetSysClockFreq+0x10c>)
 8006756:	617b      	str	r3, [r7, #20]
      break;
 8006758:	e005      	b.n	8006766 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800675a:	4b19      	ldr	r3, [pc, #100]	; (80067c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800675c:	617b      	str	r3, [r7, #20]
      break;
 800675e:	e002      	b.n	8006766 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	617b      	str	r3, [r7, #20]
      break;
 8006764:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006766:	4b13      	ldr	r3, [pc, #76]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x104>)
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	091b      	lsrs	r3, r3, #4
 800676c:	f003 0307 	and.w	r3, r3, #7
 8006770:	3301      	adds	r3, #1
 8006772:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006774:	4b0f      	ldr	r3, [pc, #60]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x104>)
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	0a1b      	lsrs	r3, r3, #8
 800677a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	fb02 f203 	mul.w	r2, r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	fbb2 f3f3 	udiv	r3, r2, r3
 800678a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800678c:	4b09      	ldr	r3, [pc, #36]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x104>)
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	0e5b      	lsrs	r3, r3, #25
 8006792:	f003 0303 	and.w	r3, r3, #3
 8006796:	3301      	adds	r3, #1
 8006798:	005b      	lsls	r3, r3, #1
 800679a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80067a6:	69bb      	ldr	r3, [r7, #24]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3724      	adds	r7, #36	; 0x24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr
 80067b4:	40021000 	.word	0x40021000
 80067b8:	0800a6e8 	.word	0x0800a6e8
 80067bc:	00f42400 	.word	0x00f42400
 80067c0:	007a1200 	.word	0x007a1200

080067c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067c4:	b480      	push	{r7}
 80067c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067c8:	4b03      	ldr	r3, [pc, #12]	; (80067d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80067ca:	681b      	ldr	r3, [r3, #0]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	200000d4 	.word	0x200000d4

080067dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80067e0:	f7ff fff0 	bl	80067c4 <HAL_RCC_GetHCLKFreq>
 80067e4:	4601      	mov	r1, r0
 80067e6:	4b06      	ldr	r3, [pc, #24]	; (8006800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	0a1b      	lsrs	r3, r3, #8
 80067ec:	f003 0307 	and.w	r3, r3, #7
 80067f0:	4a04      	ldr	r2, [pc, #16]	; (8006804 <HAL_RCC_GetPCLK1Freq+0x28>)
 80067f2:	5cd3      	ldrb	r3, [r2, r3]
 80067f4:	f003 031f 	and.w	r3, r3, #31
 80067f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	40021000 	.word	0x40021000
 8006804:	0800a6e0 	.word	0x0800a6e0

08006808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800680c:	f7ff ffda 	bl	80067c4 <HAL_RCC_GetHCLKFreq>
 8006810:	4601      	mov	r1, r0
 8006812:	4b06      	ldr	r3, [pc, #24]	; (800682c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	0adb      	lsrs	r3, r3, #11
 8006818:	f003 0307 	and.w	r3, r3, #7
 800681c:	4a04      	ldr	r2, [pc, #16]	; (8006830 <HAL_RCC_GetPCLK2Freq+0x28>)
 800681e:	5cd3      	ldrb	r3, [r2, r3]
 8006820:	f003 031f 	and.w	r3, r3, #31
 8006824:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006828:	4618      	mov	r0, r3
 800682a:	bd80      	pop	{r7, pc}
 800682c:	40021000 	.word	0x40021000
 8006830:	0800a6e0 	.word	0x0800a6e0

08006834 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	220f      	movs	r2, #15
 8006842:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006844:	4b12      	ldr	r3, [pc, #72]	; (8006890 <HAL_RCC_GetClockConfig+0x5c>)
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f003 0203 	and.w	r2, r3, #3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006850:	4b0f      	ldr	r3, [pc, #60]	; (8006890 <HAL_RCC_GetClockConfig+0x5c>)
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800685c:	4b0c      	ldr	r3, [pc, #48]	; (8006890 <HAL_RCC_GetClockConfig+0x5c>)
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006868:	4b09      	ldr	r3, [pc, #36]	; (8006890 <HAL_RCC_GetClockConfig+0x5c>)
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	08db      	lsrs	r3, r3, #3
 800686e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006876:	4b07      	ldr	r3, [pc, #28]	; (8006894 <HAL_RCC_GetClockConfig+0x60>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0207 	and.w	r2, r3, #7
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	601a      	str	r2, [r3, #0]
}
 8006882:	bf00      	nop
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	40021000 	.word	0x40021000
 8006894:	40022000 	.word	0x40022000

08006898 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b086      	sub	sp, #24
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80068a0:	2300      	movs	r3, #0
 80068a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80068a4:	4b2a      	ldr	r3, [pc, #168]	; (8006950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d003      	beq.n	80068b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80068b0:	f7ff f9ca 	bl	8005c48 <HAL_PWREx_GetVoltageRange>
 80068b4:	6178      	str	r0, [r7, #20]
 80068b6:	e014      	b.n	80068e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80068b8:	4a25      	ldr	r2, [pc, #148]	; (8006950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068ba:	4b25      	ldr	r3, [pc, #148]	; (8006950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068c2:	6593      	str	r3, [r2, #88]	; 0x58
 80068c4:	4b22      	ldr	r3, [pc, #136]	; (8006950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068cc:	60fb      	str	r3, [r7, #12]
 80068ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80068d0:	f7ff f9ba 	bl	8005c48 <HAL_PWREx_GetVoltageRange>
 80068d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80068d6:	4a1e      	ldr	r2, [pc, #120]	; (8006950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068d8:	4b1d      	ldr	r3, [pc, #116]	; (8006950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068e8:	d10b      	bne.n	8006902 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2b80      	cmp	r3, #128	; 0x80
 80068ee:	d919      	bls.n	8006924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2ba0      	cmp	r3, #160	; 0xa0
 80068f4:	d902      	bls.n	80068fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80068f6:	2302      	movs	r3, #2
 80068f8:	613b      	str	r3, [r7, #16]
 80068fa:	e013      	b.n	8006924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80068fc:	2301      	movs	r3, #1
 80068fe:	613b      	str	r3, [r7, #16]
 8006900:	e010      	b.n	8006924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2b80      	cmp	r3, #128	; 0x80
 8006906:	d902      	bls.n	800690e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006908:	2303      	movs	r3, #3
 800690a:	613b      	str	r3, [r7, #16]
 800690c:	e00a      	b.n	8006924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2b80      	cmp	r3, #128	; 0x80
 8006912:	d102      	bne.n	800691a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006914:	2302      	movs	r3, #2
 8006916:	613b      	str	r3, [r7, #16]
 8006918:	e004      	b.n	8006924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b70      	cmp	r3, #112	; 0x70
 800691e:	d101      	bne.n	8006924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006920:	2301      	movs	r3, #1
 8006922:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006924:	490b      	ldr	r1, [pc, #44]	; (8006954 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006926:	4b0b      	ldr	r3, [pc, #44]	; (8006954 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f023 0207 	bic.w	r2, r3, #7
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	4313      	orrs	r3, r2
 8006932:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006934:	4b07      	ldr	r3, [pc, #28]	; (8006954 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0207 	and.w	r2, r3, #7
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	429a      	cmp	r2, r3
 8006940:	d001      	beq.n	8006946 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e000      	b.n	8006948 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3718      	adds	r7, #24
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	40021000 	.word	0x40021000
 8006954:	40022000 	.word	0x40022000

08006958 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006960:	2300      	movs	r3, #0
 8006962:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006964:	2300      	movs	r3, #0
 8006966:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006970:	2b00      	cmp	r3, #0
 8006972:	d02f      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006978:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800697c:	d005      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x32>
 800697e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006982:	d015      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8006984:	2b00      	cmp	r3, #0
 8006986:	d007      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006988:	e00f      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800698a:	4a5d      	ldr	r2, [pc, #372]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800698c:	4b5c      	ldr	r3, [pc, #368]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006994:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006996:	e00c      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	3304      	adds	r3, #4
 800699c:	2100      	movs	r1, #0
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 fa44 	bl	8006e2c <RCCEx_PLLSAI1_Config>
 80069a4:	4603      	mov	r3, r0
 80069a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80069a8:	e003      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	74fb      	strb	r3, [r7, #19]
      break;
 80069ae:	e000      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80069b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069b2:	7cfb      	ldrb	r3, [r7, #19]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10b      	bne.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069b8:	4951      	ldr	r1, [pc, #324]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80069ba:	4b51      	ldr	r3, [pc, #324]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80069bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069c8:	4313      	orrs	r3, r2
 80069ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80069ce:	e001      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d0:	7cfb      	ldrb	r3, [r7, #19]
 80069d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 809e 	beq.w	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069e2:	2300      	movs	r3, #0
 80069e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80069e6:	4b46      	ldr	r3, [pc, #280]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80069e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80069f2:	2301      	movs	r3, #1
 80069f4:	e000      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80069f6:	2300      	movs	r3, #0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00d      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069fc:	4a40      	ldr	r2, [pc, #256]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80069fe:	4b40      	ldr	r3, [pc, #256]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a06:	6593      	str	r3, [r2, #88]	; 0x58
 8006a08:	4b3d      	ldr	r3, [pc, #244]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a10:	60bb      	str	r3, [r7, #8]
 8006a12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a14:	2301      	movs	r3, #1
 8006a16:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a18:	4a3a      	ldr	r2, [pc, #232]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a1a:	4b3a      	ldr	r3, [pc, #232]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a24:	f7fd ffd4 	bl	80049d0 <HAL_GetTick>
 8006a28:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006a2a:	e009      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a2c:	f7fd ffd0 	bl	80049d0 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d902      	bls.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	74fb      	strb	r3, [r7, #19]
        break;
 8006a3e:	e005      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006a40:	4b30      	ldr	r3, [pc, #192]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d0ef      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8006a4c:	7cfb      	ldrb	r3, [r7, #19]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d15a      	bne.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006a52:	4b2b      	ldr	r3, [pc, #172]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a5c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d01e      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d019      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006a6e:	4b24      	ldr	r3, [pc, #144]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a78:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a7a:	4a21      	ldr	r2, [pc, #132]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006a7c:	4b20      	ldr	r3, [pc, #128]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a8a:	4a1d      	ldr	r2, [pc, #116]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006a8c:	4b1c      	ldr	r3, [pc, #112]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006a9a:	4a19      	ldr	r2, [pc, #100]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d016      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aac:	f7fd ff90 	bl	80049d0 <HAL_GetTick>
 8006ab0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ab2:	e00b      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ab4:	f7fd ff8c 	bl	80049d0 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d902      	bls.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	74fb      	strb	r3, [r7, #19]
            break;
 8006aca:	e006      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006acc:	4b0c      	ldr	r3, [pc, #48]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d0ec      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8006ada:	7cfb      	ldrb	r3, [r7, #19]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10b      	bne.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ae0:	4907      	ldr	r1, [pc, #28]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006ae2:	4b07      	ldr	r3, [pc, #28]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ae8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006af0:	4313      	orrs	r3, r2
 8006af2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006af6:	e009      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006af8:	7cfb      	ldrb	r3, [r7, #19]
 8006afa:	74bb      	strb	r3, [r7, #18]
 8006afc:	e006      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8006afe:	bf00      	nop
 8006b00:	40021000 	.word	0x40021000
 8006b04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b08:	7cfb      	ldrb	r3, [r7, #19]
 8006b0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b0c:	7c7b      	ldrb	r3, [r7, #17]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d105      	bne.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b12:	4a9e      	ldr	r2, [pc, #632]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006b14:	4b9d      	ldr	r3, [pc, #628]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b2a:	4998      	ldr	r1, [pc, #608]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006b2c:	4b97      	ldr	r3, [pc, #604]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b32:	f023 0203 	bic.w	r2, r3, #3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0302 	and.w	r3, r3, #2
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b4c:	498f      	ldr	r1, [pc, #572]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006b4e:	4b8f      	ldr	r3, [pc, #572]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b54:	f023 020c 	bic.w	r2, r3, #12
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0304 	and.w	r3, r3, #4
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b6e:	4987      	ldr	r1, [pc, #540]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006b70:	4b86      	ldr	r3, [pc, #536]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b76:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0308 	and.w	r3, r3, #8
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00a      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b90:	497e      	ldr	r1, [pc, #504]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006b92:	4b7e      	ldr	r3, [pc, #504]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b98:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0320 	and.w	r3, r3, #32
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00a      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006bb2:	4976      	ldr	r1, [pc, #472]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006bb4:	4b75      	ldr	r3, [pc, #468]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00a      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006bd4:	496d      	ldr	r1, [pc, #436]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006bd6:	4b6d      	ldr	r3, [pc, #436]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be4:	4313      	orrs	r3, r2
 8006be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00a      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006bf6:	4965      	ldr	r1, [pc, #404]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006bf8:	4b64      	ldr	r3, [pc, #400]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c06:	4313      	orrs	r3, r2
 8006c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00a      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c18:	495c      	ldr	r1, [pc, #368]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006c1a:	4b5c      	ldr	r3, [pc, #368]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00a      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c3a:	4954      	ldr	r1, [pc, #336]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006c3c:	4b53      	ldr	r3, [pc, #332]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c42:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00a      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c5c:	494b      	ldr	r1, [pc, #300]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006c5e:	4b4b      	ldr	r3, [pc, #300]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00a      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c7e:	4943      	ldr	r1, [pc, #268]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006c80:	4b42      	ldr	r3, [pc, #264]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006c82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c86:	f023 0203 	bic.w	r2, r3, #3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d028      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ca0:	493a      	ldr	r1, [pc, #232]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006ca2:	4b3a      	ldr	r3, [pc, #232]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ca8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cbe:	d106      	bne.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cc0:	4a32      	ldr	r2, [pc, #200]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006cc2:	4b32      	ldr	r3, [pc, #200]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cca:	60d3      	str	r3, [r2, #12]
 8006ccc:	e011      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006cd6:	d10c      	bne.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	3304      	adds	r3, #4
 8006cdc:	2101      	movs	r1, #1
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 f8a4 	bl	8006e2c <RCCEx_PLLSAI1_Config>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006ce8:	7cfb      	ldrb	r3, [r7, #19]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d001      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 8006cee:	7cfb      	ldrb	r3, [r7, #19]
 8006cf0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d028      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006cfe:	4923      	ldr	r1, [pc, #140]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006d00:	4b22      	ldr	r3, [pc, #136]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d1c:	d106      	bne.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d1e:	4a1b      	ldr	r2, [pc, #108]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006d20:	4b1a      	ldr	r3, [pc, #104]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d28:	60d3      	str	r3, [r2, #12]
 8006d2a:	e011      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d34:	d10c      	bne.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	3304      	adds	r3, #4
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f000 f875 	bl	8006e2c <RCCEx_PLLSAI1_Config>
 8006d42:	4603      	mov	r3, r0
 8006d44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006d46:	7cfb      	ldrb	r3, [r7, #19]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 8006d4c:	7cfb      	ldrb	r3, [r7, #19]
 8006d4e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d02b      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d5c:	490b      	ldr	r1, [pc, #44]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006d5e:	4b0b      	ldr	r3, [pc, #44]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d64:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d7a:	d109      	bne.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d7c:	4a03      	ldr	r2, [pc, #12]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006d7e:	4b03      	ldr	r3, [pc, #12]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d86:	60d3      	str	r3, [r2, #12]
 8006d88:	e014      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8006d8a:	bf00      	nop
 8006d8c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d98:	d10c      	bne.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	3304      	adds	r3, #4
 8006d9e:	2101      	movs	r1, #1
 8006da0:	4618      	mov	r0, r3
 8006da2:	f000 f843 	bl	8006e2c <RCCEx_PLLSAI1_Config>
 8006da6:	4603      	mov	r3, r0
 8006da8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006daa:	7cfb      	ldrb	r3, [r7, #19]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d001      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8006db0:	7cfb      	ldrb	r3, [r7, #19]
 8006db2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d01c      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006dc0:	4919      	ldr	r1, [pc, #100]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8006dc2:	4b19      	ldr	r3, [pc, #100]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8006dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dc8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dde:	d10c      	bne.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	3304      	adds	r3, #4
 8006de4:	2102      	movs	r1, #2
 8006de6:	4618      	mov	r0, r3
 8006de8:	f000 f820 	bl	8006e2c <RCCEx_PLLSAI1_Config>
 8006dec:	4603      	mov	r3, r0
 8006dee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006df0:	7cfb      	ldrb	r3, [r7, #19]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d001      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 8006df6:	7cfb      	ldrb	r3, [r7, #19]
 8006df8:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00a      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e06:	4908      	ldr	r1, [pc, #32]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8006e08:	4b07      	ldr	r3, [pc, #28]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8006e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e16:	4313      	orrs	r3, r2
 8006e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006e1c:	7cbb      	ldrb	r3, [r7, #18]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3718      	adds	r7, #24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	40021000 	.word	0x40021000

08006e2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006e3a:	4b73      	ldr	r3, [pc, #460]	; (8007008 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	f003 0303 	and.w	r3, r3, #3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d018      	beq.n	8006e78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006e46:	4b70      	ldr	r3, [pc, #448]	; (8007008 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	f003 0203 	and.w	r2, r3, #3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d10d      	bne.n	8006e72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
       ||
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d009      	beq.n	8006e72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006e5e:	4b6a      	ldr	r3, [pc, #424]	; (8007008 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	091b      	lsrs	r3, r3, #4
 8006e64:	f003 0307 	and.w	r3, r3, #7
 8006e68:	1c5a      	adds	r2, r3, #1
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685b      	ldr	r3, [r3, #4]
       ||
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d044      	beq.n	8006efc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	73fb      	strb	r3, [r7, #15]
 8006e76:	e041      	b.n	8006efc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d00c      	beq.n	8006e9a <RCCEx_PLLSAI1_Config+0x6e>
 8006e80:	2b03      	cmp	r3, #3
 8006e82:	d013      	beq.n	8006eac <RCCEx_PLLSAI1_Config+0x80>
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d120      	bne.n	8006eca <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006e88:	4b5f      	ldr	r3, [pc, #380]	; (8007008 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0302 	and.w	r3, r3, #2
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d11d      	bne.n	8006ed0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e98:	e01a      	b.n	8006ed0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006e9a:	4b5b      	ldr	r3, [pc, #364]	; (8007008 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d116      	bne.n	8006ed4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006eaa:	e013      	b.n	8006ed4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006eac:	4b56      	ldr	r3, [pc, #344]	; (8007008 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10f      	bne.n	8006ed8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006eb8:	4b53      	ldr	r3, [pc, #332]	; (8007008 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d109      	bne.n	8006ed8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006ec8:	e006      	b.n	8006ed8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	73fb      	strb	r3, [r7, #15]
      break;
 8006ece:	e004      	b.n	8006eda <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006ed0:	bf00      	nop
 8006ed2:	e002      	b.n	8006eda <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006ed4:	bf00      	nop
 8006ed6:	e000      	b.n	8006eda <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006ed8:	bf00      	nop
    }

    if(status == HAL_OK)
 8006eda:	7bfb      	ldrb	r3, [r7, #15]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10d      	bne.n	8006efc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006ee0:	4849      	ldr	r0, [pc, #292]	; (8007008 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006ee2:	4b49      	ldr	r3, [pc, #292]	; (8007008 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6819      	ldr	r1, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	011b      	lsls	r3, r3, #4
 8006ef6:	430b      	orrs	r3, r1
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d17c      	bne.n	8006ffc <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006f02:	4a41      	ldr	r2, [pc, #260]	; (8007008 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006f04:	4b40      	ldr	r3, [pc, #256]	; (8007008 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f0e:	f7fd fd5f 	bl	80049d0 <HAL_GetTick>
 8006f12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006f14:	e009      	b.n	8006f2a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006f16:	f7fd fd5b 	bl	80049d0 <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d902      	bls.n	8006f2a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	73fb      	strb	r3, [r7, #15]
        break;
 8006f28:	e005      	b.n	8006f36 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006f2a:	4b37      	ldr	r3, [pc, #220]	; (8007008 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1ef      	bne.n	8006f16 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d15f      	bne.n	8006ffc <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d110      	bne.n	8006f64 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006f42:	4831      	ldr	r0, [pc, #196]	; (8007008 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006f44:	4b30      	ldr	r3, [pc, #192]	; (8007008 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006f4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	6892      	ldr	r2, [r2, #8]
 8006f54:	0211      	lsls	r1, r2, #8
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	68d2      	ldr	r2, [r2, #12]
 8006f5a:	06d2      	lsls	r2, r2, #27
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	6103      	str	r3, [r0, #16]
 8006f62:	e027      	b.n	8006fb4 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d112      	bne.n	8006f90 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006f6a:	4827      	ldr	r0, [pc, #156]	; (8007008 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006f6c:	4b26      	ldr	r3, [pc, #152]	; (8007008 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006f74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	6892      	ldr	r2, [r2, #8]
 8006f7c:	0211      	lsls	r1, r2, #8
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	6912      	ldr	r2, [r2, #16]
 8006f82:	0852      	lsrs	r2, r2, #1
 8006f84:	3a01      	subs	r2, #1
 8006f86:	0552      	lsls	r2, r2, #21
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	6103      	str	r3, [r0, #16]
 8006f8e:	e011      	b.n	8006fb4 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006f90:	481d      	ldr	r0, [pc, #116]	; (8007008 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006f92:	4b1d      	ldr	r3, [pc, #116]	; (8007008 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006f9a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	6892      	ldr	r2, [r2, #8]
 8006fa2:	0211      	lsls	r1, r2, #8
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	6952      	ldr	r2, [r2, #20]
 8006fa8:	0852      	lsrs	r2, r2, #1
 8006faa:	3a01      	subs	r2, #1
 8006fac:	0652      	lsls	r2, r2, #25
 8006fae:	430a      	orrs	r2, r1
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006fb4:	4a14      	ldr	r2, [pc, #80]	; (8007008 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006fb6:	4b14      	ldr	r3, [pc, #80]	; (8007008 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006fbe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fc0:	f7fd fd06 	bl	80049d0 <HAL_GetTick>
 8006fc4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006fc6:	e009      	b.n	8006fdc <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006fc8:	f7fd fd02 	bl	80049d0 <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d902      	bls.n	8006fdc <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	73fb      	strb	r3, [r7, #15]
          break;
 8006fda:	e005      	b.n	8006fe8 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006fdc:	4b0a      	ldr	r3, [pc, #40]	; (8007008 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d0ef      	beq.n	8006fc8 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d106      	bne.n	8006ffc <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006fee:	4906      	ldr	r1, [pc, #24]	; (8007008 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006ff0:	4b05      	ldr	r3, [pc, #20]	; (8007008 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006ff2:	691a      	ldr	r2, [r3, #16]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	40021000 	.word	0x40021000

0800700c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e01d      	b.n	800705a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	d106      	bne.n	8007038 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f815 	bl	8007062 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2202      	movs	r2, #2
 800703c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	3304      	adds	r3, #4
 8007048:	4619      	mov	r1, r3
 800704a:	4610      	mov	r0, r2
 800704c:	f000 f986 	bl	800735c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007062:	b480      	push	{r7}
 8007064:	b083      	sub	sp, #12
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800706a:	bf00      	nop
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
	...

08007078 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	6812      	ldr	r2, [r2, #0]
 8007088:	68d2      	ldr	r2, [r2, #12]
 800708a:	f042 0201 	orr.w	r2, r2, #1
 800708e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	689a      	ldr	r2, [r3, #8]
 8007096:	4b0c      	ldr	r3, [pc, #48]	; (80070c8 <HAL_TIM_Base_Start_IT+0x50>)
 8007098:	4013      	ands	r3, r2
 800709a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2b06      	cmp	r3, #6
 80070a0:	d00b      	beq.n	80070ba <HAL_TIM_Base_Start_IT+0x42>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070a8:	d007      	beq.n	80070ba <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	6812      	ldr	r2, [r2, #0]
 80070b2:	6812      	ldr	r2, [r2, #0]
 80070b4:	f042 0201 	orr.w	r2, r2, #1
 80070b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3714      	adds	r7, #20
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr
 80070c8:	00010007 	.word	0x00010007

080070cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d122      	bne.n	8007128 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	f003 0302 	and.w	r3, r3, #2
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d11b      	bne.n	8007128 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f06f 0202 	mvn.w	r2, #2
 80070f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	f003 0303 	and.w	r3, r3, #3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d003      	beq.n	8007116 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f905 	bl	800731e <HAL_TIM_IC_CaptureCallback>
 8007114:	e005      	b.n	8007122 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f8f7 	bl	800730a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 f908 	bl	8007332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	f003 0304 	and.w	r3, r3, #4
 8007132:	2b04      	cmp	r3, #4
 8007134:	d122      	bne.n	800717c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	f003 0304 	and.w	r3, r3, #4
 8007140:	2b04      	cmp	r3, #4
 8007142:	d11b      	bne.n	800717c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f06f 0204 	mvn.w	r2, #4
 800714c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2202      	movs	r2, #2
 8007152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800715e:	2b00      	cmp	r3, #0
 8007160:	d003      	beq.n	800716a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f8db 	bl	800731e <HAL_TIM_IC_CaptureCallback>
 8007168:	e005      	b.n	8007176 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f8cd 	bl	800730a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f8de 	bl	8007332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	f003 0308 	and.w	r3, r3, #8
 8007186:	2b08      	cmp	r3, #8
 8007188:	d122      	bne.n	80071d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	f003 0308 	and.w	r3, r3, #8
 8007194:	2b08      	cmp	r3, #8
 8007196:	d11b      	bne.n	80071d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f06f 0208 	mvn.w	r2, #8
 80071a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2204      	movs	r2, #4
 80071a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	f003 0303 	and.w	r3, r3, #3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f8b1 	bl	800731e <HAL_TIM_IC_CaptureCallback>
 80071bc:	e005      	b.n	80071ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f8a3 	bl	800730a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f8b4 	bl	8007332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	f003 0310 	and.w	r3, r3, #16
 80071da:	2b10      	cmp	r3, #16
 80071dc:	d122      	bne.n	8007224 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	f003 0310 	and.w	r3, r3, #16
 80071e8:	2b10      	cmp	r3, #16
 80071ea:	d11b      	bne.n	8007224 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f06f 0210 	mvn.w	r2, #16
 80071f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2208      	movs	r2, #8
 80071fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	69db      	ldr	r3, [r3, #28]
 8007202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f887 	bl	800731e <HAL_TIM_IC_CaptureCallback>
 8007210:	e005      	b.n	800721e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f879 	bl	800730a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 f88a 	bl	8007332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	2b01      	cmp	r3, #1
 8007230:	d10e      	bne.n	8007250 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	2b01      	cmp	r3, #1
 800723e:	d107      	bne.n	8007250 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f06f 0201 	mvn.w	r2, #1
 8007248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7f9 fc14 	bl	8000a78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800725a:	2b80      	cmp	r3, #128	; 0x80
 800725c:	d10e      	bne.n	800727c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007268:	2b80      	cmp	r3, #128	; 0x80
 800726a:	d107      	bne.n	800727c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f8e8 	bl	800744c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800728a:	d10e      	bne.n	80072aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007296:	2b80      	cmp	r3, #128	; 0x80
 8007298:	d107      	bne.n	80072aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80072a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 f8db 	bl	8007460 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b4:	2b40      	cmp	r3, #64	; 0x40
 80072b6:	d10e      	bne.n	80072d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c2:	2b40      	cmp	r3, #64	; 0x40
 80072c4:	d107      	bne.n	80072d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 f838 	bl	8007346 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	f003 0320 	and.w	r3, r3, #32
 80072e0:	2b20      	cmp	r3, #32
 80072e2:	d10e      	bne.n	8007302 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	f003 0320 	and.w	r3, r3, #32
 80072ee:	2b20      	cmp	r3, #32
 80072f0:	d107      	bne.n	8007302 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f06f 0220 	mvn.w	r2, #32
 80072fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 f89b 	bl	8007438 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007302:	bf00      	nop
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800730a:	b480      	push	{r7}
 800730c:	b083      	sub	sp, #12
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007312:	bf00      	nop
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800731e:	b480      	push	{r7}
 8007320:	b083      	sub	sp, #12
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007326:	bf00      	nop
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007332:	b480      	push	{r7}
 8007334:	b083      	sub	sp, #12
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800733a:	bf00      	nop
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007346:	b480      	push	{r7}
 8007348:	b083      	sub	sp, #12
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800734e:	bf00      	nop
 8007350:	370c      	adds	r7, #12
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
	...

0800735c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a2e      	ldr	r2, [pc, #184]	; (8007428 <TIM_Base_SetConfig+0xcc>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d007      	beq.n	8007384 <TIM_Base_SetConfig+0x28>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800737a:	d003      	beq.n	8007384 <TIM_Base_SetConfig+0x28>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a2b      	ldr	r2, [pc, #172]	; (800742c <TIM_Base_SetConfig+0xd0>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d108      	bne.n	8007396 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800738a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	4313      	orrs	r3, r2
 8007394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a23      	ldr	r2, [pc, #140]	; (8007428 <TIM_Base_SetConfig+0xcc>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d00f      	beq.n	80073be <TIM_Base_SetConfig+0x62>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073a4:	d00b      	beq.n	80073be <TIM_Base_SetConfig+0x62>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a20      	ldr	r2, [pc, #128]	; (800742c <TIM_Base_SetConfig+0xd0>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d007      	beq.n	80073be <TIM_Base_SetConfig+0x62>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a1f      	ldr	r2, [pc, #124]	; (8007430 <TIM_Base_SetConfig+0xd4>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d003      	beq.n	80073be <TIM_Base_SetConfig+0x62>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a1e      	ldr	r2, [pc, #120]	; (8007434 <TIM_Base_SetConfig+0xd8>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d108      	bne.n	80073d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	4313      	orrs	r3, r2
 80073dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	689a      	ldr	r2, [r3, #8]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a0c      	ldr	r2, [pc, #48]	; (8007428 <TIM_Base_SetConfig+0xcc>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d007      	beq.n	800740c <TIM_Base_SetConfig+0xb0>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a0c      	ldr	r2, [pc, #48]	; (8007430 <TIM_Base_SetConfig+0xd4>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d003      	beq.n	800740c <TIM_Base_SetConfig+0xb0>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a0b      	ldr	r2, [pc, #44]	; (8007434 <TIM_Base_SetConfig+0xd8>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d103      	bne.n	8007414 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	691a      	ldr	r2, [r3, #16]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	615a      	str	r2, [r3, #20]
}
 800741a:	bf00      	nop
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	40012c00 	.word	0x40012c00
 800742c:	40000400 	.word	0x40000400
 8007430:	40014000 	.word	0x40014000
 8007434:	40014400 	.word	0x40014400

08007438 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007468:	bf00      	nop
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d101      	bne.n	8007486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e040      	b.n	8007508 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800748a:	2b00      	cmp	r3, #0
 800748c:	d106      	bne.n	800749c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f7f9 fb30 	bl	8000afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2224      	movs	r2, #36	; 0x24
 80074a0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	6812      	ldr	r2, [r2, #0]
 80074aa:	6812      	ldr	r2, [r2, #0]
 80074ac:	f022 0201 	bic.w	r2, r2, #1
 80074b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f8c0 	bl	8007638 <UART_SetConfig>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d101      	bne.n	80074c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e022      	b.n	8007508 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d002      	beq.n	80074d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fbc0 	bl	8007c50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	6812      	ldr	r2, [r2, #0]
 80074d8:	6852      	ldr	r2, [r2, #4]
 80074da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	6812      	ldr	r2, [r2, #0]
 80074e8:	6892      	ldr	r2, [r2, #8]
 80074ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	6812      	ldr	r2, [r2, #0]
 80074f8:	6812      	ldr	r2, [r2, #0]
 80074fa:	f042 0201 	orr.w	r2, r2, #1
 80074fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fc47 	bl	8007d94 <UART_CheckIdleState>
 8007506:	4603      	mov	r3, r0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b08a      	sub	sp, #40	; 0x28
 8007514:	af02      	add	r7, sp, #8
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	603b      	str	r3, [r7, #0]
 800751c:	4613      	mov	r3, r2
 800751e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007524:	2b20      	cmp	r3, #32
 8007526:	f040 8081 	bne.w	800762c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <HAL_UART_Transmit+0x26>
 8007530:	88fb      	ldrh	r3, [r7, #6]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e079      	b.n	800762e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007540:	2b01      	cmp	r3, #1
 8007542:	d101      	bne.n	8007548 <HAL_UART_Transmit+0x38>
 8007544:	2302      	movs	r3, #2
 8007546:	e072      	b.n	800762e <HAL_UART_Transmit+0x11e>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2221      	movs	r2, #33	; 0x21
 800755a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800755c:	f7fd fa38 	bl	80049d0 <HAL_GetTick>
 8007560:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	88fa      	ldrh	r2, [r7, #6]
 8007566:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	88fa      	ldrh	r2, [r7, #6]
 800756e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800757a:	d108      	bne.n	800758e <HAL_UART_Transmit+0x7e>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d104      	bne.n	800758e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8007584:	2300      	movs	r3, #0
 8007586:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	61bb      	str	r3, [r7, #24]
 800758c:	e003      	b.n	8007596 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007592:	2300      	movs	r3, #0
 8007594:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007596:	e02d      	b.n	80075f4 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	2200      	movs	r2, #0
 80075a0:	2180      	movs	r1, #128	; 0x80
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f000 fc3b 	bl	8007e1e <UART_WaitOnFlagUntilTimeout>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e03d      	b.n	800762e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10b      	bne.n	80075d0 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	69ba      	ldr	r2, [r7, #24]
 80075be:	8812      	ldrh	r2, [r2, #0]
 80075c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075c4:	b292      	uxth	r2, r2
 80075c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	3302      	adds	r3, #2
 80075cc:	61bb      	str	r3, [r7, #24]
 80075ce:	e008      	b.n	80075e2 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	69fa      	ldr	r2, [r7, #28]
 80075d6:	7812      	ldrb	r2, [r2, #0]
 80075d8:	b292      	uxth	r2, r2
 80075da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	3301      	adds	r3, #1
 80075e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	3b01      	subs	r3, #1
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1cb      	bne.n	8007598 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	2200      	movs	r2, #0
 8007608:	2140      	movs	r1, #64	; 0x40
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f000 fc07 	bl	8007e1e <UART_WaitOnFlagUntilTimeout>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d001      	beq.n	800761a <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e009      	b.n	800762e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2220      	movs	r2, #32
 800761e:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8007628:	2300      	movs	r3, #0
 800762a:	e000      	b.n	800762e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800762c:	2302      	movs	r3, #2
  }
}
 800762e:	4618      	mov	r0, r3
 8007630:	3720      	adds	r7, #32
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
	...

08007638 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007638:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800763c:	b088      	sub	sp, #32
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007642:	2300      	movs	r3, #0
 8007644:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007646:	2300      	movs	r3, #0
 8007648:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800764a:	2300      	movs	r3, #0
 800764c:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	689a      	ldr	r2, [r3, #8]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	431a      	orrs	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	695b      	ldr	r3, [r3, #20]
 800765c:	431a      	orrs	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	69db      	ldr	r3, [r3, #28]
 8007662:	4313      	orrs	r3, r2
 8007664:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	6819      	ldr	r1, [r3, #0]
 8007670:	4bae      	ldr	r3, [pc, #696]	; (800792c <UART_SetConfig+0x2f4>)
 8007672:	400b      	ands	r3, r1
 8007674:	69f9      	ldr	r1, [r7, #28]
 8007676:	430b      	orrs	r3, r1
 8007678:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	6812      	ldr	r2, [r2, #0]
 8007682:	6852      	ldr	r2, [r2, #4]
 8007684:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	68d2      	ldr	r2, [r2, #12]
 800768c:	430a      	orrs	r2, r1
 800768e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4aa5      	ldr	r2, [pc, #660]	; (8007930 <UART_SetConfig+0x2f8>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d004      	beq.n	80076aa <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a1b      	ldr	r3, [r3, #32]
 80076a4:	69fa      	ldr	r2, [r7, #28]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	6812      	ldr	r2, [r2, #0]
 80076b2:	6892      	ldr	r2, [r2, #8]
 80076b4:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 80076b8:	69fa      	ldr	r2, [r7, #28]
 80076ba:	430a      	orrs	r2, r1
 80076bc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a9c      	ldr	r2, [pc, #624]	; (8007934 <UART_SetConfig+0x2fc>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d121      	bne.n	800770c <UART_SetConfig+0xd4>
 80076c8:	4b9b      	ldr	r3, [pc, #620]	; (8007938 <UART_SetConfig+0x300>)
 80076ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ce:	f003 0303 	and.w	r3, r3, #3
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	d816      	bhi.n	8007704 <UART_SetConfig+0xcc>
 80076d6:	a201      	add	r2, pc, #4	; (adr r2, 80076dc <UART_SetConfig+0xa4>)
 80076d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076dc:	080076ed 	.word	0x080076ed
 80076e0:	080076f9 	.word	0x080076f9
 80076e4:	080076f3 	.word	0x080076f3
 80076e8:	080076ff 	.word	0x080076ff
 80076ec:	2301      	movs	r3, #1
 80076ee:	76fb      	strb	r3, [r7, #27]
 80076f0:	e0be      	b.n	8007870 <UART_SetConfig+0x238>
 80076f2:	2302      	movs	r3, #2
 80076f4:	76fb      	strb	r3, [r7, #27]
 80076f6:	e0bb      	b.n	8007870 <UART_SetConfig+0x238>
 80076f8:	2304      	movs	r3, #4
 80076fa:	76fb      	strb	r3, [r7, #27]
 80076fc:	e0b8      	b.n	8007870 <UART_SetConfig+0x238>
 80076fe:	2308      	movs	r3, #8
 8007700:	76fb      	strb	r3, [r7, #27]
 8007702:	e0b5      	b.n	8007870 <UART_SetConfig+0x238>
 8007704:	2310      	movs	r3, #16
 8007706:	76fb      	strb	r3, [r7, #27]
 8007708:	bf00      	nop
 800770a:	e0b1      	b.n	8007870 <UART_SetConfig+0x238>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a8a      	ldr	r2, [pc, #552]	; (800793c <UART_SetConfig+0x304>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d134      	bne.n	8007780 <UART_SetConfig+0x148>
 8007716:	4b88      	ldr	r3, [pc, #544]	; (8007938 <UART_SetConfig+0x300>)
 8007718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800771c:	f003 030c 	and.w	r3, r3, #12
 8007720:	2b0c      	cmp	r3, #12
 8007722:	d829      	bhi.n	8007778 <UART_SetConfig+0x140>
 8007724:	a201      	add	r2, pc, #4	; (adr r2, 800772c <UART_SetConfig+0xf4>)
 8007726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772a:	bf00      	nop
 800772c:	08007761 	.word	0x08007761
 8007730:	08007779 	.word	0x08007779
 8007734:	08007779 	.word	0x08007779
 8007738:	08007779 	.word	0x08007779
 800773c:	0800776d 	.word	0x0800776d
 8007740:	08007779 	.word	0x08007779
 8007744:	08007779 	.word	0x08007779
 8007748:	08007779 	.word	0x08007779
 800774c:	08007767 	.word	0x08007767
 8007750:	08007779 	.word	0x08007779
 8007754:	08007779 	.word	0x08007779
 8007758:	08007779 	.word	0x08007779
 800775c:	08007773 	.word	0x08007773
 8007760:	2300      	movs	r3, #0
 8007762:	76fb      	strb	r3, [r7, #27]
 8007764:	e084      	b.n	8007870 <UART_SetConfig+0x238>
 8007766:	2302      	movs	r3, #2
 8007768:	76fb      	strb	r3, [r7, #27]
 800776a:	e081      	b.n	8007870 <UART_SetConfig+0x238>
 800776c:	2304      	movs	r3, #4
 800776e:	76fb      	strb	r3, [r7, #27]
 8007770:	e07e      	b.n	8007870 <UART_SetConfig+0x238>
 8007772:	2308      	movs	r3, #8
 8007774:	76fb      	strb	r3, [r7, #27]
 8007776:	e07b      	b.n	8007870 <UART_SetConfig+0x238>
 8007778:	2310      	movs	r3, #16
 800777a:	76fb      	strb	r3, [r7, #27]
 800777c:	bf00      	nop
 800777e:	e077      	b.n	8007870 <UART_SetConfig+0x238>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a6e      	ldr	r2, [pc, #440]	; (8007940 <UART_SetConfig+0x308>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d120      	bne.n	80077cc <UART_SetConfig+0x194>
 800778a:	4b6b      	ldr	r3, [pc, #428]	; (8007938 <UART_SetConfig+0x300>)
 800778c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007790:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007794:	2b10      	cmp	r3, #16
 8007796:	d00f      	beq.n	80077b8 <UART_SetConfig+0x180>
 8007798:	2b10      	cmp	r3, #16
 800779a:	d802      	bhi.n	80077a2 <UART_SetConfig+0x16a>
 800779c:	2b00      	cmp	r3, #0
 800779e:	d005      	beq.n	80077ac <UART_SetConfig+0x174>
 80077a0:	e010      	b.n	80077c4 <UART_SetConfig+0x18c>
 80077a2:	2b20      	cmp	r3, #32
 80077a4:	d005      	beq.n	80077b2 <UART_SetConfig+0x17a>
 80077a6:	2b30      	cmp	r3, #48	; 0x30
 80077a8:	d009      	beq.n	80077be <UART_SetConfig+0x186>
 80077aa:	e00b      	b.n	80077c4 <UART_SetConfig+0x18c>
 80077ac:	2300      	movs	r3, #0
 80077ae:	76fb      	strb	r3, [r7, #27]
 80077b0:	e05e      	b.n	8007870 <UART_SetConfig+0x238>
 80077b2:	2302      	movs	r3, #2
 80077b4:	76fb      	strb	r3, [r7, #27]
 80077b6:	e05b      	b.n	8007870 <UART_SetConfig+0x238>
 80077b8:	2304      	movs	r3, #4
 80077ba:	76fb      	strb	r3, [r7, #27]
 80077bc:	e058      	b.n	8007870 <UART_SetConfig+0x238>
 80077be:	2308      	movs	r3, #8
 80077c0:	76fb      	strb	r3, [r7, #27]
 80077c2:	e055      	b.n	8007870 <UART_SetConfig+0x238>
 80077c4:	2310      	movs	r3, #16
 80077c6:	76fb      	strb	r3, [r7, #27]
 80077c8:	bf00      	nop
 80077ca:	e051      	b.n	8007870 <UART_SetConfig+0x238>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a5c      	ldr	r2, [pc, #368]	; (8007944 <UART_SetConfig+0x30c>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d120      	bne.n	8007818 <UART_SetConfig+0x1e0>
 80077d6:	4b58      	ldr	r3, [pc, #352]	; (8007938 <UART_SetConfig+0x300>)
 80077d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80077e0:	2b40      	cmp	r3, #64	; 0x40
 80077e2:	d00f      	beq.n	8007804 <UART_SetConfig+0x1cc>
 80077e4:	2b40      	cmp	r3, #64	; 0x40
 80077e6:	d802      	bhi.n	80077ee <UART_SetConfig+0x1b6>
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d005      	beq.n	80077f8 <UART_SetConfig+0x1c0>
 80077ec:	e010      	b.n	8007810 <UART_SetConfig+0x1d8>
 80077ee:	2b80      	cmp	r3, #128	; 0x80
 80077f0:	d005      	beq.n	80077fe <UART_SetConfig+0x1c6>
 80077f2:	2bc0      	cmp	r3, #192	; 0xc0
 80077f4:	d009      	beq.n	800780a <UART_SetConfig+0x1d2>
 80077f6:	e00b      	b.n	8007810 <UART_SetConfig+0x1d8>
 80077f8:	2300      	movs	r3, #0
 80077fa:	76fb      	strb	r3, [r7, #27]
 80077fc:	e038      	b.n	8007870 <UART_SetConfig+0x238>
 80077fe:	2302      	movs	r3, #2
 8007800:	76fb      	strb	r3, [r7, #27]
 8007802:	e035      	b.n	8007870 <UART_SetConfig+0x238>
 8007804:	2304      	movs	r3, #4
 8007806:	76fb      	strb	r3, [r7, #27]
 8007808:	e032      	b.n	8007870 <UART_SetConfig+0x238>
 800780a:	2308      	movs	r3, #8
 800780c:	76fb      	strb	r3, [r7, #27]
 800780e:	e02f      	b.n	8007870 <UART_SetConfig+0x238>
 8007810:	2310      	movs	r3, #16
 8007812:	76fb      	strb	r3, [r7, #27]
 8007814:	bf00      	nop
 8007816:	e02b      	b.n	8007870 <UART_SetConfig+0x238>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a44      	ldr	r2, [pc, #272]	; (8007930 <UART_SetConfig+0x2f8>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d124      	bne.n	800786c <UART_SetConfig+0x234>
 8007822:	4b45      	ldr	r3, [pc, #276]	; (8007938 <UART_SetConfig+0x300>)
 8007824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007828:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800782c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007830:	d012      	beq.n	8007858 <UART_SetConfig+0x220>
 8007832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007836:	d802      	bhi.n	800783e <UART_SetConfig+0x206>
 8007838:	2b00      	cmp	r3, #0
 800783a:	d007      	beq.n	800784c <UART_SetConfig+0x214>
 800783c:	e012      	b.n	8007864 <UART_SetConfig+0x22c>
 800783e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007842:	d006      	beq.n	8007852 <UART_SetConfig+0x21a>
 8007844:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007848:	d009      	beq.n	800785e <UART_SetConfig+0x226>
 800784a:	e00b      	b.n	8007864 <UART_SetConfig+0x22c>
 800784c:	2300      	movs	r3, #0
 800784e:	76fb      	strb	r3, [r7, #27]
 8007850:	e00e      	b.n	8007870 <UART_SetConfig+0x238>
 8007852:	2302      	movs	r3, #2
 8007854:	76fb      	strb	r3, [r7, #27]
 8007856:	e00b      	b.n	8007870 <UART_SetConfig+0x238>
 8007858:	2304      	movs	r3, #4
 800785a:	76fb      	strb	r3, [r7, #27]
 800785c:	e008      	b.n	8007870 <UART_SetConfig+0x238>
 800785e:	2308      	movs	r3, #8
 8007860:	76fb      	strb	r3, [r7, #27]
 8007862:	e005      	b.n	8007870 <UART_SetConfig+0x238>
 8007864:	2310      	movs	r3, #16
 8007866:	76fb      	strb	r3, [r7, #27]
 8007868:	bf00      	nop
 800786a:	e001      	b.n	8007870 <UART_SetConfig+0x238>
 800786c:	2310      	movs	r3, #16
 800786e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a2e      	ldr	r2, [pc, #184]	; (8007930 <UART_SetConfig+0x2f8>)
 8007876:	4293      	cmp	r3, r2
 8007878:	f040 80e9 	bne.w	8007a4e <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800787c:	7efb      	ldrb	r3, [r7, #27]
 800787e:	2b08      	cmp	r3, #8
 8007880:	d823      	bhi.n	80078ca <UART_SetConfig+0x292>
 8007882:	a201      	add	r2, pc, #4	; (adr r2, 8007888 <UART_SetConfig+0x250>)
 8007884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007888:	080078ad 	.word	0x080078ad
 800788c:	080078cb 	.word	0x080078cb
 8007890:	080078b5 	.word	0x080078b5
 8007894:	080078cb 	.word	0x080078cb
 8007898:	080078bb 	.word	0x080078bb
 800789c:	080078cb 	.word	0x080078cb
 80078a0:	080078cb 	.word	0x080078cb
 80078a4:	080078cb 	.word	0x080078cb
 80078a8:	080078c3 	.word	0x080078c3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80078ac:	f7fe ff96 	bl	80067dc <HAL_RCC_GetPCLK1Freq>
 80078b0:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80078b2:	e00d      	b.n	80078d0 <UART_SetConfig+0x298>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80078b4:	4b24      	ldr	r3, [pc, #144]	; (8007948 <UART_SetConfig+0x310>)
 80078b6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80078b8:	e00a      	b.n	80078d0 <UART_SetConfig+0x298>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80078ba:	f7fe fef9 	bl	80066b0 <HAL_RCC_GetSysClockFreq>
 80078be:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80078c0:	e006      	b.n	80078d0 <UART_SetConfig+0x298>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80078c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078c6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80078c8:	e002      	b.n	80078d0 <UART_SetConfig+0x298>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	74fb      	strb	r3, [r7, #19]
        break;
 80078ce:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f000 81ad 	beq.w	8007c32 <UART_SetConfig+0x5fa>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	4613      	mov	r3, r2
 80078de:	005b      	lsls	r3, r3, #1
 80078e0:	441a      	add	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d805      	bhi.n	80078f4 <UART_SetConfig+0x2bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d202      	bcs.n	80078fa <UART_SetConfig+0x2c2>
      {
        ret = HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	74fb      	strb	r3, [r7, #19]
 80078f8:	e19b      	b.n	8007c32 <UART_SetConfig+0x5fa>
      }
      else
      {
        switch (clocksource)
 80078fa:	7efb      	ldrb	r3, [r7, #27]
 80078fc:	2b08      	cmp	r3, #8
 80078fe:	f200 8093 	bhi.w	8007a28 <UART_SetConfig+0x3f0>
 8007902:	a201      	add	r2, pc, #4	; (adr r2, 8007908 <UART_SetConfig+0x2d0>)
 8007904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007908:	0800794d 	.word	0x0800794d
 800790c:	08007a29 	.word	0x08007a29
 8007910:	0800798d 	.word	0x0800798d
 8007914:	08007a29 	.word	0x08007a29
 8007918:	080079c1 	.word	0x080079c1
 800791c:	08007a29 	.word	0x08007a29
 8007920:	08007a29 	.word	0x08007a29
 8007924:	08007a29 	.word	0x08007a29
 8007928:	080079ff 	.word	0x080079ff
 800792c:	efff69f3 	.word	0xefff69f3
 8007930:	40008000 	.word	0x40008000
 8007934:	40013800 	.word	0x40013800
 8007938:	40021000 	.word	0x40021000
 800793c:	40004400 	.word	0x40004400
 8007940:	40004800 	.word	0x40004800
 8007944:	40004c00 	.word	0x40004c00
 8007948:	00f42400 	.word	0x00f42400
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800794c:	f7fe ff46 	bl	80067dc <HAL_RCC_GetPCLK1Freq>
 8007950:	4603      	mov	r3, r0
 8007952:	f04f 0400 	mov.w	r4, #0
 8007956:	ea4f 2904 	mov.w	r9, r4, lsl #8
 800795a:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 800795e:	ea4f 2803 	mov.w	r8, r3, lsl #8
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	085b      	lsrs	r3, r3, #1
 8007968:	f04f 0400 	mov.w	r4, #0
 800796c:	eb18 0003 	adds.w	r0, r8, r3
 8007970:	eb49 0104 	adc.w	r1, r9, r4
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	f04f 0400 	mov.w	r4, #0
 800797c:	461a      	mov	r2, r3
 800797e:	4623      	mov	r3, r4
 8007980:	f7f8 fc7e 	bl	8000280 <__aeabi_uldivmod>
 8007984:	4603      	mov	r3, r0
 8007986:	460c      	mov	r4, r1
 8007988:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800798a:	e050      	b.n	8007a2e <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	085b      	lsrs	r3, r3, #1
 8007992:	f04f 0400 	mov.w	r4, #0
 8007996:	49ad      	ldr	r1, [pc, #692]	; (8007c4c <UART_SetConfig+0x614>)
 8007998:	f04f 0200 	mov.w	r2, #0
 800799c:	eb13 0801 	adds.w	r8, r3, r1
 80079a0:	eb44 0902 	adc.w	r9, r4, r2
 80079a4:	4640      	mov	r0, r8
 80079a6:	4649      	mov	r1, r9
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	f04f 0400 	mov.w	r4, #0
 80079b0:	461a      	mov	r2, r3
 80079b2:	4623      	mov	r3, r4
 80079b4:	f7f8 fc64 	bl	8000280 <__aeabi_uldivmod>
 80079b8:	4603      	mov	r3, r0
 80079ba:	460c      	mov	r4, r1
 80079bc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80079be:	e036      	b.n	8007a2e <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80079c0:	f7fe fe76 	bl	80066b0 <HAL_RCC_GetSysClockFreq>
 80079c4:	4603      	mov	r3, r0
 80079c6:	461a      	mov	r2, r3
 80079c8:	f04f 0300 	mov.w	r3, #0
 80079cc:	021d      	lsls	r5, r3, #8
 80079ce:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 80079d2:	0214      	lsls	r4, r2, #8
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	085b      	lsrs	r3, r3, #1
 80079da:	461a      	mov	r2, r3
 80079dc:	f04f 0300 	mov.w	r3, #0
 80079e0:	18a0      	adds	r0, r4, r2
 80079e2:	eb45 0103 	adc.w	r1, r5, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f04f 0400 	mov.w	r4, #0
 80079ee:	461a      	mov	r2, r3
 80079f0:	4623      	mov	r3, r4
 80079f2:	f7f8 fc45 	bl	8000280 <__aeabi_uldivmod>
 80079f6:	4603      	mov	r3, r0
 80079f8:	460c      	mov	r4, r1
 80079fa:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80079fc:	e017      	b.n	8007a2e <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	085b      	lsrs	r3, r3, #1
 8007a04:	f04f 0400 	mov.w	r4, #0
 8007a08:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8007a0c:	f144 0100 	adc.w	r1, r4, #0
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	f04f 0400 	mov.w	r4, #0
 8007a18:	461a      	mov	r2, r3
 8007a1a:	4623      	mov	r3, r4
 8007a1c:	f7f8 fc30 	bl	8000280 <__aeabi_uldivmod>
 8007a20:	4603      	mov	r3, r0
 8007a22:	460c      	mov	r4, r1
 8007a24:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007a26:	e002      	b.n	8007a2e <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	74fb      	strb	r3, [r7, #19]
            break;
 8007a2c:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a34:	d308      	bcc.n	8007a48 <UART_SetConfig+0x410>
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a3c:	d204      	bcs.n	8007a48 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	60da      	str	r2, [r3, #12]
 8007a46:	e0f4      	b.n	8007c32 <UART_SetConfig+0x5fa>
        }
        else
        {
          ret = HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	74fb      	strb	r3, [r7, #19]
 8007a4c:	e0f1      	b.n	8007c32 <UART_SetConfig+0x5fa>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	69db      	ldr	r3, [r3, #28]
 8007a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a56:	d17e      	bne.n	8007b56 <UART_SetConfig+0x51e>
  {
    switch (clocksource)
 8007a58:	7efb      	ldrb	r3, [r7, #27]
 8007a5a:	2b08      	cmp	r3, #8
 8007a5c:	d85b      	bhi.n	8007b16 <UART_SetConfig+0x4de>
 8007a5e:	a201      	add	r2, pc, #4	; (adr r2, 8007a64 <UART_SetConfig+0x42c>)
 8007a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a64:	08007a89 	.word	0x08007a89
 8007a68:	08007aa7 	.word	0x08007aa7
 8007a6c:	08007ac5 	.word	0x08007ac5
 8007a70:	08007b17 	.word	0x08007b17
 8007a74:	08007ae1 	.word	0x08007ae1
 8007a78:	08007b17 	.word	0x08007b17
 8007a7c:	08007b17 	.word	0x08007b17
 8007a80:	08007b17 	.word	0x08007b17
 8007a84:	08007aff 	.word	0x08007aff
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007a88:	f7fe fea8 	bl	80067dc <HAL_RCC_GetPCLK1Freq>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	005a      	lsls	r2, r3, #1
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	085b      	lsrs	r3, r3, #1
 8007a96:	441a      	add	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007aa4:	e03a      	b.n	8007b1c <UART_SetConfig+0x4e4>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007aa6:	f7fe feaf 	bl	8006808 <HAL_RCC_GetPCLK2Freq>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	005a      	lsls	r2, r3, #1
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	085b      	lsrs	r3, r3, #1
 8007ab4:	441a      	add	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007ac2:	e02b      	b.n	8007b1c <UART_SetConfig+0x4e4>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	085b      	lsrs	r3, r3, #1
 8007aca:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8007ace:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	6852      	ldr	r2, [r2, #4]
 8007ad6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007ade:	e01d      	b.n	8007b1c <UART_SetConfig+0x4e4>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007ae0:	f7fe fde6 	bl	80066b0 <HAL_RCC_GetSysClockFreq>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	005a      	lsls	r2, r3, #1
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	085b      	lsrs	r3, r3, #1
 8007aee:	441a      	add	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007afc:	e00e      	b.n	8007b1c <UART_SetConfig+0x4e4>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	085b      	lsrs	r3, r3, #1
 8007b04:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007b14:	e002      	b.n	8007b1c <UART_SetConfig+0x4e4>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	74fb      	strb	r3, [r7, #19]
        break;
 8007b1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	2b0f      	cmp	r3, #15
 8007b20:	d916      	bls.n	8007b50 <UART_SetConfig+0x518>
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b28:	d212      	bcs.n	8007b50 <UART_SetConfig+0x518>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	f023 030f 	bic.w	r3, r3, #15
 8007b32:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	085b      	lsrs	r3, r3, #1
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	f003 0307 	and.w	r3, r3, #7
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	897b      	ldrh	r3, [r7, #10]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	897a      	ldrh	r2, [r7, #10]
 8007b4c:	60da      	str	r2, [r3, #12]
 8007b4e:	e070      	b.n	8007c32 <UART_SetConfig+0x5fa>
    }
    else
    {
      ret = HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	74fb      	strb	r3, [r7, #19]
 8007b54:	e06d      	b.n	8007c32 <UART_SetConfig+0x5fa>
    }
  }
  else
  {
    switch (clocksource)
 8007b56:	7efb      	ldrb	r3, [r7, #27]
 8007b58:	2b08      	cmp	r3, #8
 8007b5a:	d859      	bhi.n	8007c10 <UART_SetConfig+0x5d8>
 8007b5c:	a201      	add	r2, pc, #4	; (adr r2, 8007b64 <UART_SetConfig+0x52c>)
 8007b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b62:	bf00      	nop
 8007b64:	08007b89 	.word	0x08007b89
 8007b68:	08007ba5 	.word	0x08007ba5
 8007b6c:	08007bc1 	.word	0x08007bc1
 8007b70:	08007c11 	.word	0x08007c11
 8007b74:	08007bdd 	.word	0x08007bdd
 8007b78:	08007c11 	.word	0x08007c11
 8007b7c:	08007c11 	.word	0x08007c11
 8007b80:	08007c11 	.word	0x08007c11
 8007b84:	08007bf9 	.word	0x08007bf9
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007b88:	f7fe fe28 	bl	80067dc <HAL_RCC_GetPCLK1Freq>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	085b      	lsrs	r3, r3, #1
 8007b94:	441a      	add	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007ba2:	e038      	b.n	8007c16 <UART_SetConfig+0x5de>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007ba4:	f7fe fe30 	bl	8006808 <HAL_RCC_GetPCLK2Freq>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	085b      	lsrs	r3, r3, #1
 8007bb0:	441a      	add	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007bbe:	e02a      	b.n	8007c16 <UART_SetConfig+0x5de>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	085b      	lsrs	r3, r3, #1
 8007bc6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8007bca:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	6852      	ldr	r2, [r2, #4]
 8007bd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007bda:	e01c      	b.n	8007c16 <UART_SetConfig+0x5de>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007bdc:	f7fe fd68 	bl	80066b0 <HAL_RCC_GetSysClockFreq>
 8007be0:	4602      	mov	r2, r0
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	085b      	lsrs	r3, r3, #1
 8007be8:	441a      	add	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007bf6:	e00e      	b.n	8007c16 <UART_SetConfig+0x5de>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	085b      	lsrs	r3, r3, #1
 8007bfe:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007c0e:	e002      	b.n	8007c16 <UART_SetConfig+0x5de>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	74fb      	strb	r3, [r7, #19]
        break;
 8007c14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	2b0f      	cmp	r3, #15
 8007c1a:	d908      	bls.n	8007c2e <UART_SetConfig+0x5f6>
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c22:	d204      	bcs.n	8007c2e <UART_SetConfig+0x5f6>
    {
      huart->Instance->BRR = usartdiv;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	60da      	str	r2, [r3, #12]
 8007c2c:	e001      	b.n	8007c32 <UART_SetConfig+0x5fa>
    }
    else
    {
      ret = HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007c3e:	7cfb      	ldrb	r3, [r7, #19]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3720      	adds	r7, #32
 8007c44:	46bd      	mov	sp, r7
 8007c46:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007c4a:	bf00      	nop
 8007c4c:	f4240000 	.word	0xf4240000

08007c50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5c:	f003 0301 	and.w	r3, r3, #1
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00a      	beq.n	8007c7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	6812      	ldr	r2, [r2, #0]
 8007c6c:	6852      	ldr	r2, [r2, #4]
 8007c6e:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007c76:	430a      	orrs	r2, r1
 8007c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7e:	f003 0302 	and.w	r3, r3, #2
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00a      	beq.n	8007c9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	6812      	ldr	r2, [r2, #0]
 8007c8e:	6852      	ldr	r2, [r2, #4]
 8007c90:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007c98:	430a      	orrs	r2, r1
 8007c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca0:	f003 0304 	and.w	r3, r3, #4
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00a      	beq.n	8007cbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	6812      	ldr	r2, [r2, #0]
 8007cb0:	6852      	ldr	r2, [r2, #4]
 8007cb2:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007cba:	430a      	orrs	r2, r1
 8007cbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc2:	f003 0308 	and.w	r3, r3, #8
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00a      	beq.n	8007ce0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	6812      	ldr	r2, [r2, #0]
 8007cd2:	6852      	ldr	r2, [r2, #4]
 8007cd4:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007cdc:	430a      	orrs	r2, r1
 8007cde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce4:	f003 0310 	and.w	r3, r3, #16
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00a      	beq.n	8007d02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	6812      	ldr	r2, [r2, #0]
 8007cf4:	6892      	ldr	r2, [r2, #8]
 8007cf6:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007cfe:	430a      	orrs	r2, r1
 8007d00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d06:	f003 0320 	and.w	r3, r3, #32
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00a      	beq.n	8007d24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	6812      	ldr	r2, [r2, #0]
 8007d16:	6892      	ldr	r2, [r2, #8]
 8007d18:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007d20:	430a      	orrs	r2, r1
 8007d22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d01a      	beq.n	8007d66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	6812      	ldr	r2, [r2, #0]
 8007d38:	6852      	ldr	r2, [r2, #4]
 8007d3a:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007d42:	430a      	orrs	r2, r1
 8007d44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d4e:	d10a      	bne.n	8007d66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	6812      	ldr	r2, [r2, #0]
 8007d58:	6852      	ldr	r2, [r2, #4]
 8007d5a:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007d62:	430a      	orrs	r2, r1
 8007d64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00a      	beq.n	8007d88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	6812      	ldr	r2, [r2, #0]
 8007d7a:	6852      	ldr	r2, [r2, #4]
 8007d7c:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007d84:	430a      	orrs	r2, r1
 8007d86:	605a      	str	r2, [r3, #4]
  }
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af02      	add	r7, sp, #8
 8007d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007da2:	f7fc fe15 	bl	80049d0 <HAL_GetTick>
 8007da6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f003 0308 	and.w	r3, r3, #8
 8007db2:	2b08      	cmp	r3, #8
 8007db4:	d10e      	bne.n	8007dd4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007db6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f82a 	bl	8007e1e <UART_WaitOnFlagUntilTimeout>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d001      	beq.n	8007dd4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	e020      	b.n	8007e16 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 0304 	and.w	r3, r3, #4
 8007dde:	2b04      	cmp	r3, #4
 8007de0:	d10e      	bne.n	8007e00 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007de2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007de6:	9300      	str	r3, [sp, #0]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f814 	bl	8007e1e <UART_WaitOnFlagUntilTimeout>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d001      	beq.n	8007e00 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	e00a      	b.n	8007e16 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2220      	movs	r2, #32
 8007e04:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2220      	movs	r2, #32
 8007e0a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b084      	sub	sp, #16
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	60f8      	str	r0, [r7, #12]
 8007e26:	60b9      	str	r1, [r7, #8]
 8007e28:	603b      	str	r3, [r7, #0]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e2e:	e02a      	b.n	8007e86 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e36:	d026      	beq.n	8007e86 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e38:	f7fc fdca 	bl	80049d0 <HAL_GetTick>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	1ad2      	subs	r2, r2, r3
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d802      	bhi.n	8007e4e <UART_WaitOnFlagUntilTimeout+0x30>
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d11b      	bne.n	8007e86 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	6812      	ldr	r2, [r2, #0]
 8007e56:	6812      	ldr	r2, [r2, #0]
 8007e58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007e5c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	6812      	ldr	r2, [r2, #0]
 8007e66:	6892      	ldr	r2, [r2, #8]
 8007e68:	f022 0201 	bic.w	r2, r2, #1
 8007e6c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2220      	movs	r2, #32
 8007e72:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2220      	movs	r2, #32
 8007e78:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e00f      	b.n	8007ea6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	69da      	ldr	r2, [r3, #28]
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	401a      	ands	r2, r3
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	bf0c      	ite	eq
 8007e96:	2301      	moveq	r3, #1
 8007e98:	2300      	movne	r3, #0
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	79fb      	ldrb	r3, [r7, #7]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d0c5      	beq.n	8007e30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b085      	sub	sp, #20
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007ebc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ec0:	2b84      	cmp	r3, #132	; 0x84
 8007ec2:	d005      	beq.n	8007ed0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007ec4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	4413      	add	r3, r2
 8007ecc:	3303      	adds	r3, #3
 8007ece:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3714      	adds	r7, #20
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr

08007ede <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007ee2:	f001 fa87 	bl	80093f4 <vTaskStartScheduler>
  
  return osOK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	bd80      	pop	{r7, pc}

08007eec <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eee:	b087      	sub	sp, #28
 8007ef0:	af02      	add	r7, sp, #8
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685c      	ldr	r4, [r3, #4]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f02:	b29e      	uxth	r6, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7ff ffcf 	bl	8007eae <makeFreeRtosPriority>
 8007f10:	4602      	mov	r2, r0
 8007f12:	f107 030c 	add.w	r3, r7, #12
 8007f16:	9301      	str	r3, [sp, #4]
 8007f18:	9200      	str	r2, [sp, #0]
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	4632      	mov	r2, r6
 8007f1e:	4629      	mov	r1, r5
 8007f20:	4620      	mov	r0, r4
 8007f22:	f001 f88f 	bl	8009044 <xTaskCreate>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d001      	beq.n	8007f30 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	e000      	b.n	8007f32 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8007f30:	68fb      	ldr	r3, [r7, #12]
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3714      	adds	r7, #20
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f3a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b084      	sub	sp, #16
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d001      	beq.n	8007f50 <osDelay+0x16>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	e000      	b.n	8007f52 <osDelay+0x18>
 8007f50:	2301      	movs	r3, #1
 8007f52:	4618      	mov	r0, r3
 8007f54:	f001 fa1a 	bl	800938c <vTaskDelay>
  
  return osOK;
 8007f58:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
	...

08007f64 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b08a      	sub	sp, #40	; 0x28
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f70:	f001 fa86 	bl	8009480 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f74:	4b57      	ldr	r3, [pc, #348]	; (80080d4 <pvPortMalloc+0x170>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d101      	bne.n	8007f80 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f7c:	f000 f918 	bl	80081b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f80:	4b55      	ldr	r3, [pc, #340]	; (80080d8 <pvPortMalloc+0x174>)
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4013      	ands	r3, r2
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f040 808c 	bne.w	80080a6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d01c      	beq.n	8007fce <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007f94:	2208      	movs	r2, #8
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4413      	add	r3, r2
 8007f9a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f003 0307 	and.w	r3, r3, #7
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d013      	beq.n	8007fce <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f023 0307 	bic.w	r3, r3, #7
 8007fac:	3308      	adds	r3, #8
 8007fae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f003 0307 	and.w	r3, r3, #7
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d009      	beq.n	8007fce <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbe:	f383 8811 	msr	BASEPRI, r3
 8007fc2:	f3bf 8f6f 	isb	sy
 8007fc6:	f3bf 8f4f 	dsb	sy
 8007fca:	617b      	str	r3, [r7, #20]
 8007fcc:	e7fe      	b.n	8007fcc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d068      	beq.n	80080a6 <pvPortMalloc+0x142>
 8007fd4:	4b41      	ldr	r3, [pc, #260]	; (80080dc <pvPortMalloc+0x178>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d863      	bhi.n	80080a6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007fde:	4b40      	ldr	r3, [pc, #256]	; (80080e0 <pvPortMalloc+0x17c>)
 8007fe0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007fe2:	4b3f      	ldr	r3, [pc, #252]	; (80080e0 <pvPortMalloc+0x17c>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fe8:	e004      	b.n	8007ff4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d203      	bcs.n	8008006 <pvPortMalloc+0xa2>
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1f1      	bne.n	8007fea <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008006:	4b33      	ldr	r3, [pc, #204]	; (80080d4 <pvPortMalloc+0x170>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800800c:	429a      	cmp	r2, r3
 800800e:	d04a      	beq.n	80080a6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008010:	6a3b      	ldr	r3, [r7, #32]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2208      	movs	r2, #8
 8008016:	4413      	add	r3, r2
 8008018:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	6a3b      	ldr	r3, [r7, #32]
 8008020:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	685a      	ldr	r2, [r3, #4]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	1ad2      	subs	r2, r2, r3
 800802a:	2308      	movs	r3, #8
 800802c:	005b      	lsls	r3, r3, #1
 800802e:	429a      	cmp	r2, r3
 8008030:	d91e      	bls.n	8008070 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4413      	add	r3, r2
 8008038:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	f003 0307 	and.w	r3, r3, #7
 8008040:	2b00      	cmp	r3, #0
 8008042:	d009      	beq.n	8008058 <pvPortMalloc+0xf4>
 8008044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008048:	f383 8811 	msr	BASEPRI, r3
 800804c:	f3bf 8f6f 	isb	sy
 8008050:	f3bf 8f4f 	dsb	sy
 8008054:	613b      	str	r3, [r7, #16]
 8008056:	e7fe      	b.n	8008056 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805a:	685a      	ldr	r2, [r3, #4]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	1ad2      	subs	r2, r2, r3
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800806a:	69b8      	ldr	r0, [r7, #24]
 800806c:	f000 f902 	bl	8008274 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008070:	4b1a      	ldr	r3, [pc, #104]	; (80080dc <pvPortMalloc+0x178>)
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	4a18      	ldr	r2, [pc, #96]	; (80080dc <pvPortMalloc+0x178>)
 800807c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800807e:	4b17      	ldr	r3, [pc, #92]	; (80080dc <pvPortMalloc+0x178>)
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	4b18      	ldr	r3, [pc, #96]	; (80080e4 <pvPortMalloc+0x180>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	429a      	cmp	r2, r3
 8008088:	d203      	bcs.n	8008092 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800808a:	4b14      	ldr	r3, [pc, #80]	; (80080dc <pvPortMalloc+0x178>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a15      	ldr	r2, [pc, #84]	; (80080e4 <pvPortMalloc+0x180>)
 8008090:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008094:	685a      	ldr	r2, [r3, #4]
 8008096:	4b10      	ldr	r3, [pc, #64]	; (80080d8 <pvPortMalloc+0x174>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	431a      	orrs	r2, r3
 800809c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80080a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a2:	2200      	movs	r2, #0
 80080a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80080a6:	f001 f9f9 	bl	800949c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	f003 0307 	and.w	r3, r3, #7
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d009      	beq.n	80080c8 <pvPortMalloc+0x164>
 80080b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b8:	f383 8811 	msr	BASEPRI, r3
 80080bc:	f3bf 8f6f 	isb	sy
 80080c0:	f3bf 8f4f 	dsb	sy
 80080c4:	60fb      	str	r3, [r7, #12]
 80080c6:	e7fe      	b.n	80080c6 <pvPortMalloc+0x162>
	return pvReturn;
 80080c8:	69fb      	ldr	r3, [r7, #28]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3728      	adds	r7, #40	; 0x28
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	2000777c 	.word	0x2000777c
 80080d8:	20007788 	.word	0x20007788
 80080dc:	20007780 	.word	0x20007780
 80080e0:	20007774 	.word	0x20007774
 80080e4:	20007784 	.word	0x20007784

080080e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b086      	sub	sp, #24
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d046      	beq.n	8008188 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80080fa:	2308      	movs	r3, #8
 80080fc:	425b      	negs	r3, r3
 80080fe:	697a      	ldr	r2, [r7, #20]
 8008100:	4413      	add	r3, r2
 8008102:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	685a      	ldr	r2, [r3, #4]
 800810c:	4b20      	ldr	r3, [pc, #128]	; (8008190 <vPortFree+0xa8>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4013      	ands	r3, r2
 8008112:	2b00      	cmp	r3, #0
 8008114:	d109      	bne.n	800812a <vPortFree+0x42>
 8008116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811a:	f383 8811 	msr	BASEPRI, r3
 800811e:	f3bf 8f6f 	isb	sy
 8008122:	f3bf 8f4f 	dsb	sy
 8008126:	60fb      	str	r3, [r7, #12]
 8008128:	e7fe      	b.n	8008128 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d009      	beq.n	8008146 <vPortFree+0x5e>
 8008132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008136:	f383 8811 	msr	BASEPRI, r3
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	60bb      	str	r3, [r7, #8]
 8008144:	e7fe      	b.n	8008144 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	685a      	ldr	r2, [r3, #4]
 800814a:	4b11      	ldr	r3, [pc, #68]	; (8008190 <vPortFree+0xa8>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4013      	ands	r3, r2
 8008150:	2b00      	cmp	r3, #0
 8008152:	d019      	beq.n	8008188 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d115      	bne.n	8008188 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	4b0b      	ldr	r3, [pc, #44]	; (8008190 <vPortFree+0xa8>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	43db      	mvns	r3, r3
 8008166:	401a      	ands	r2, r3
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800816c:	f001 f988 	bl	8009480 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	685a      	ldr	r2, [r3, #4]
 8008174:	4b07      	ldr	r3, [pc, #28]	; (8008194 <vPortFree+0xac>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4413      	add	r3, r2
 800817a:	4a06      	ldr	r2, [pc, #24]	; (8008194 <vPortFree+0xac>)
 800817c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800817e:	6938      	ldr	r0, [r7, #16]
 8008180:	f000 f878 	bl	8008274 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008184:	f001 f98a 	bl	800949c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008188:	bf00      	nop
 800818a:	3718      	adds	r7, #24
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	20007788 	.word	0x20007788
 8008194:	20007780 	.word	0x20007780

08008198 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8008198:	b480      	push	{r7}
 800819a:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800819c:	4b03      	ldr	r3, [pc, #12]	; (80081ac <xPortGetFreeHeapSize+0x14>)
 800819e:	681b      	ldr	r3, [r3, #0]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	20007780 	.word	0x20007780

080081b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80081b0:	b480      	push	{r7}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80081b6:	f247 5330 	movw	r3, #30000	; 0x7530
 80081ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80081bc:	4b27      	ldr	r3, [pc, #156]	; (800825c <prvHeapInit+0xac>)
 80081be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f003 0307 	and.w	r3, r3, #7
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00c      	beq.n	80081e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	3307      	adds	r3, #7
 80081ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f023 0307 	bic.w	r3, r3, #7
 80081d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	1ad3      	subs	r3, r2, r3
 80081de:	4a1f      	ldr	r2, [pc, #124]	; (800825c <prvHeapInit+0xac>)
 80081e0:	4413      	add	r3, r2
 80081e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80081e8:	4a1d      	ldr	r2, [pc, #116]	; (8008260 <prvHeapInit+0xb0>)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80081ee:	4b1c      	ldr	r3, [pc, #112]	; (8008260 <prvHeapInit+0xb0>)
 80081f0:	2200      	movs	r2, #0
 80081f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	4413      	add	r3, r2
 80081fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80081fc:	2208      	movs	r2, #8
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	1a9b      	subs	r3, r3, r2
 8008202:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f023 0307 	bic.w	r3, r3, #7
 800820a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	4a15      	ldr	r2, [pc, #84]	; (8008264 <prvHeapInit+0xb4>)
 8008210:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008212:	4b14      	ldr	r3, [pc, #80]	; (8008264 <prvHeapInit+0xb4>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2200      	movs	r2, #0
 8008218:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800821a:	4b12      	ldr	r3, [pc, #72]	; (8008264 <prvHeapInit+0xb4>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2200      	movs	r2, #0
 8008220:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	1ad2      	subs	r2, r2, r3
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008230:	4b0c      	ldr	r3, [pc, #48]	; (8008264 <prvHeapInit+0xb4>)
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	4a0a      	ldr	r2, [pc, #40]	; (8008268 <prvHeapInit+0xb8>)
 800823e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	4a09      	ldr	r2, [pc, #36]	; (800826c <prvHeapInit+0xbc>)
 8008246:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008248:	4b09      	ldr	r3, [pc, #36]	; (8008270 <prvHeapInit+0xc0>)
 800824a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800824e:	601a      	str	r2, [r3, #0]
}
 8008250:	bf00      	nop
 8008252:	3714      	adds	r7, #20
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr
 800825c:	20000244 	.word	0x20000244
 8008260:	20007774 	.word	0x20007774
 8008264:	2000777c 	.word	0x2000777c
 8008268:	20007784 	.word	0x20007784
 800826c:	20007780 	.word	0x20007780
 8008270:	20007788 	.word	0x20007788

08008274 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800827c:	4b28      	ldr	r3, [pc, #160]	; (8008320 <prvInsertBlockIntoFreeList+0xac>)
 800827e:	60fb      	str	r3, [r7, #12]
 8008280:	e002      	b.n	8008288 <prvInsertBlockIntoFreeList+0x14>
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	60fb      	str	r3, [r7, #12]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	429a      	cmp	r2, r3
 8008290:	d3f7      	bcc.n	8008282 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	68ba      	ldr	r2, [r7, #8]
 800829c:	441a      	add	r2, r3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d108      	bne.n	80082b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	685a      	ldr	r2, [r3, #4]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	441a      	add	r2, r3
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	441a      	add	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d118      	bne.n	80082fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	4b15      	ldr	r3, [pc, #84]	; (8008324 <prvInsertBlockIntoFreeList+0xb0>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d00d      	beq.n	80082f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685a      	ldr	r2, [r3, #4]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	441a      	add	r2, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	601a      	str	r2, [r3, #0]
 80082f0:	e008      	b.n	8008304 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80082f2:	4b0c      	ldr	r3, [pc, #48]	; (8008324 <prvInsertBlockIntoFreeList+0xb0>)
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	601a      	str	r2, [r3, #0]
 80082fa:	e003      	b.n	8008304 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	429a      	cmp	r2, r3
 800830a:	d002      	beq.n	8008312 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008312:	bf00      	nop
 8008314:	3714      	adds	r7, #20
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	20007774 	.word	0x20007774
 8008324:	2000777c 	.word	0x2000777c

08008328 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f103 0208 	add.w	r2, r3, #8
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f04f 32ff 	mov.w	r2, #4294967295
 8008340:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f103 0208 	add.w	r2, r3, #8
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f103 0208 	add.w	r2, r3, #8
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008376:	bf00      	nop
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008382:	b480      	push	{r7}
 8008384:	b085      	sub	sp, #20
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
 800838a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	689a      	ldr	r2, [r3, #8]
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	683a      	ldr	r2, [r7, #0]
 80083a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	683a      	ldr	r2, [r7, #0]
 80083ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	1c5a      	adds	r2, r3, #1
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	601a      	str	r2, [r3, #0]
}
 80083be:	bf00      	nop
 80083c0:	3714      	adds	r7, #20
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80083ca:	b480      	push	{r7}
 80083cc:	b085      	sub	sp, #20
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
 80083d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e0:	d103      	bne.n	80083ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	60fb      	str	r3, [r7, #12]
 80083e8:	e00c      	b.n	8008404 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	3308      	adds	r3, #8
 80083ee:	60fb      	str	r3, [r7, #12]
 80083f0:	e002      	b.n	80083f8 <vListInsert+0x2e>
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	60fb      	str	r3, [r7, #12]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	429a      	cmp	r2, r3
 8008402:	d9f6      	bls.n	80083f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	685a      	ldr	r2, [r3, #4]
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	683a      	ldr	r2, [r7, #0]
 8008412:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	683a      	ldr	r2, [r7, #0]
 800841e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	1c5a      	adds	r2, r3, #1
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	601a      	str	r2, [r3, #0]
}
 8008430:	bf00      	nop
 8008432:	3714      	adds	r7, #20
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	6892      	ldr	r2, [r2, #8]
 8008452:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	6852      	ldr	r2, [r2, #4]
 800845c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	685a      	ldr	r2, [r3, #4]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	429a      	cmp	r2, r3
 8008466:	d103      	bne.n	8008470 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	689a      	ldr	r2, [r3, #8]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	1e5a      	subs	r2, r3, #1
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
}
 8008484:	4618      	mov	r0, r3
 8008486:	3714      	adds	r7, #20
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	3b04      	subs	r3, #4
 80084a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80084a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	3b04      	subs	r3, #4
 80084ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	f023 0201 	bic.w	r2, r3, #1
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	3b04      	subs	r3, #4
 80084be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084c0:	4a0c      	ldr	r2, [pc, #48]	; (80084f4 <pxPortInitialiseStack+0x64>)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	3b14      	subs	r3, #20
 80084ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	3b04      	subs	r3, #4
 80084d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f06f 0202 	mvn.w	r2, #2
 80084de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	3b20      	subs	r3, #32
 80084e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80084e6:	68fb      	ldr	r3, [r7, #12]
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3714      	adds	r7, #20
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr
 80084f4:	080084f9 	.word	0x080084f9

080084f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084f8:	b480      	push	{r7}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80084fe:	2300      	movs	r3, #0
 8008500:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008502:	4b11      	ldr	r3, [pc, #68]	; (8008548 <prvTaskExitError+0x50>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800850a:	d009      	beq.n	8008520 <prvTaskExitError+0x28>
 800850c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008510:	f383 8811 	msr	BASEPRI, r3
 8008514:	f3bf 8f6f 	isb	sy
 8008518:	f3bf 8f4f 	dsb	sy
 800851c:	60fb      	str	r3, [r7, #12]
 800851e:	e7fe      	b.n	800851e <prvTaskExitError+0x26>
 8008520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008524:	f383 8811 	msr	BASEPRI, r3
 8008528:	f3bf 8f6f 	isb	sy
 800852c:	f3bf 8f4f 	dsb	sy
 8008530:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008532:	bf00      	nop
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d0fc      	beq.n	8008534 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800853a:	bf00      	nop
 800853c:	3714      	adds	r7, #20
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop
 8008548:	200000e0 	.word	0x200000e0
 800854c:	00000000 	.word	0x00000000

08008550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008550:	4b07      	ldr	r3, [pc, #28]	; (8008570 <pxCurrentTCBConst2>)
 8008552:	6819      	ldr	r1, [r3, #0]
 8008554:	6808      	ldr	r0, [r1, #0]
 8008556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800855a:	f380 8809 	msr	PSP, r0
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f04f 0000 	mov.w	r0, #0
 8008566:	f380 8811 	msr	BASEPRI, r0
 800856a:	4770      	bx	lr
 800856c:	f3af 8000 	nop.w

08008570 <pxCurrentTCBConst2>:
 8008570:	20007794 	.word	0x20007794
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008574:	bf00      	nop
 8008576:	bf00      	nop

08008578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008578:	4808      	ldr	r0, [pc, #32]	; (800859c <prvPortStartFirstTask+0x24>)
 800857a:	6800      	ldr	r0, [r0, #0]
 800857c:	6800      	ldr	r0, [r0, #0]
 800857e:	f380 8808 	msr	MSP, r0
 8008582:	f04f 0000 	mov.w	r0, #0
 8008586:	f380 8814 	msr	CONTROL, r0
 800858a:	b662      	cpsie	i
 800858c:	b661      	cpsie	f
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	f3bf 8f6f 	isb	sy
 8008596:	df00      	svc	0
 8008598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800859a:	bf00      	nop
 800859c:	e000ed08 	.word	0xe000ed08

080085a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80085a6:	4b44      	ldr	r3, [pc, #272]	; (80086b8 <xPortStartScheduler+0x118>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a44      	ldr	r2, [pc, #272]	; (80086bc <xPortStartScheduler+0x11c>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d109      	bne.n	80085c4 <xPortStartScheduler+0x24>
 80085b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b4:	f383 8811 	msr	BASEPRI, r3
 80085b8:	f3bf 8f6f 	isb	sy
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	613b      	str	r3, [r7, #16]
 80085c2:	e7fe      	b.n	80085c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80085c4:	4b3c      	ldr	r3, [pc, #240]	; (80086b8 <xPortStartScheduler+0x118>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a3d      	ldr	r2, [pc, #244]	; (80086c0 <xPortStartScheduler+0x120>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d109      	bne.n	80085e2 <xPortStartScheduler+0x42>
 80085ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d2:	f383 8811 	msr	BASEPRI, r3
 80085d6:	f3bf 8f6f 	isb	sy
 80085da:	f3bf 8f4f 	dsb	sy
 80085de:	60fb      	str	r3, [r7, #12]
 80085e0:	e7fe      	b.n	80085e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085e2:	4b38      	ldr	r3, [pc, #224]	; (80086c4 <xPortStartScheduler+0x124>)
 80085e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	22ff      	movs	r2, #255	; 0xff
 80085f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085fc:	78fb      	ldrb	r3, [r7, #3]
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008604:	b2da      	uxtb	r2, r3
 8008606:	4b30      	ldr	r3, [pc, #192]	; (80086c8 <xPortStartScheduler+0x128>)
 8008608:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800860a:	4b30      	ldr	r3, [pc, #192]	; (80086cc <xPortStartScheduler+0x12c>)
 800860c:	2207      	movs	r2, #7
 800860e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008610:	e009      	b.n	8008626 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008612:	4b2e      	ldr	r3, [pc, #184]	; (80086cc <xPortStartScheduler+0x12c>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	3b01      	subs	r3, #1
 8008618:	4a2c      	ldr	r2, [pc, #176]	; (80086cc <xPortStartScheduler+0x12c>)
 800861a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800861c:	78fb      	ldrb	r3, [r7, #3]
 800861e:	b2db      	uxtb	r3, r3
 8008620:	005b      	lsls	r3, r3, #1
 8008622:	b2db      	uxtb	r3, r3
 8008624:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008626:	78fb      	ldrb	r3, [r7, #3]
 8008628:	b2db      	uxtb	r3, r3
 800862a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800862e:	2b80      	cmp	r3, #128	; 0x80
 8008630:	d0ef      	beq.n	8008612 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008632:	4b26      	ldr	r3, [pc, #152]	; (80086cc <xPortStartScheduler+0x12c>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f1c3 0307 	rsb	r3, r3, #7
 800863a:	2b04      	cmp	r3, #4
 800863c:	d009      	beq.n	8008652 <xPortStartScheduler+0xb2>
 800863e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008642:	f383 8811 	msr	BASEPRI, r3
 8008646:	f3bf 8f6f 	isb	sy
 800864a:	f3bf 8f4f 	dsb	sy
 800864e:	60bb      	str	r3, [r7, #8]
 8008650:	e7fe      	b.n	8008650 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008652:	4b1e      	ldr	r3, [pc, #120]	; (80086cc <xPortStartScheduler+0x12c>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	021b      	lsls	r3, r3, #8
 8008658:	4a1c      	ldr	r2, [pc, #112]	; (80086cc <xPortStartScheduler+0x12c>)
 800865a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800865c:	4b1b      	ldr	r3, [pc, #108]	; (80086cc <xPortStartScheduler+0x12c>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008664:	4a19      	ldr	r2, [pc, #100]	; (80086cc <xPortStartScheduler+0x12c>)
 8008666:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	b2da      	uxtb	r2, r3
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008670:	4a17      	ldr	r2, [pc, #92]	; (80086d0 <xPortStartScheduler+0x130>)
 8008672:	4b17      	ldr	r3, [pc, #92]	; (80086d0 <xPortStartScheduler+0x130>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800867a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800867c:	4a14      	ldr	r2, [pc, #80]	; (80086d0 <xPortStartScheduler+0x130>)
 800867e:	4b14      	ldr	r3, [pc, #80]	; (80086d0 <xPortStartScheduler+0x130>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008686:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008688:	f000 f8d6 	bl	8008838 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800868c:	4b11      	ldr	r3, [pc, #68]	; (80086d4 <xPortStartScheduler+0x134>)
 800868e:	2200      	movs	r2, #0
 8008690:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008692:	f000 f8f5 	bl	8008880 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008696:	4a10      	ldr	r2, [pc, #64]	; (80086d8 <xPortStartScheduler+0x138>)
 8008698:	4b0f      	ldr	r3, [pc, #60]	; (80086d8 <xPortStartScheduler+0x138>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80086a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80086a2:	f7ff ff69 	bl	8008578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80086a6:	f001 f861 	bl	800976c <vTaskSwitchContext>
	prvTaskExitError();
 80086aa:	f7ff ff25 	bl	80084f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3718      	adds	r7, #24
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	e000ed00 	.word	0xe000ed00
 80086bc:	410fc271 	.word	0x410fc271
 80086c0:	410fc270 	.word	0x410fc270
 80086c4:	e000e400 	.word	0xe000e400
 80086c8:	2000778c 	.word	0x2000778c
 80086cc:	20007790 	.word	0x20007790
 80086d0:	e000ed20 	.word	0xe000ed20
 80086d4:	200000e0 	.word	0x200000e0
 80086d8:	e000ef34 	.word	0xe000ef34

080086dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e6:	f383 8811 	msr	BASEPRI, r3
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80086f4:	4b0e      	ldr	r3, [pc, #56]	; (8008730 <vPortEnterCritical+0x54>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	3301      	adds	r3, #1
 80086fa:	4a0d      	ldr	r2, [pc, #52]	; (8008730 <vPortEnterCritical+0x54>)
 80086fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80086fe:	4b0c      	ldr	r3, [pc, #48]	; (8008730 <vPortEnterCritical+0x54>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2b01      	cmp	r3, #1
 8008704:	d10e      	bne.n	8008724 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008706:	4b0b      	ldr	r3, [pc, #44]	; (8008734 <vPortEnterCritical+0x58>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	b2db      	uxtb	r3, r3
 800870c:	2b00      	cmp	r3, #0
 800870e:	d009      	beq.n	8008724 <vPortEnterCritical+0x48>
 8008710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008714:	f383 8811 	msr	BASEPRI, r3
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	f3bf 8f4f 	dsb	sy
 8008720:	603b      	str	r3, [r7, #0]
 8008722:	e7fe      	b.n	8008722 <vPortEnterCritical+0x46>
	}
}
 8008724:	bf00      	nop
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr
 8008730:	200000e0 	.word	0x200000e0
 8008734:	e000ed04 	.word	0xe000ed04

08008738 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800873e:	4b11      	ldr	r3, [pc, #68]	; (8008784 <vPortExitCritical+0x4c>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d109      	bne.n	800875a <vPortExitCritical+0x22>
 8008746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874a:	f383 8811 	msr	BASEPRI, r3
 800874e:	f3bf 8f6f 	isb	sy
 8008752:	f3bf 8f4f 	dsb	sy
 8008756:	607b      	str	r3, [r7, #4]
 8008758:	e7fe      	b.n	8008758 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800875a:	4b0a      	ldr	r3, [pc, #40]	; (8008784 <vPortExitCritical+0x4c>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3b01      	subs	r3, #1
 8008760:	4a08      	ldr	r2, [pc, #32]	; (8008784 <vPortExitCritical+0x4c>)
 8008762:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008764:	4b07      	ldr	r3, [pc, #28]	; (8008784 <vPortExitCritical+0x4c>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d104      	bne.n	8008776 <vPortExitCritical+0x3e>
 800876c:	2300      	movs	r3, #0
 800876e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008776:	bf00      	nop
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	200000e0 	.word	0x200000e0
	...

08008790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008790:	f3ef 8009 	mrs	r0, PSP
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	4b15      	ldr	r3, [pc, #84]	; (80087f0 <pxCurrentTCBConst>)
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	f01e 0f10 	tst.w	lr, #16
 80087a0:	bf08      	it	eq
 80087a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80087a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087aa:	6010      	str	r0, [r2, #0]
 80087ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80087b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80087b4:	f380 8811 	msr	BASEPRI, r0
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f000 ffd4 	bl	800976c <vTaskSwitchContext>
 80087c4:	f04f 0000 	mov.w	r0, #0
 80087c8:	f380 8811 	msr	BASEPRI, r0
 80087cc:	bc09      	pop	{r0, r3}
 80087ce:	6819      	ldr	r1, [r3, #0]
 80087d0:	6808      	ldr	r0, [r1, #0]
 80087d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d6:	f01e 0f10 	tst.w	lr, #16
 80087da:	bf08      	it	eq
 80087dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80087e0:	f380 8809 	msr	PSP, r0
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	f3af 8000 	nop.w

080087f0 <pxCurrentTCBConst>:
 80087f0:	20007794 	.word	0x20007794
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087f4:	bf00      	nop
 80087f6:	bf00      	nop

080087f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008810:	f000 fef0 	bl	80095f4 <xTaskIncrementTick>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d003      	beq.n	8008822 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800881a:	4b06      	ldr	r3, [pc, #24]	; (8008834 <SysTick_Handler+0x3c>)
 800881c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008820:	601a      	str	r2, [r3, #0]
 8008822:	2300      	movs	r3, #0
 8008824:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800882c:	bf00      	nop
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	e000ed04 	.word	0xe000ed04

08008838 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008838:	b480      	push	{r7}
 800883a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800883c:	4b0b      	ldr	r3, [pc, #44]	; (800886c <vPortSetupTimerInterrupt+0x34>)
 800883e:	2200      	movs	r2, #0
 8008840:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008842:	4b0b      	ldr	r3, [pc, #44]	; (8008870 <vPortSetupTimerInterrupt+0x38>)
 8008844:	2200      	movs	r2, #0
 8008846:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008848:	4a0a      	ldr	r2, [pc, #40]	; (8008874 <vPortSetupTimerInterrupt+0x3c>)
 800884a:	4b0b      	ldr	r3, [pc, #44]	; (8008878 <vPortSetupTimerInterrupt+0x40>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	490b      	ldr	r1, [pc, #44]	; (800887c <vPortSetupTimerInterrupt+0x44>)
 8008850:	fba1 1303 	umull	r1, r3, r1, r3
 8008854:	099b      	lsrs	r3, r3, #6
 8008856:	3b01      	subs	r3, #1
 8008858:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800885a:	4b04      	ldr	r3, [pc, #16]	; (800886c <vPortSetupTimerInterrupt+0x34>)
 800885c:	2207      	movs	r2, #7
 800885e:	601a      	str	r2, [r3, #0]
}
 8008860:	bf00      	nop
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	e000e010 	.word	0xe000e010
 8008870:	e000e018 	.word	0xe000e018
 8008874:	e000e014 	.word	0xe000e014
 8008878:	200000d4 	.word	0x200000d4
 800887c:	10624dd3 	.word	0x10624dd3

08008880 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008880:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008890 <vPortEnableVFP+0x10>
 8008884:	6801      	ldr	r1, [r0, #0]
 8008886:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800888a:	6001      	str	r1, [r0, #0]
 800888c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800888e:	bf00      	nop
 8008890:	e000ed88 	.word	0xe000ed88

08008894 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d109      	bne.n	80088bc <xQueueGenericReset+0x28>
	__asm volatile
 80088a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ac:	f383 8811 	msr	BASEPRI, r3
 80088b0:	f3bf 8f6f 	isb	sy
 80088b4:	f3bf 8f4f 	dsb	sy
 80088b8:	60bb      	str	r3, [r7, #8]
 80088ba:	e7fe      	b.n	80088ba <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80088bc:	f7ff ff0e 	bl	80086dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088c8:	68f9      	ldr	r1, [r7, #12]
 80088ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80088cc:	fb01 f303 	mul.w	r3, r1, r3
 80088d0:	441a      	add	r2, r3
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ec:	3b01      	subs	r3, #1
 80088ee:	68f9      	ldr	r1, [r7, #12]
 80088f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80088f2:	fb01 f303 	mul.w	r3, r1, r3
 80088f6:	441a      	add	r2, r3
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	22ff      	movs	r2, #255	; 0xff
 8008900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	22ff      	movs	r2, #255	; 0xff
 8008908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d114      	bne.n	800893c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	691b      	ldr	r3, [r3, #16]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d01a      	beq.n	8008950 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	3310      	adds	r3, #16
 800891e:	4618      	mov	r0, r3
 8008920:	f000 ffa2 	bl	8009868 <xTaskRemoveFromEventList>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	d012      	beq.n	8008950 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800892a:	4b0d      	ldr	r3, [pc, #52]	; (8008960 <xQueueGenericReset+0xcc>)
 800892c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008930:	601a      	str	r2, [r3, #0]
 8008932:	f3bf 8f4f 	dsb	sy
 8008936:	f3bf 8f6f 	isb	sy
 800893a:	e009      	b.n	8008950 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	3310      	adds	r3, #16
 8008940:	4618      	mov	r0, r3
 8008942:	f7ff fcf1 	bl	8008328 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	3324      	adds	r3, #36	; 0x24
 800894a:	4618      	mov	r0, r3
 800894c:	f7ff fcec 	bl	8008328 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008950:	f7ff fef2 	bl	8008738 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008954:	2301      	movs	r3, #1
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	e000ed04 	.word	0xe000ed04

08008964 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008964:	b580      	push	{r7, lr}
 8008966:	b08a      	sub	sp, #40	; 0x28
 8008968:	af02      	add	r7, sp, #8
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	4613      	mov	r3, r2
 8008970:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d109      	bne.n	800898c <xQueueGenericCreate+0x28>
 8008978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897c:	f383 8811 	msr	BASEPRI, r3
 8008980:	f3bf 8f6f 	isb	sy
 8008984:	f3bf 8f4f 	dsb	sy
 8008988:	613b      	str	r3, [r7, #16]
 800898a:	e7fe      	b.n	800898a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d102      	bne.n	8008998 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008992:	2300      	movs	r3, #0
 8008994:	61fb      	str	r3, [r7, #28]
 8008996:	e004      	b.n	80089a2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	68ba      	ldr	r2, [r7, #8]
 800899c:	fb02 f303 	mul.w	r3, r2, r3
 80089a0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	3348      	adds	r3, #72	; 0x48
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7ff fadc 	bl	8007f64 <pvPortMalloc>
 80089ac:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00b      	beq.n	80089cc <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	3348      	adds	r3, #72	; 0x48
 80089b8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80089ba:	79fa      	ldrb	r2, [r7, #7]
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	4613      	mov	r3, r2
 80089c2:	697a      	ldr	r2, [r7, #20]
 80089c4:	68b9      	ldr	r1, [r7, #8]
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	f000 f805 	bl	80089d6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80089cc:	69bb      	ldr	r3, [r7, #24]
	}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3720      	adds	r7, #32
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b084      	sub	sp, #16
 80089da:	af00      	add	r7, sp, #0
 80089dc:	60f8      	str	r0, [r7, #12]
 80089de:	60b9      	str	r1, [r7, #8]
 80089e0:	607a      	str	r2, [r7, #4]
 80089e2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d103      	bne.n	80089f2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	69ba      	ldr	r2, [r7, #24]
 80089ee:	601a      	str	r2, [r3, #0]
 80089f0:	e002      	b.n	80089f8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	68ba      	ldr	r2, [r7, #8]
 8008a02:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008a04:	2101      	movs	r1, #1
 8008a06:	69b8      	ldr	r0, [r7, #24]
 8008a08:	f7ff ff44 	bl	8008894 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008a0c:	bf00      	nop
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00e      	beq.n	8008a40 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008a34:	2300      	movs	r3, #0
 8008a36:	2200      	movs	r2, #0
 8008a38:	2100      	movs	r1, #0
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 f81c 	bl	8008a78 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008a40:	bf00      	nop
 8008a42:	3708      	adds	r7, #8
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b086      	sub	sp, #24
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	4603      	mov	r3, r0
 8008a50:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008a52:	2301      	movs	r3, #1
 8008a54:	617b      	str	r3, [r7, #20]
 8008a56:	2300      	movs	r3, #0
 8008a58:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008a5a:	79fb      	ldrb	r3, [r7, #7]
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	6939      	ldr	r1, [r7, #16]
 8008a60:	6978      	ldr	r0, [r7, #20]
 8008a62:	f7ff ff7f 	bl	8008964 <xQueueGenericCreate>
 8008a66:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f7ff ffd3 	bl	8008a14 <prvInitialiseMutex>

		return pxNewQueue;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
	}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3718      	adds	r7, #24
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b08e      	sub	sp, #56	; 0x38
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	607a      	str	r2, [r7, #4]
 8008a84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008a86:	2300      	movs	r3, #0
 8008a88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d109      	bne.n	8008aa8 <xQueueGenericSend+0x30>
 8008a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a98:	f383 8811 	msr	BASEPRI, r3
 8008a9c:	f3bf 8f6f 	isb	sy
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008aa6:	e7fe      	b.n	8008aa6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d103      	bne.n	8008ab6 <xQueueGenericSend+0x3e>
 8008aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d101      	bne.n	8008aba <xQueueGenericSend+0x42>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e000      	b.n	8008abc <xQueueGenericSend+0x44>
 8008aba:	2300      	movs	r3, #0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d109      	bne.n	8008ad4 <xQueueGenericSend+0x5c>
 8008ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac4:	f383 8811 	msr	BASEPRI, r3
 8008ac8:	f3bf 8f6f 	isb	sy
 8008acc:	f3bf 8f4f 	dsb	sy
 8008ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ad2:	e7fe      	b.n	8008ad2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d103      	bne.n	8008ae2 <xQueueGenericSend+0x6a>
 8008ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d101      	bne.n	8008ae6 <xQueueGenericSend+0x6e>
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e000      	b.n	8008ae8 <xQueueGenericSend+0x70>
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d109      	bne.n	8008b00 <xQueueGenericSend+0x88>
 8008aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af0:	f383 8811 	msr	BASEPRI, r3
 8008af4:	f3bf 8f6f 	isb	sy
 8008af8:	f3bf 8f4f 	dsb	sy
 8008afc:	623b      	str	r3, [r7, #32]
 8008afe:	e7fe      	b.n	8008afe <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b00:	f001 f850 	bl	8009ba4 <xTaskGetSchedulerState>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d102      	bne.n	8008b10 <xQueueGenericSend+0x98>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d101      	bne.n	8008b14 <xQueueGenericSend+0x9c>
 8008b10:	2301      	movs	r3, #1
 8008b12:	e000      	b.n	8008b16 <xQueueGenericSend+0x9e>
 8008b14:	2300      	movs	r3, #0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d109      	bne.n	8008b2e <xQueueGenericSend+0xb6>
 8008b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1e:	f383 8811 	msr	BASEPRI, r3
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	f3bf 8f4f 	dsb	sy
 8008b2a:	61fb      	str	r3, [r7, #28]
 8008b2c:	e7fe      	b.n	8008b2c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b2e:	f7ff fdd5 	bl	80086dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d302      	bcc.n	8008b44 <xQueueGenericSend+0xcc>
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d129      	bne.n	8008b98 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b44:	683a      	ldr	r2, [r7, #0]
 8008b46:	68b9      	ldr	r1, [r7, #8]
 8008b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b4a:	f000 f96b 	bl	8008e24 <prvCopyDataToQueue>
 8008b4e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d010      	beq.n	8008b7a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5a:	3324      	adds	r3, #36	; 0x24
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f000 fe83 	bl	8009868 <xTaskRemoveFromEventList>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d013      	beq.n	8008b90 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008b68:	4b3f      	ldr	r3, [pc, #252]	; (8008c68 <xQueueGenericSend+0x1f0>)
 8008b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b6e:	601a      	str	r2, [r3, #0]
 8008b70:	f3bf 8f4f 	dsb	sy
 8008b74:	f3bf 8f6f 	isb	sy
 8008b78:	e00a      	b.n	8008b90 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d007      	beq.n	8008b90 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008b80:	4b39      	ldr	r3, [pc, #228]	; (8008c68 <xQueueGenericSend+0x1f0>)
 8008b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b86:	601a      	str	r2, [r3, #0]
 8008b88:	f3bf 8f4f 	dsb	sy
 8008b8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008b90:	f7ff fdd2 	bl	8008738 <vPortExitCritical>
				return pdPASS;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e063      	b.n	8008c60 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d103      	bne.n	8008ba6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b9e:	f7ff fdcb 	bl	8008738 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	e05c      	b.n	8008c60 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d106      	bne.n	8008bba <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008bac:	f107 0314 	add.w	r3, r7, #20
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f000 febb 	bl	800992c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008bba:	f7ff fdbd 	bl	8008738 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008bbe:	f000 fc5f 	bl	8009480 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008bc2:	f7ff fd8b 	bl	80086dc <vPortEnterCritical>
 8008bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bcc:	b25b      	sxtb	r3, r3
 8008bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd2:	d103      	bne.n	8008bdc <xQueueGenericSend+0x164>
 8008bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008be2:	b25b      	sxtb	r3, r3
 8008be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be8:	d103      	bne.n	8008bf2 <xQueueGenericSend+0x17a>
 8008bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bec:	2200      	movs	r2, #0
 8008bee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bf2:	f7ff fda1 	bl	8008738 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008bf6:	1d3a      	adds	r2, r7, #4
 8008bf8:	f107 0314 	add.w	r3, r7, #20
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f000 feaa 	bl	8009958 <xTaskCheckForTimeOut>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d124      	bne.n	8008c54 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008c0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c0c:	f000 fa02 	bl	8009014 <prvIsQueueFull>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d018      	beq.n	8008c48 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c18:	3310      	adds	r3, #16
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	4611      	mov	r1, r2
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f000 fdfe 	bl	8009820 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c26:	f000 f98d 	bl	8008f44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008c2a:	f000 fc37 	bl	800949c <xTaskResumeAll>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	f47f af7c 	bne.w	8008b2e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8008c36:	4b0c      	ldr	r3, [pc, #48]	; (8008c68 <xQueueGenericSend+0x1f0>)
 8008c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c3c:	601a      	str	r2, [r3, #0]
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	f3bf 8f6f 	isb	sy
 8008c46:	e772      	b.n	8008b2e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008c48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c4a:	f000 f97b 	bl	8008f44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c4e:	f000 fc25 	bl	800949c <xTaskResumeAll>
 8008c52:	e76c      	b.n	8008b2e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008c54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c56:	f000 f975 	bl	8008f44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c5a:	f000 fc1f 	bl	800949c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008c5e:	2300      	movs	r3, #0
		}
	}
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3738      	adds	r7, #56	; 0x38
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	e000ed04 	.word	0xe000ed04

08008c6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b08c      	sub	sp, #48	; 0x30
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d109      	bne.n	8008c9a <xQueueReceive+0x2e>
 8008c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8a:	f383 8811 	msr	BASEPRI, r3
 8008c8e:	f3bf 8f6f 	isb	sy
 8008c92:	f3bf 8f4f 	dsb	sy
 8008c96:	623b      	str	r3, [r7, #32]
 8008c98:	e7fe      	b.n	8008c98 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d103      	bne.n	8008ca8 <xQueueReceive+0x3c>
 8008ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d101      	bne.n	8008cac <xQueueReceive+0x40>
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e000      	b.n	8008cae <xQueueReceive+0x42>
 8008cac:	2300      	movs	r3, #0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d109      	bne.n	8008cc6 <xQueueReceive+0x5a>
 8008cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	61fb      	str	r3, [r7, #28]
 8008cc4:	e7fe      	b.n	8008cc4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008cc6:	f000 ff6d 	bl	8009ba4 <xTaskGetSchedulerState>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d102      	bne.n	8008cd6 <xQueueReceive+0x6a>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d101      	bne.n	8008cda <xQueueReceive+0x6e>
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e000      	b.n	8008cdc <xQueueReceive+0x70>
 8008cda:	2300      	movs	r3, #0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d109      	bne.n	8008cf4 <xQueueReceive+0x88>
 8008ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce4:	f383 8811 	msr	BASEPRI, r3
 8008ce8:	f3bf 8f6f 	isb	sy
 8008cec:	f3bf 8f4f 	dsb	sy
 8008cf0:	61bb      	str	r3, [r7, #24]
 8008cf2:	e7fe      	b.n	8008cf2 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008cf4:	f7ff fcf2 	bl	80086dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d01f      	beq.n	8008d44 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d04:	68b9      	ldr	r1, [r7, #8]
 8008d06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d08:	f000 f8f6 	bl	8008ef8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0e:	1e5a      	subs	r2, r3, #1
 8008d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d12:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d00f      	beq.n	8008d3c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1e:	3310      	adds	r3, #16
 8008d20:	4618      	mov	r0, r3
 8008d22:	f000 fda1 	bl	8009868 <xTaskRemoveFromEventList>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d007      	beq.n	8008d3c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d2c:	4b3c      	ldr	r3, [pc, #240]	; (8008e20 <xQueueReceive+0x1b4>)
 8008d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	f3bf 8f4f 	dsb	sy
 8008d38:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d3c:	f7ff fcfc 	bl	8008738 <vPortExitCritical>
				return pdPASS;
 8008d40:	2301      	movs	r3, #1
 8008d42:	e069      	b.n	8008e18 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d103      	bne.n	8008d52 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d4a:	f7ff fcf5 	bl	8008738 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	e062      	b.n	8008e18 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d106      	bne.n	8008d66 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d58:	f107 0310 	add.w	r3, r7, #16
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f000 fde5 	bl	800992c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d62:	2301      	movs	r3, #1
 8008d64:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d66:	f7ff fce7 	bl	8008738 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d6a:	f000 fb89 	bl	8009480 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d6e:	f7ff fcb5 	bl	80086dc <vPortEnterCritical>
 8008d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d78:	b25b      	sxtb	r3, r3
 8008d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d7e:	d103      	bne.n	8008d88 <xQueueReceive+0x11c>
 8008d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d82:	2200      	movs	r2, #0
 8008d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d8e:	b25b      	sxtb	r3, r3
 8008d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d94:	d103      	bne.n	8008d9e <xQueueReceive+0x132>
 8008d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d9e:	f7ff fccb 	bl	8008738 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008da2:	1d3a      	adds	r2, r7, #4
 8008da4:	f107 0310 	add.w	r3, r7, #16
 8008da8:	4611      	mov	r1, r2
 8008daa:	4618      	mov	r0, r3
 8008dac:	f000 fdd4 	bl	8009958 <xTaskCheckForTimeOut>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d123      	bne.n	8008dfe <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008db6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008db8:	f000 f916 	bl	8008fe8 <prvIsQueueEmpty>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d017      	beq.n	8008df2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc4:	3324      	adds	r3, #36	; 0x24
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	4611      	mov	r1, r2
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f000 fd28 	bl	8009820 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008dd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dd2:	f000 f8b7 	bl	8008f44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008dd6:	f000 fb61 	bl	800949c <xTaskResumeAll>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d189      	bne.n	8008cf4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008de0:	4b0f      	ldr	r3, [pc, #60]	; (8008e20 <xQueueReceive+0x1b4>)
 8008de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008de6:	601a      	str	r2, [r3, #0]
 8008de8:	f3bf 8f4f 	dsb	sy
 8008dec:	f3bf 8f6f 	isb	sy
 8008df0:	e780      	b.n	8008cf4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008df2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008df4:	f000 f8a6 	bl	8008f44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008df8:	f000 fb50 	bl	800949c <xTaskResumeAll>
 8008dfc:	e77a      	b.n	8008cf4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008dfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e00:	f000 f8a0 	bl	8008f44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e04:	f000 fb4a 	bl	800949c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e0a:	f000 f8ed 	bl	8008fe8 <prvIsQueueEmpty>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f43f af6f 	beq.w	8008cf4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e16:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3730      	adds	r7, #48	; 0x30
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	e000ed04 	.word	0xe000ed04

08008e24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b086      	sub	sp, #24
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e30:	2300      	movs	r3, #0
 8008e32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d10d      	bne.n	8008e5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d14d      	bne.n	8008ee6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f000 fec6 	bl	8009be0 <xTaskPriorityDisinherit>
 8008e54:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	605a      	str	r2, [r3, #4]
 8008e5c:	e043      	b.n	8008ee6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d119      	bne.n	8008e98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6898      	ldr	r0, [r3, #8]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	68b9      	ldr	r1, [r7, #8]
 8008e70:	f000 ffca 	bl	8009e08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	689a      	ldr	r2, [r3, #8]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e7c:	441a      	add	r2, r3
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	689a      	ldr	r2, [r3, #8]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d32b      	bcc.n	8008ee6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	609a      	str	r2, [r3, #8]
 8008e96:	e026      	b.n	8008ee6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	68d8      	ldr	r0, [r3, #12]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	68b9      	ldr	r1, [r7, #8]
 8008ea4:	f000 ffb0 	bl	8009e08 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	68da      	ldr	r2, [r3, #12]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb0:	425b      	negs	r3, r3
 8008eb2:	441a      	add	r2, r3
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	68da      	ldr	r2, [r3, #12]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d207      	bcs.n	8008ed4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	685a      	ldr	r2, [r3, #4]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ecc:	425b      	negs	r3, r3
 8008ece:	441a      	add	r2, r3
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d105      	bne.n	8008ee6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d002      	beq.n	8008ee6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	1c5a      	adds	r2, r3, #1
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008eee:	697b      	ldr	r3, [r7, #20]
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3718      	adds	r7, #24
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d018      	beq.n	8008f3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	68da      	ldr	r2, [r3, #12]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f12:	441a      	add	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	68da      	ldr	r2, [r3, #12]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d303      	bcc.n	8008f2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	68d9      	ldr	r1, [r3, #12]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f34:	461a      	mov	r2, r3
 8008f36:	6838      	ldr	r0, [r7, #0]
 8008f38:	f000 ff66 	bl	8009e08 <memcpy>
	}
}
 8008f3c:	bf00      	nop
 8008f3e:	3708      	adds	r7, #8
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008f4c:	f7ff fbc6 	bl	80086dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f58:	e011      	b.n	8008f7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d012      	beq.n	8008f88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	3324      	adds	r3, #36	; 0x24
 8008f66:	4618      	mov	r0, r3
 8008f68:	f000 fc7e 	bl	8009868 <xTaskRemoveFromEventList>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d001      	beq.n	8008f76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008f72:	f000 fd51 	bl	8009a18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008f76:	7bfb      	ldrb	r3, [r7, #15]
 8008f78:	3b01      	subs	r3, #1
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	dce9      	bgt.n	8008f5a <prvUnlockQueue+0x16>
 8008f86:	e000      	b.n	8008f8a <prvUnlockQueue+0x46>
					break;
 8008f88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	22ff      	movs	r2, #255	; 0xff
 8008f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008f92:	f7ff fbd1 	bl	8008738 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008f96:	f7ff fba1 	bl	80086dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fa0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008fa2:	e011      	b.n	8008fc8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d012      	beq.n	8008fd2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	3310      	adds	r3, #16
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f000 fc59 	bl	8009868 <xTaskRemoveFromEventList>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d001      	beq.n	8008fc0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008fbc:	f000 fd2c 	bl	8009a18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008fc0:	7bbb      	ldrb	r3, [r7, #14]
 8008fc2:	3b01      	subs	r3, #1
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008fc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	dce9      	bgt.n	8008fa4 <prvUnlockQueue+0x60>
 8008fd0:	e000      	b.n	8008fd4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008fd2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	22ff      	movs	r2, #255	; 0xff
 8008fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008fdc:	f7ff fbac 	bl	8008738 <vPortExitCritical>
}
 8008fe0:	bf00      	nop
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ff0:	f7ff fb74 	bl	80086dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d102      	bne.n	8009002 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	60fb      	str	r3, [r7, #12]
 8009000:	e001      	b.n	8009006 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009002:	2300      	movs	r3, #0
 8009004:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009006:	f7ff fb97 	bl	8008738 <vPortExitCritical>

	return xReturn;
 800900a:	68fb      	ldr	r3, [r7, #12]
}
 800900c:	4618      	mov	r0, r3
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800901c:	f7ff fb5e 	bl	80086dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009028:	429a      	cmp	r2, r3
 800902a:	d102      	bne.n	8009032 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800902c:	2301      	movs	r3, #1
 800902e:	60fb      	str	r3, [r7, #12]
 8009030:	e001      	b.n	8009036 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009032:	2300      	movs	r3, #0
 8009034:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009036:	f7ff fb7f 	bl	8008738 <vPortExitCritical>

	return xReturn;
 800903a:	68fb      	ldr	r3, [r7, #12]
}
 800903c:	4618      	mov	r0, r3
 800903e:	3710      	adds	r7, #16
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009044:	b580      	push	{r7, lr}
 8009046:	b08c      	sub	sp, #48	; 0x30
 8009048:	af04      	add	r7, sp, #16
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	603b      	str	r3, [r7, #0]
 8009050:	4613      	mov	r3, r2
 8009052:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009054:	88fb      	ldrh	r3, [r7, #6]
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	4618      	mov	r0, r3
 800905a:	f7fe ff83 	bl	8007f64 <pvPortMalloc>
 800905e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d00e      	beq.n	8009084 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009066:	2054      	movs	r0, #84	; 0x54
 8009068:	f7fe ff7c 	bl	8007f64 <pvPortMalloc>
 800906c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d003      	beq.n	800907c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	697a      	ldr	r2, [r7, #20]
 8009078:	631a      	str	r2, [r3, #48]	; 0x30
 800907a:	e005      	b.n	8009088 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800907c:	6978      	ldr	r0, [r7, #20]
 800907e:	f7ff f833 	bl	80080e8 <vPortFree>
 8009082:	e001      	b.n	8009088 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009084:	2300      	movs	r3, #0
 8009086:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d013      	beq.n	80090b6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800908e:	88fa      	ldrh	r2, [r7, #6]
 8009090:	2300      	movs	r3, #0
 8009092:	9303      	str	r3, [sp, #12]
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	9302      	str	r3, [sp, #8]
 8009098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909a:	9301      	str	r3, [sp, #4]
 800909c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909e:	9300      	str	r3, [sp, #0]
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	68b9      	ldr	r1, [r7, #8]
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f000 f80e 	bl	80090c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090aa:	69f8      	ldr	r0, [r7, #28]
 80090ac:	f000 f88a 	bl	80091c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80090b0:	2301      	movs	r3, #1
 80090b2:	61bb      	str	r3, [r7, #24]
 80090b4:	e002      	b.n	80090bc <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80090b6:	f04f 33ff 	mov.w	r3, #4294967295
 80090ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80090bc:	69bb      	ldr	r3, [r7, #24]
	}
 80090be:	4618      	mov	r0, r3
 80090c0:	3720      	adds	r7, #32
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b088      	sub	sp, #32
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	60f8      	str	r0, [r7, #12]
 80090ce:	60b9      	str	r1, [r7, #8]
 80090d0:	607a      	str	r2, [r7, #4]
 80090d2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80090d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80090de:	3b01      	subs	r3, #1
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	f023 0307 	bic.w	r3, r3, #7
 80090ec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	f003 0307 	and.w	r3, r3, #7
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d009      	beq.n	800910c <prvInitialiseNewTask+0x46>
 80090f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fc:	f383 8811 	msr	BASEPRI, r3
 8009100:	f3bf 8f6f 	isb	sy
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	617b      	str	r3, [r7, #20]
 800910a:	e7fe      	b.n	800910a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800910c:	2300      	movs	r3, #0
 800910e:	61fb      	str	r3, [r7, #28]
 8009110:	e012      	b.n	8009138 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009112:	68ba      	ldr	r2, [r7, #8]
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	4413      	add	r3, r2
 8009118:	7819      	ldrb	r1, [r3, #0]
 800911a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	4413      	add	r3, r2
 8009120:	3334      	adds	r3, #52	; 0x34
 8009122:	460a      	mov	r2, r1
 8009124:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009126:	68ba      	ldr	r2, [r7, #8]
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	4413      	add	r3, r2
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d006      	beq.n	8009140 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	3301      	adds	r3, #1
 8009136:	61fb      	str	r3, [r7, #28]
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	2b0f      	cmp	r3, #15
 800913c:	d9e9      	bls.n	8009112 <prvInitialiseNewTask+0x4c>
 800913e:	e000      	b.n	8009142 <prvInitialiseNewTask+0x7c>
		{
			break;
 8009140:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009144:	2200      	movs	r2, #0
 8009146:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800914a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914c:	2b06      	cmp	r3, #6
 800914e:	d901      	bls.n	8009154 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009150:	2306      	movs	r3, #6
 8009152:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009158:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800915a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800915e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009162:	2200      	movs	r2, #0
 8009164:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009168:	3304      	adds	r3, #4
 800916a:	4618      	mov	r0, r3
 800916c:	f7ff f8fc 	bl	8008368 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009172:	3318      	adds	r3, #24
 8009174:	4618      	mov	r0, r3
 8009176:	f7ff f8f7 	bl	8008368 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800917a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800917e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009182:	f1c3 0207 	rsb	r2, r3, #7
 8009186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009188:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800918a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800918e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009192:	2200      	movs	r2, #0
 8009194:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009198:	2200      	movs	r2, #0
 800919a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800919e:	683a      	ldr	r2, [r7, #0]
 80091a0:	68f9      	ldr	r1, [r7, #12]
 80091a2:	69b8      	ldr	r0, [r7, #24]
 80091a4:	f7ff f974 	bl	8008490 <pxPortInitialiseStack>
 80091a8:	4602      	mov	r2, r0
 80091aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ac:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80091ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d002      	beq.n	80091ba <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80091b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091ba:	bf00      	nop
 80091bc:	3720      	adds	r7, #32
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
	...

080091c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80091cc:	f7ff fa86 	bl	80086dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80091d0:	4b2a      	ldr	r3, [pc, #168]	; (800927c <prvAddNewTaskToReadyList+0xb8>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	3301      	adds	r3, #1
 80091d6:	4a29      	ldr	r2, [pc, #164]	; (800927c <prvAddNewTaskToReadyList+0xb8>)
 80091d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80091da:	4b29      	ldr	r3, [pc, #164]	; (8009280 <prvAddNewTaskToReadyList+0xbc>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d109      	bne.n	80091f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80091e2:	4a27      	ldr	r2, [pc, #156]	; (8009280 <prvAddNewTaskToReadyList+0xbc>)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80091e8:	4b24      	ldr	r3, [pc, #144]	; (800927c <prvAddNewTaskToReadyList+0xb8>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d110      	bne.n	8009212 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80091f0:	f000 fc36 	bl	8009a60 <prvInitialiseTaskLists>
 80091f4:	e00d      	b.n	8009212 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80091f6:	4b23      	ldr	r3, [pc, #140]	; (8009284 <prvAddNewTaskToReadyList+0xc0>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d109      	bne.n	8009212 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80091fe:	4b20      	ldr	r3, [pc, #128]	; (8009280 <prvAddNewTaskToReadyList+0xbc>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009208:	429a      	cmp	r2, r3
 800920a:	d802      	bhi.n	8009212 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800920c:	4a1c      	ldr	r2, [pc, #112]	; (8009280 <prvAddNewTaskToReadyList+0xbc>)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009212:	4b1d      	ldr	r3, [pc, #116]	; (8009288 <prvAddNewTaskToReadyList+0xc4>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	3301      	adds	r3, #1
 8009218:	4a1b      	ldr	r2, [pc, #108]	; (8009288 <prvAddNewTaskToReadyList+0xc4>)
 800921a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009220:	2201      	movs	r2, #1
 8009222:	409a      	lsls	r2, r3
 8009224:	4b19      	ldr	r3, [pc, #100]	; (800928c <prvAddNewTaskToReadyList+0xc8>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4313      	orrs	r3, r2
 800922a:	4a18      	ldr	r2, [pc, #96]	; (800928c <prvAddNewTaskToReadyList+0xc8>)
 800922c:	6013      	str	r3, [r2, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009232:	4613      	mov	r3, r2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	4413      	add	r3, r2
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	4a15      	ldr	r2, [pc, #84]	; (8009290 <prvAddNewTaskToReadyList+0xcc>)
 800923c:	441a      	add	r2, r3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	3304      	adds	r3, #4
 8009242:	4619      	mov	r1, r3
 8009244:	4610      	mov	r0, r2
 8009246:	f7ff f89c 	bl	8008382 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800924a:	f7ff fa75 	bl	8008738 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800924e:	4b0d      	ldr	r3, [pc, #52]	; (8009284 <prvAddNewTaskToReadyList+0xc0>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00e      	beq.n	8009274 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009256:	4b0a      	ldr	r3, [pc, #40]	; (8009280 <prvAddNewTaskToReadyList+0xbc>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009260:	429a      	cmp	r2, r3
 8009262:	d207      	bcs.n	8009274 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009264:	4b0b      	ldr	r3, [pc, #44]	; (8009294 <prvAddNewTaskToReadyList+0xd0>)
 8009266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800926a:	601a      	str	r2, [r3, #0]
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009274:	bf00      	nop
 8009276:	3708      	adds	r7, #8
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	20007894 	.word	0x20007894
 8009280:	20007794 	.word	0x20007794
 8009284:	200078a0 	.word	0x200078a0
 8009288:	200078b0 	.word	0x200078b0
 800928c:	2000789c 	.word	0x2000789c
 8009290:	20007798 	.word	0x20007798
 8009294:	e000ed04 	.word	0xe000ed04

08009298 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009298:	b580      	push	{r7, lr}
 800929a:	b08a      	sub	sp, #40	; 0x28
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80092a2:	2300      	movs	r3, #0
 80092a4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d109      	bne.n	80092c0 <vTaskDelayUntil+0x28>
 80092ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b0:	f383 8811 	msr	BASEPRI, r3
 80092b4:	f3bf 8f6f 	isb	sy
 80092b8:	f3bf 8f4f 	dsb	sy
 80092bc:	617b      	str	r3, [r7, #20]
 80092be:	e7fe      	b.n	80092be <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d109      	bne.n	80092da <vTaskDelayUntil+0x42>
 80092c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ca:	f383 8811 	msr	BASEPRI, r3
 80092ce:	f3bf 8f6f 	isb	sy
 80092d2:	f3bf 8f4f 	dsb	sy
 80092d6:	613b      	str	r3, [r7, #16]
 80092d8:	e7fe      	b.n	80092d8 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 80092da:	4b29      	ldr	r3, [pc, #164]	; (8009380 <vTaskDelayUntil+0xe8>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d009      	beq.n	80092f6 <vTaskDelayUntil+0x5e>
 80092e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e6:	f383 8811 	msr	BASEPRI, r3
 80092ea:	f3bf 8f6f 	isb	sy
 80092ee:	f3bf 8f4f 	dsb	sy
 80092f2:	60fb      	str	r3, [r7, #12]
 80092f4:	e7fe      	b.n	80092f4 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 80092f6:	f000 f8c3 	bl	8009480 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80092fa:	4b22      	ldr	r3, [pc, #136]	; (8009384 <vTaskDelayUntil+0xec>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	4413      	add	r3, r2
 8009308:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	6a3b      	ldr	r3, [r7, #32]
 8009310:	429a      	cmp	r2, r3
 8009312:	d90b      	bls.n	800932c <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	429a      	cmp	r2, r3
 800931c:	d911      	bls.n	8009342 <vTaskDelayUntil+0xaa>
 800931e:	69fa      	ldr	r2, [r7, #28]
 8009320:	6a3b      	ldr	r3, [r7, #32]
 8009322:	429a      	cmp	r2, r3
 8009324:	d90d      	bls.n	8009342 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8009326:	2301      	movs	r3, #1
 8009328:	627b      	str	r3, [r7, #36]	; 0x24
 800932a:	e00a      	b.n	8009342 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	429a      	cmp	r2, r3
 8009334:	d803      	bhi.n	800933e <vTaskDelayUntil+0xa6>
 8009336:	69fa      	ldr	r2, [r7, #28]
 8009338:	6a3b      	ldr	r3, [r7, #32]
 800933a:	429a      	cmp	r2, r3
 800933c:	d901      	bls.n	8009342 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800933e:	2301      	movs	r3, #1
 8009340:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	69fa      	ldr	r2, [r7, #28]
 8009346:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934a:	2b00      	cmp	r3, #0
 800934c:	d006      	beq.n	800935c <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800934e:	69fa      	ldr	r2, [r7, #28]
 8009350:	6a3b      	ldr	r3, [r7, #32]
 8009352:	1ad3      	subs	r3, r2, r3
 8009354:	2100      	movs	r1, #0
 8009356:	4618      	mov	r0, r3
 8009358:	f000 fcc6 	bl	8009ce8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800935c:	f000 f89e 	bl	800949c <xTaskResumeAll>
 8009360:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d107      	bne.n	8009378 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8009368:	4b07      	ldr	r3, [pc, #28]	; (8009388 <vTaskDelayUntil+0xf0>)
 800936a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800936e:	601a      	str	r2, [r3, #0]
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009378:	bf00      	nop
 800937a:	3728      	adds	r7, #40	; 0x28
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	200078bc 	.word	0x200078bc
 8009384:	20007898 	.word	0x20007898
 8009388:	e000ed04 	.word	0xe000ed04

0800938c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009394:	2300      	movs	r3, #0
 8009396:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d016      	beq.n	80093cc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800939e:	4b13      	ldr	r3, [pc, #76]	; (80093ec <vTaskDelay+0x60>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d009      	beq.n	80093ba <vTaskDelay+0x2e>
 80093a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093aa:	f383 8811 	msr	BASEPRI, r3
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	60bb      	str	r3, [r7, #8]
 80093b8:	e7fe      	b.n	80093b8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80093ba:	f000 f861 	bl	8009480 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80093be:	2100      	movs	r1, #0
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 fc91 	bl	8009ce8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80093c6:	f000 f869 	bl	800949c <xTaskResumeAll>
 80093ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d107      	bne.n	80093e2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80093d2:	4b07      	ldr	r3, [pc, #28]	; (80093f0 <vTaskDelay+0x64>)
 80093d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093d8:	601a      	str	r2, [r3, #0]
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80093e2:	bf00      	nop
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	200078bc 	.word	0x200078bc
 80093f0:	e000ed04 	.word	0xe000ed04

080093f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b086      	sub	sp, #24
 80093f8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80093fa:	4b1b      	ldr	r3, [pc, #108]	; (8009468 <vTaskStartScheduler+0x74>)
 80093fc:	9301      	str	r3, [sp, #4]
 80093fe:	2300      	movs	r3, #0
 8009400:	9300      	str	r3, [sp, #0]
 8009402:	2300      	movs	r3, #0
 8009404:	2280      	movs	r2, #128	; 0x80
 8009406:	4919      	ldr	r1, [pc, #100]	; (800946c <vTaskStartScheduler+0x78>)
 8009408:	4819      	ldr	r0, [pc, #100]	; (8009470 <vTaskStartScheduler+0x7c>)
 800940a:	f7ff fe1b 	bl	8009044 <xTaskCreate>
 800940e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2b01      	cmp	r3, #1
 8009414:	d115      	bne.n	8009442 <vTaskStartScheduler+0x4e>
 8009416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941a:	f383 8811 	msr	BASEPRI, r3
 800941e:	f3bf 8f6f 	isb	sy
 8009422:	f3bf 8f4f 	dsb	sy
 8009426:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009428:	4b12      	ldr	r3, [pc, #72]	; (8009474 <vTaskStartScheduler+0x80>)
 800942a:	f04f 32ff 	mov.w	r2, #4294967295
 800942e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009430:	4b11      	ldr	r3, [pc, #68]	; (8009478 <vTaskStartScheduler+0x84>)
 8009432:	2201      	movs	r2, #1
 8009434:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009436:	4b11      	ldr	r3, [pc, #68]	; (800947c <vTaskStartScheduler+0x88>)
 8009438:	2200      	movs	r2, #0
 800943a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800943c:	f7ff f8b0 	bl	80085a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009440:	e00d      	b.n	800945e <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009448:	d109      	bne.n	800945e <vTaskStartScheduler+0x6a>
 800944a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944e:	f383 8811 	msr	BASEPRI, r3
 8009452:	f3bf 8f6f 	isb	sy
 8009456:	f3bf 8f4f 	dsb	sy
 800945a:	607b      	str	r3, [r7, #4]
 800945c:	e7fe      	b.n	800945c <vTaskStartScheduler+0x68>
}
 800945e:	bf00      	nop
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	200078b8 	.word	0x200078b8
 800946c:	0800a6c8 	.word	0x0800a6c8
 8009470:	08009a31 	.word	0x08009a31
 8009474:	200078b4 	.word	0x200078b4
 8009478:	200078a0 	.word	0x200078a0
 800947c:	20007898 	.word	0x20007898

08009480 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009480:	b480      	push	{r7}
 8009482:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009484:	4b04      	ldr	r3, [pc, #16]	; (8009498 <vTaskSuspendAll+0x18>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	3301      	adds	r3, #1
 800948a:	4a03      	ldr	r2, [pc, #12]	; (8009498 <vTaskSuspendAll+0x18>)
 800948c:	6013      	str	r3, [r2, #0]
}
 800948e:	bf00      	nop
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	200078bc 	.word	0x200078bc

0800949c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80094a2:	2300      	movs	r3, #0
 80094a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80094a6:	2300      	movs	r3, #0
 80094a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80094aa:	4b41      	ldr	r3, [pc, #260]	; (80095b0 <xTaskResumeAll+0x114>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d109      	bne.n	80094c6 <xTaskResumeAll+0x2a>
 80094b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b6:	f383 8811 	msr	BASEPRI, r3
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	603b      	str	r3, [r7, #0]
 80094c4:	e7fe      	b.n	80094c4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80094c6:	f7ff f909 	bl	80086dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80094ca:	4b39      	ldr	r3, [pc, #228]	; (80095b0 <xTaskResumeAll+0x114>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	3b01      	subs	r3, #1
 80094d0:	4a37      	ldr	r2, [pc, #220]	; (80095b0 <xTaskResumeAll+0x114>)
 80094d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094d4:	4b36      	ldr	r3, [pc, #216]	; (80095b0 <xTaskResumeAll+0x114>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d161      	bne.n	80095a0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80094dc:	4b35      	ldr	r3, [pc, #212]	; (80095b4 <xTaskResumeAll+0x118>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d05d      	beq.n	80095a0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094e4:	e02e      	b.n	8009544 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80094e6:	4b34      	ldr	r3, [pc, #208]	; (80095b8 <xTaskResumeAll+0x11c>)
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	3318      	adds	r3, #24
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fe ffa2 	bl	800843c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	3304      	adds	r3, #4
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7fe ff9d 	bl	800843c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009506:	2201      	movs	r2, #1
 8009508:	409a      	lsls	r2, r3
 800950a:	4b2c      	ldr	r3, [pc, #176]	; (80095bc <xTaskResumeAll+0x120>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4313      	orrs	r3, r2
 8009510:	4a2a      	ldr	r2, [pc, #168]	; (80095bc <xTaskResumeAll+0x120>)
 8009512:	6013      	str	r3, [r2, #0]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009518:	4613      	mov	r3, r2
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	4413      	add	r3, r2
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	4a27      	ldr	r2, [pc, #156]	; (80095c0 <xTaskResumeAll+0x124>)
 8009522:	441a      	add	r2, r3
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	3304      	adds	r3, #4
 8009528:	4619      	mov	r1, r3
 800952a:	4610      	mov	r0, r2
 800952c:	f7fe ff29 	bl	8008382 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009534:	4b23      	ldr	r3, [pc, #140]	; (80095c4 <xTaskResumeAll+0x128>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953a:	429a      	cmp	r2, r3
 800953c:	d302      	bcc.n	8009544 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800953e:	4b22      	ldr	r3, [pc, #136]	; (80095c8 <xTaskResumeAll+0x12c>)
 8009540:	2201      	movs	r2, #1
 8009542:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009544:	4b1c      	ldr	r3, [pc, #112]	; (80095b8 <xTaskResumeAll+0x11c>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1cc      	bne.n	80094e6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d001      	beq.n	8009556 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009552:	f000 fb01 	bl	8009b58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009556:	4b1d      	ldr	r3, [pc, #116]	; (80095cc <xTaskResumeAll+0x130>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d010      	beq.n	8009584 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009562:	f000 f847 	bl	80095f4 <xTaskIncrementTick>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d002      	beq.n	8009572 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800956c:	4b16      	ldr	r3, [pc, #88]	; (80095c8 <xTaskResumeAll+0x12c>)
 800956e:	2201      	movs	r2, #1
 8009570:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	3b01      	subs	r3, #1
 8009576:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d1f1      	bne.n	8009562 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800957e:	4b13      	ldr	r3, [pc, #76]	; (80095cc <xTaskResumeAll+0x130>)
 8009580:	2200      	movs	r2, #0
 8009582:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009584:	4b10      	ldr	r3, [pc, #64]	; (80095c8 <xTaskResumeAll+0x12c>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d009      	beq.n	80095a0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800958c:	2301      	movs	r3, #1
 800958e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009590:	4b0f      	ldr	r3, [pc, #60]	; (80095d0 <xTaskResumeAll+0x134>)
 8009592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009596:	601a      	str	r2, [r3, #0]
 8009598:	f3bf 8f4f 	dsb	sy
 800959c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095a0:	f7ff f8ca 	bl	8008738 <vPortExitCritical>

	return xAlreadyYielded;
 80095a4:	68bb      	ldr	r3, [r7, #8]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	200078bc 	.word	0x200078bc
 80095b4:	20007894 	.word	0x20007894
 80095b8:	20007854 	.word	0x20007854
 80095bc:	2000789c 	.word	0x2000789c
 80095c0:	20007798 	.word	0x20007798
 80095c4:	20007794 	.word	0x20007794
 80095c8:	200078a8 	.word	0x200078a8
 80095cc:	200078a4 	.word	0x200078a4
 80095d0:	e000ed04 	.word	0xe000ed04

080095d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80095da:	4b05      	ldr	r3, [pc, #20]	; (80095f0 <xTaskGetTickCount+0x1c>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80095e0:	687b      	ldr	r3, [r7, #4]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	370c      	adds	r7, #12
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	20007898 	.word	0x20007898

080095f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b086      	sub	sp, #24
 80095f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80095fa:	2300      	movs	r3, #0
 80095fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095fe:	4b50      	ldr	r3, [pc, #320]	; (8009740 <xTaskIncrementTick+0x14c>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	f040 808c 	bne.w	8009720 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009608:	4b4e      	ldr	r3, [pc, #312]	; (8009744 <xTaskIncrementTick+0x150>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	3301      	adds	r3, #1
 800960e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009610:	4a4c      	ldr	r2, [pc, #304]	; (8009744 <xTaskIncrementTick+0x150>)
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d11f      	bne.n	800965c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800961c:	4b4a      	ldr	r3, [pc, #296]	; (8009748 <xTaskIncrementTick+0x154>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d009      	beq.n	800963a <xTaskIncrementTick+0x46>
 8009626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962a:	f383 8811 	msr	BASEPRI, r3
 800962e:	f3bf 8f6f 	isb	sy
 8009632:	f3bf 8f4f 	dsb	sy
 8009636:	603b      	str	r3, [r7, #0]
 8009638:	e7fe      	b.n	8009638 <xTaskIncrementTick+0x44>
 800963a:	4b43      	ldr	r3, [pc, #268]	; (8009748 <xTaskIncrementTick+0x154>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	60fb      	str	r3, [r7, #12]
 8009640:	4b42      	ldr	r3, [pc, #264]	; (800974c <xTaskIncrementTick+0x158>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a40      	ldr	r2, [pc, #256]	; (8009748 <xTaskIncrementTick+0x154>)
 8009646:	6013      	str	r3, [r2, #0]
 8009648:	4a40      	ldr	r2, [pc, #256]	; (800974c <xTaskIncrementTick+0x158>)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6013      	str	r3, [r2, #0]
 800964e:	4b40      	ldr	r3, [pc, #256]	; (8009750 <xTaskIncrementTick+0x15c>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	3301      	adds	r3, #1
 8009654:	4a3e      	ldr	r2, [pc, #248]	; (8009750 <xTaskIncrementTick+0x15c>)
 8009656:	6013      	str	r3, [r2, #0]
 8009658:	f000 fa7e 	bl	8009b58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800965c:	4b3d      	ldr	r3, [pc, #244]	; (8009754 <xTaskIncrementTick+0x160>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	693a      	ldr	r2, [r7, #16]
 8009662:	429a      	cmp	r2, r3
 8009664:	d34d      	bcc.n	8009702 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009666:	4b38      	ldr	r3, [pc, #224]	; (8009748 <xTaskIncrementTick+0x154>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d101      	bne.n	8009674 <xTaskIncrementTick+0x80>
 8009670:	2301      	movs	r3, #1
 8009672:	e000      	b.n	8009676 <xTaskIncrementTick+0x82>
 8009674:	2300      	movs	r3, #0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d004      	beq.n	8009684 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800967a:	4b36      	ldr	r3, [pc, #216]	; (8009754 <xTaskIncrementTick+0x160>)
 800967c:	f04f 32ff 	mov.w	r2, #4294967295
 8009680:	601a      	str	r2, [r3, #0]
					break;
 8009682:	e03e      	b.n	8009702 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009684:	4b30      	ldr	r3, [pc, #192]	; (8009748 <xTaskIncrementTick+0x154>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	429a      	cmp	r2, r3
 800969a:	d203      	bcs.n	80096a4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800969c:	4a2d      	ldr	r2, [pc, #180]	; (8009754 <xTaskIncrementTick+0x160>)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6013      	str	r3, [r2, #0]
						break;
 80096a2:	e02e      	b.n	8009702 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	3304      	adds	r3, #4
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7fe fec7 	bl	800843c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d004      	beq.n	80096c0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	3318      	adds	r3, #24
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7fe febe 	bl	800843c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c4:	2201      	movs	r2, #1
 80096c6:	409a      	lsls	r2, r3
 80096c8:	4b23      	ldr	r3, [pc, #140]	; (8009758 <xTaskIncrementTick+0x164>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	4a22      	ldr	r2, [pc, #136]	; (8009758 <xTaskIncrementTick+0x164>)
 80096d0:	6013      	str	r3, [r2, #0]
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096d6:	4613      	mov	r3, r2
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	4413      	add	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	4a1f      	ldr	r2, [pc, #124]	; (800975c <xTaskIncrementTick+0x168>)
 80096e0:	441a      	add	r2, r3
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	3304      	adds	r3, #4
 80096e6:	4619      	mov	r1, r3
 80096e8:	4610      	mov	r0, r2
 80096ea:	f7fe fe4a 	bl	8008382 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096f2:	4b1b      	ldr	r3, [pc, #108]	; (8009760 <xTaskIncrementTick+0x16c>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d3b4      	bcc.n	8009666 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80096fc:	2301      	movs	r3, #1
 80096fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009700:	e7b1      	b.n	8009666 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009702:	4b17      	ldr	r3, [pc, #92]	; (8009760 <xTaskIncrementTick+0x16c>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009708:	4914      	ldr	r1, [pc, #80]	; (800975c <xTaskIncrementTick+0x168>)
 800970a:	4613      	mov	r3, r2
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	4413      	add	r3, r2
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	440b      	add	r3, r1
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2b01      	cmp	r3, #1
 8009718:	d907      	bls.n	800972a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800971a:	2301      	movs	r3, #1
 800971c:	617b      	str	r3, [r7, #20]
 800971e:	e004      	b.n	800972a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009720:	4b10      	ldr	r3, [pc, #64]	; (8009764 <xTaskIncrementTick+0x170>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	3301      	adds	r3, #1
 8009726:	4a0f      	ldr	r2, [pc, #60]	; (8009764 <xTaskIncrementTick+0x170>)
 8009728:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800972a:	4b0f      	ldr	r3, [pc, #60]	; (8009768 <xTaskIncrementTick+0x174>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d001      	beq.n	8009736 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8009732:	2301      	movs	r3, #1
 8009734:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009736:	697b      	ldr	r3, [r7, #20]
}
 8009738:	4618      	mov	r0, r3
 800973a:	3718      	adds	r7, #24
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	200078bc 	.word	0x200078bc
 8009744:	20007898 	.word	0x20007898
 8009748:	2000784c 	.word	0x2000784c
 800974c:	20007850 	.word	0x20007850
 8009750:	200078ac 	.word	0x200078ac
 8009754:	200078b4 	.word	0x200078b4
 8009758:	2000789c 	.word	0x2000789c
 800975c:	20007798 	.word	0x20007798
 8009760:	20007794 	.word	0x20007794
 8009764:	200078a4 	.word	0x200078a4
 8009768:	200078a8 	.word	0x200078a8

0800976c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800976c:	b480      	push	{r7}
 800976e:	b087      	sub	sp, #28
 8009770:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009772:	4b26      	ldr	r3, [pc, #152]	; (800980c <vTaskSwitchContext+0xa0>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d003      	beq.n	8009782 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800977a:	4b25      	ldr	r3, [pc, #148]	; (8009810 <vTaskSwitchContext+0xa4>)
 800977c:	2201      	movs	r2, #1
 800977e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009780:	e03e      	b.n	8009800 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8009782:	4b23      	ldr	r3, [pc, #140]	; (8009810 <vTaskSwitchContext+0xa4>)
 8009784:	2200      	movs	r2, #0
 8009786:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009788:	4b22      	ldr	r3, [pc, #136]	; (8009814 <vTaskSwitchContext+0xa8>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	fab3 f383 	clz	r3, r3
 8009794:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009796:	7afb      	ldrb	r3, [r7, #11]
 8009798:	f1c3 031f 	rsb	r3, r3, #31
 800979c:	617b      	str	r3, [r7, #20]
 800979e:	491e      	ldr	r1, [pc, #120]	; (8009818 <vTaskSwitchContext+0xac>)
 80097a0:	697a      	ldr	r2, [r7, #20]
 80097a2:	4613      	mov	r3, r2
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	4413      	add	r3, r2
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	440b      	add	r3, r1
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d109      	bne.n	80097c6 <vTaskSwitchContext+0x5a>
	__asm volatile
 80097b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b6:	f383 8811 	msr	BASEPRI, r3
 80097ba:	f3bf 8f6f 	isb	sy
 80097be:	f3bf 8f4f 	dsb	sy
 80097c2:	607b      	str	r3, [r7, #4]
 80097c4:	e7fe      	b.n	80097c4 <vTaskSwitchContext+0x58>
 80097c6:	697a      	ldr	r2, [r7, #20]
 80097c8:	4613      	mov	r3, r2
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	4413      	add	r3, r2
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	4a11      	ldr	r2, [pc, #68]	; (8009818 <vTaskSwitchContext+0xac>)
 80097d2:	4413      	add	r3, r2
 80097d4:	613b      	str	r3, [r7, #16]
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	605a      	str	r2, [r3, #4]
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	685a      	ldr	r2, [r3, #4]
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	3308      	adds	r3, #8
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d104      	bne.n	80097f6 <vTaskSwitchContext+0x8a>
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	685a      	ldr	r2, [r3, #4]
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	605a      	str	r2, [r3, #4]
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	4a07      	ldr	r2, [pc, #28]	; (800981c <vTaskSwitchContext+0xb0>)
 80097fe:	6013      	str	r3, [r2, #0]
}
 8009800:	bf00      	nop
 8009802:	371c      	adds	r7, #28
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr
 800980c:	200078bc 	.word	0x200078bc
 8009810:	200078a8 	.word	0x200078a8
 8009814:	2000789c 	.word	0x2000789c
 8009818:	20007798 	.word	0x20007798
 800981c:	20007794 	.word	0x20007794

08009820 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d109      	bne.n	8009844 <vTaskPlaceOnEventList+0x24>
 8009830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009834:	f383 8811 	msr	BASEPRI, r3
 8009838:	f3bf 8f6f 	isb	sy
 800983c:	f3bf 8f4f 	dsb	sy
 8009840:	60fb      	str	r3, [r7, #12]
 8009842:	e7fe      	b.n	8009842 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009844:	4b07      	ldr	r3, [pc, #28]	; (8009864 <vTaskPlaceOnEventList+0x44>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	3318      	adds	r3, #24
 800984a:	4619      	mov	r1, r3
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f7fe fdbc 	bl	80083ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009852:	2101      	movs	r1, #1
 8009854:	6838      	ldr	r0, [r7, #0]
 8009856:	f000 fa47 	bl	8009ce8 <prvAddCurrentTaskToDelayedList>
}
 800985a:	bf00      	nop
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	20007794 	.word	0x20007794

08009868 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b086      	sub	sp, #24
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d109      	bne.n	8009892 <xTaskRemoveFromEventList+0x2a>
 800987e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009882:	f383 8811 	msr	BASEPRI, r3
 8009886:	f3bf 8f6f 	isb	sy
 800988a:	f3bf 8f4f 	dsb	sy
 800988e:	60fb      	str	r3, [r7, #12]
 8009890:	e7fe      	b.n	8009890 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	3318      	adds	r3, #24
 8009896:	4618      	mov	r0, r3
 8009898:	f7fe fdd0 	bl	800843c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800989c:	4b1d      	ldr	r3, [pc, #116]	; (8009914 <xTaskRemoveFromEventList+0xac>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d11c      	bne.n	80098de <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	3304      	adds	r3, #4
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7fe fdc7 	bl	800843c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b2:	2201      	movs	r2, #1
 80098b4:	409a      	lsls	r2, r3
 80098b6:	4b18      	ldr	r3, [pc, #96]	; (8009918 <xTaskRemoveFromEventList+0xb0>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	4a16      	ldr	r2, [pc, #88]	; (8009918 <xTaskRemoveFromEventList+0xb0>)
 80098be:	6013      	str	r3, [r2, #0]
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098c4:	4613      	mov	r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	4413      	add	r3, r2
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	4a13      	ldr	r2, [pc, #76]	; (800991c <xTaskRemoveFromEventList+0xb4>)
 80098ce:	441a      	add	r2, r3
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	3304      	adds	r3, #4
 80098d4:	4619      	mov	r1, r3
 80098d6:	4610      	mov	r0, r2
 80098d8:	f7fe fd53 	bl	8008382 <vListInsertEnd>
 80098dc:	e005      	b.n	80098ea <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	3318      	adds	r3, #24
 80098e2:	4619      	mov	r1, r3
 80098e4:	480e      	ldr	r0, [pc, #56]	; (8009920 <xTaskRemoveFromEventList+0xb8>)
 80098e6:	f7fe fd4c 	bl	8008382 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ee:	4b0d      	ldr	r3, [pc, #52]	; (8009924 <xTaskRemoveFromEventList+0xbc>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d905      	bls.n	8009904 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80098f8:	2301      	movs	r3, #1
 80098fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80098fc:	4b0a      	ldr	r3, [pc, #40]	; (8009928 <xTaskRemoveFromEventList+0xc0>)
 80098fe:	2201      	movs	r2, #1
 8009900:	601a      	str	r2, [r3, #0]
 8009902:	e001      	b.n	8009908 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8009904:	2300      	movs	r3, #0
 8009906:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009908:	697b      	ldr	r3, [r7, #20]
}
 800990a:	4618      	mov	r0, r3
 800990c:	3718      	adds	r7, #24
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	200078bc 	.word	0x200078bc
 8009918:	2000789c 	.word	0x2000789c
 800991c:	20007798 	.word	0x20007798
 8009920:	20007854 	.word	0x20007854
 8009924:	20007794 	.word	0x20007794
 8009928:	200078a8 	.word	0x200078a8

0800992c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009934:	4b06      	ldr	r3, [pc, #24]	; (8009950 <vTaskInternalSetTimeOutState+0x24>)
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800993c:	4b05      	ldr	r3, [pc, #20]	; (8009954 <vTaskInternalSetTimeOutState+0x28>)
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	605a      	str	r2, [r3, #4]
}
 8009944:	bf00      	nop
 8009946:	370c      	adds	r7, #12
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr
 8009950:	200078ac 	.word	0x200078ac
 8009954:	20007898 	.word	0x20007898

08009958 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b088      	sub	sp, #32
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d109      	bne.n	800997c <xTaskCheckForTimeOut+0x24>
 8009968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996c:	f383 8811 	msr	BASEPRI, r3
 8009970:	f3bf 8f6f 	isb	sy
 8009974:	f3bf 8f4f 	dsb	sy
 8009978:	613b      	str	r3, [r7, #16]
 800997a:	e7fe      	b.n	800997a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d109      	bne.n	8009996 <xTaskCheckForTimeOut+0x3e>
 8009982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009986:	f383 8811 	msr	BASEPRI, r3
 800998a:	f3bf 8f6f 	isb	sy
 800998e:	f3bf 8f4f 	dsb	sy
 8009992:	60fb      	str	r3, [r7, #12]
 8009994:	e7fe      	b.n	8009994 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009996:	f7fe fea1 	bl	80086dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800999a:	4b1d      	ldr	r3, [pc, #116]	; (8009a10 <xTaskCheckForTimeOut+0xb8>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	69ba      	ldr	r2, [r7, #24]
 80099a6:	1ad3      	subs	r3, r2, r3
 80099a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b2:	d102      	bne.n	80099ba <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80099b4:	2300      	movs	r3, #0
 80099b6:	61fb      	str	r3, [r7, #28]
 80099b8:	e023      	b.n	8009a02 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	4b15      	ldr	r3, [pc, #84]	; (8009a14 <xTaskCheckForTimeOut+0xbc>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d007      	beq.n	80099d6 <xTaskCheckForTimeOut+0x7e>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	685a      	ldr	r2, [r3, #4]
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d802      	bhi.n	80099d6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80099d0:	2301      	movs	r3, #1
 80099d2:	61fb      	str	r3, [r7, #28]
 80099d4:	e015      	b.n	8009a02 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d90b      	bls.n	80099f8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	1ad2      	subs	r2, r2, r3
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f7ff ff9d 	bl	800992c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80099f2:	2300      	movs	r3, #0
 80099f4:	61fb      	str	r3, [r7, #28]
 80099f6:	e004      	b.n	8009a02 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	2200      	movs	r2, #0
 80099fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80099fe:	2301      	movs	r3, #1
 8009a00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009a02:	f7fe fe99 	bl	8008738 <vPortExitCritical>

	return xReturn;
 8009a06:	69fb      	ldr	r3, [r7, #28]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3720      	adds	r7, #32
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	20007898 	.word	0x20007898
 8009a14:	200078ac 	.word	0x200078ac

08009a18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009a18:	b480      	push	{r7}
 8009a1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009a1c:	4b03      	ldr	r3, [pc, #12]	; (8009a2c <vTaskMissedYield+0x14>)
 8009a1e:	2201      	movs	r2, #1
 8009a20:	601a      	str	r2, [r3, #0]
}
 8009a22:	bf00      	nop
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr
 8009a2c:	200078a8 	.word	0x200078a8

08009a30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009a38:	f000 f852 	bl	8009ae0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009a3c:	4b06      	ldr	r3, [pc, #24]	; (8009a58 <prvIdleTask+0x28>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d9f9      	bls.n	8009a38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009a44:	4b05      	ldr	r3, [pc, #20]	; (8009a5c <prvIdleTask+0x2c>)
 8009a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a4a:	601a      	str	r2, [r3, #0]
 8009a4c:	f3bf 8f4f 	dsb	sy
 8009a50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009a54:	e7f0      	b.n	8009a38 <prvIdleTask+0x8>
 8009a56:	bf00      	nop
 8009a58:	20007798 	.word	0x20007798
 8009a5c:	e000ed04 	.word	0xe000ed04

08009a60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a66:	2300      	movs	r3, #0
 8009a68:	607b      	str	r3, [r7, #4]
 8009a6a:	e00c      	b.n	8009a86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	4613      	mov	r3, r2
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	4413      	add	r3, r2
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	4a12      	ldr	r2, [pc, #72]	; (8009ac0 <prvInitialiseTaskLists+0x60>)
 8009a78:	4413      	add	r3, r2
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7fe fc54 	bl	8008328 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	3301      	adds	r3, #1
 8009a84:	607b      	str	r3, [r7, #4]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2b06      	cmp	r3, #6
 8009a8a:	d9ef      	bls.n	8009a6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009a8c:	480d      	ldr	r0, [pc, #52]	; (8009ac4 <prvInitialiseTaskLists+0x64>)
 8009a8e:	f7fe fc4b 	bl	8008328 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009a92:	480d      	ldr	r0, [pc, #52]	; (8009ac8 <prvInitialiseTaskLists+0x68>)
 8009a94:	f7fe fc48 	bl	8008328 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009a98:	480c      	ldr	r0, [pc, #48]	; (8009acc <prvInitialiseTaskLists+0x6c>)
 8009a9a:	f7fe fc45 	bl	8008328 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009a9e:	480c      	ldr	r0, [pc, #48]	; (8009ad0 <prvInitialiseTaskLists+0x70>)
 8009aa0:	f7fe fc42 	bl	8008328 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009aa4:	480b      	ldr	r0, [pc, #44]	; (8009ad4 <prvInitialiseTaskLists+0x74>)
 8009aa6:	f7fe fc3f 	bl	8008328 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009aaa:	4b0b      	ldr	r3, [pc, #44]	; (8009ad8 <prvInitialiseTaskLists+0x78>)
 8009aac:	4a05      	ldr	r2, [pc, #20]	; (8009ac4 <prvInitialiseTaskLists+0x64>)
 8009aae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009ab0:	4b0a      	ldr	r3, [pc, #40]	; (8009adc <prvInitialiseTaskLists+0x7c>)
 8009ab2:	4a05      	ldr	r2, [pc, #20]	; (8009ac8 <prvInitialiseTaskLists+0x68>)
 8009ab4:	601a      	str	r2, [r3, #0]
}
 8009ab6:	bf00      	nop
 8009ab8:	3708      	adds	r7, #8
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	20007798 	.word	0x20007798
 8009ac4:	20007824 	.word	0x20007824
 8009ac8:	20007838 	.word	0x20007838
 8009acc:	20007854 	.word	0x20007854
 8009ad0:	20007868 	.word	0x20007868
 8009ad4:	20007880 	.word	0x20007880
 8009ad8:	2000784c 	.word	0x2000784c
 8009adc:	20007850 	.word	0x20007850

08009ae0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ae6:	e019      	b.n	8009b1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009ae8:	f7fe fdf8 	bl	80086dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009aec:	4b0f      	ldr	r3, [pc, #60]	; (8009b2c <prvCheckTasksWaitingTermination+0x4c>)
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	3304      	adds	r3, #4
 8009af8:	4618      	mov	r0, r3
 8009afa:	f7fe fc9f 	bl	800843c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009afe:	4b0c      	ldr	r3, [pc, #48]	; (8009b30 <prvCheckTasksWaitingTermination+0x50>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	3b01      	subs	r3, #1
 8009b04:	4a0a      	ldr	r2, [pc, #40]	; (8009b30 <prvCheckTasksWaitingTermination+0x50>)
 8009b06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009b08:	4b0a      	ldr	r3, [pc, #40]	; (8009b34 <prvCheckTasksWaitingTermination+0x54>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	3b01      	subs	r3, #1
 8009b0e:	4a09      	ldr	r2, [pc, #36]	; (8009b34 <prvCheckTasksWaitingTermination+0x54>)
 8009b10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009b12:	f7fe fe11 	bl	8008738 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 f80e 	bl	8009b38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b1c:	4b05      	ldr	r3, [pc, #20]	; (8009b34 <prvCheckTasksWaitingTermination+0x54>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d1e1      	bne.n	8009ae8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009b24:	bf00      	nop
 8009b26:	3708      	adds	r7, #8
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	20007868 	.word	0x20007868
 8009b30:	20007894 	.word	0x20007894
 8009b34:	2000787c 	.word	0x2000787c

08009b38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7fe facf 	bl	80080e8 <vPortFree>
			vPortFree( pxTCB );
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f7fe facc 	bl	80080e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009b50:	bf00      	nop
 8009b52:	3708      	adds	r7, #8
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b5e:	4b0f      	ldr	r3, [pc, #60]	; (8009b9c <prvResetNextTaskUnblockTime+0x44>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d101      	bne.n	8009b6c <prvResetNextTaskUnblockTime+0x14>
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e000      	b.n	8009b6e <prvResetNextTaskUnblockTime+0x16>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d004      	beq.n	8009b7c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b72:	4b0b      	ldr	r3, [pc, #44]	; (8009ba0 <prvResetNextTaskUnblockTime+0x48>)
 8009b74:	f04f 32ff 	mov.w	r2, #4294967295
 8009b78:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009b7a:	e008      	b.n	8009b8e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009b7c:	4b07      	ldr	r3, [pc, #28]	; (8009b9c <prvResetNextTaskUnblockTime+0x44>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	4a05      	ldr	r2, [pc, #20]	; (8009ba0 <prvResetNextTaskUnblockTime+0x48>)
 8009b8c:	6013      	str	r3, [r2, #0]
}
 8009b8e:	bf00      	nop
 8009b90:	370c      	adds	r7, #12
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr
 8009b9a:	bf00      	nop
 8009b9c:	2000784c 	.word	0x2000784c
 8009ba0:	200078b4 	.word	0x200078b4

08009ba4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009baa:	4b0b      	ldr	r3, [pc, #44]	; (8009bd8 <xTaskGetSchedulerState+0x34>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d102      	bne.n	8009bb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	607b      	str	r3, [r7, #4]
 8009bb6:	e008      	b.n	8009bca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bb8:	4b08      	ldr	r3, [pc, #32]	; (8009bdc <xTaskGetSchedulerState+0x38>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d102      	bne.n	8009bc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009bc0:	2302      	movs	r3, #2
 8009bc2:	607b      	str	r3, [r7, #4]
 8009bc4:	e001      	b.n	8009bca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009bca:	687b      	ldr	r3, [r7, #4]
	}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr
 8009bd8:	200078a0 	.word	0x200078a0
 8009bdc:	200078bc 	.word	0x200078bc

08009be0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009bec:	2300      	movs	r3, #0
 8009bee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d06c      	beq.n	8009cd0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009bf6:	4b39      	ldr	r3, [pc, #228]	; (8009cdc <xTaskPriorityDisinherit+0xfc>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	693a      	ldr	r2, [r7, #16]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d009      	beq.n	8009c14 <xTaskPriorityDisinherit+0x34>
 8009c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c04:	f383 8811 	msr	BASEPRI, r3
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	60fb      	str	r3, [r7, #12]
 8009c12:	e7fe      	b.n	8009c12 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d109      	bne.n	8009c30 <xTaskPriorityDisinherit+0x50>
 8009c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c20:	f383 8811 	msr	BASEPRI, r3
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	60bb      	str	r3, [r7, #8]
 8009c2e:	e7fe      	b.n	8009c2e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c34:	1e5a      	subs	r2, r3, #1
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d044      	beq.n	8009cd0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d140      	bne.n	8009cd0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	3304      	adds	r3, #4
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7fe fbf2 	bl	800843c <uxListRemove>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d115      	bne.n	8009c8a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c62:	491f      	ldr	r1, [pc, #124]	; (8009ce0 <xTaskPriorityDisinherit+0x100>)
 8009c64:	4613      	mov	r3, r2
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	4413      	add	r3, r2
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	440b      	add	r3, r1
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d10a      	bne.n	8009c8a <xTaskPriorityDisinherit+0xaa>
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c78:	2201      	movs	r2, #1
 8009c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c7e:	43da      	mvns	r2, r3
 8009c80:	4b18      	ldr	r3, [pc, #96]	; (8009ce4 <xTaskPriorityDisinherit+0x104>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4013      	ands	r3, r2
 8009c86:	4a17      	ldr	r2, [pc, #92]	; (8009ce4 <xTaskPriorityDisinherit+0x104>)
 8009c88:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c96:	f1c3 0207 	rsb	r2, r3, #7
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	409a      	lsls	r2, r3
 8009ca6:	4b0f      	ldr	r3, [pc, #60]	; (8009ce4 <xTaskPriorityDisinherit+0x104>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4313      	orrs	r3, r2
 8009cac:	4a0d      	ldr	r2, [pc, #52]	; (8009ce4 <xTaskPriorityDisinherit+0x104>)
 8009cae:	6013      	str	r3, [r2, #0]
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	4413      	add	r3, r2
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	4a08      	ldr	r2, [pc, #32]	; (8009ce0 <xTaskPriorityDisinherit+0x100>)
 8009cbe:	441a      	add	r2, r3
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	3304      	adds	r3, #4
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	4610      	mov	r0, r2
 8009cc8:	f7fe fb5b 	bl	8008382 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009cd0:	697b      	ldr	r3, [r7, #20]
	}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3718      	adds	r7, #24
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	20007794 	.word	0x20007794
 8009ce0:	20007798 	.word	0x20007798
 8009ce4:	2000789c 	.word	0x2000789c

08009ce8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009cf2:	4b29      	ldr	r3, [pc, #164]	; (8009d98 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cf8:	4b28      	ldr	r3, [pc, #160]	; (8009d9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	3304      	adds	r3, #4
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7fe fb9c 	bl	800843c <uxListRemove>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d10b      	bne.n	8009d22 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009d0a:	4b24      	ldr	r3, [pc, #144]	; (8009d9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d10:	2201      	movs	r2, #1
 8009d12:	fa02 f303 	lsl.w	r3, r2, r3
 8009d16:	43da      	mvns	r2, r3
 8009d18:	4b21      	ldr	r3, [pc, #132]	; (8009da0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4013      	ands	r3, r2
 8009d1e:	4a20      	ldr	r2, [pc, #128]	; (8009da0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009d20:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d28:	d10a      	bne.n	8009d40 <prvAddCurrentTaskToDelayedList+0x58>
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d007      	beq.n	8009d40 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d30:	4b1a      	ldr	r3, [pc, #104]	; (8009d9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	3304      	adds	r3, #4
 8009d36:	4619      	mov	r1, r3
 8009d38:	481a      	ldr	r0, [pc, #104]	; (8009da4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009d3a:	f7fe fb22 	bl	8008382 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009d3e:	e026      	b.n	8009d8e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4413      	add	r3, r2
 8009d46:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009d48:	4b14      	ldr	r3, [pc, #80]	; (8009d9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009d50:	68ba      	ldr	r2, [r7, #8]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d209      	bcs.n	8009d6c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d58:	4b13      	ldr	r3, [pc, #76]	; (8009da8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	4b0f      	ldr	r3, [pc, #60]	; (8009d9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	3304      	adds	r3, #4
 8009d62:	4619      	mov	r1, r3
 8009d64:	4610      	mov	r0, r2
 8009d66:	f7fe fb30 	bl	80083ca <vListInsert>
}
 8009d6a:	e010      	b.n	8009d8e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d6c:	4b0f      	ldr	r3, [pc, #60]	; (8009dac <prvAddCurrentTaskToDelayedList+0xc4>)
 8009d6e:	681a      	ldr	r2, [r3, #0]
 8009d70:	4b0a      	ldr	r3, [pc, #40]	; (8009d9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	3304      	adds	r3, #4
 8009d76:	4619      	mov	r1, r3
 8009d78:	4610      	mov	r0, r2
 8009d7a:	f7fe fb26 	bl	80083ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009d7e:	4b0c      	ldr	r3, [pc, #48]	; (8009db0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	68ba      	ldr	r2, [r7, #8]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d202      	bcs.n	8009d8e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009d88:	4a09      	ldr	r2, [pc, #36]	; (8009db0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	6013      	str	r3, [r2, #0]
}
 8009d8e:	bf00      	nop
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	20007898 	.word	0x20007898
 8009d9c:	20007794 	.word	0x20007794
 8009da0:	2000789c 	.word	0x2000789c
 8009da4:	20007880 	.word	0x20007880
 8009da8:	20007850 	.word	0x20007850
 8009dac:	2000784c 	.word	0x2000784c
 8009db0:	200078b4 	.word	0x200078b4

08009db4 <__errno>:
 8009db4:	4b01      	ldr	r3, [pc, #4]	; (8009dbc <__errno+0x8>)
 8009db6:	6818      	ldr	r0, [r3, #0]
 8009db8:	4770      	bx	lr
 8009dba:	bf00      	nop
 8009dbc:	200000e4 	.word	0x200000e4

08009dc0 <__libc_init_array>:
 8009dc0:	b570      	push	{r4, r5, r6, lr}
 8009dc2:	4e0d      	ldr	r6, [pc, #52]	; (8009df8 <__libc_init_array+0x38>)
 8009dc4:	4c0d      	ldr	r4, [pc, #52]	; (8009dfc <__libc_init_array+0x3c>)
 8009dc6:	1ba4      	subs	r4, r4, r6
 8009dc8:	10a4      	asrs	r4, r4, #2
 8009dca:	2500      	movs	r5, #0
 8009dcc:	42a5      	cmp	r5, r4
 8009dce:	d109      	bne.n	8009de4 <__libc_init_array+0x24>
 8009dd0:	4e0b      	ldr	r6, [pc, #44]	; (8009e00 <__libc_init_array+0x40>)
 8009dd2:	4c0c      	ldr	r4, [pc, #48]	; (8009e04 <__libc_init_array+0x44>)
 8009dd4:	f000 fc3e 	bl	800a654 <_init>
 8009dd8:	1ba4      	subs	r4, r4, r6
 8009dda:	10a4      	asrs	r4, r4, #2
 8009ddc:	2500      	movs	r5, #0
 8009dde:	42a5      	cmp	r5, r4
 8009de0:	d105      	bne.n	8009dee <__libc_init_array+0x2e>
 8009de2:	bd70      	pop	{r4, r5, r6, pc}
 8009de4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009de8:	4798      	blx	r3
 8009dea:	3501      	adds	r5, #1
 8009dec:	e7ee      	b.n	8009dcc <__libc_init_array+0xc>
 8009dee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009df2:	4798      	blx	r3
 8009df4:	3501      	adds	r5, #1
 8009df6:	e7f2      	b.n	8009dde <__libc_init_array+0x1e>
 8009df8:	0800a754 	.word	0x0800a754
 8009dfc:	0800a754 	.word	0x0800a754
 8009e00:	0800a754 	.word	0x0800a754
 8009e04:	0800a758 	.word	0x0800a758

08009e08 <memcpy>:
 8009e08:	b510      	push	{r4, lr}
 8009e0a:	1e43      	subs	r3, r0, #1
 8009e0c:	440a      	add	r2, r1
 8009e0e:	4291      	cmp	r1, r2
 8009e10:	d100      	bne.n	8009e14 <memcpy+0xc>
 8009e12:	bd10      	pop	{r4, pc}
 8009e14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e1c:	e7f7      	b.n	8009e0e <memcpy+0x6>

08009e1e <memset>:
 8009e1e:	4402      	add	r2, r0
 8009e20:	4603      	mov	r3, r0
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d100      	bne.n	8009e28 <memset+0xa>
 8009e26:	4770      	bx	lr
 8009e28:	f803 1b01 	strb.w	r1, [r3], #1
 8009e2c:	e7f9      	b.n	8009e22 <memset+0x4>
	...

08009e30 <siprintf>:
 8009e30:	b40e      	push	{r1, r2, r3}
 8009e32:	b500      	push	{lr}
 8009e34:	b09c      	sub	sp, #112	; 0x70
 8009e36:	f44f 7102 	mov.w	r1, #520	; 0x208
 8009e3a:	ab1d      	add	r3, sp, #116	; 0x74
 8009e3c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8009e40:	9002      	str	r0, [sp, #8]
 8009e42:	9006      	str	r0, [sp, #24]
 8009e44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e48:	480a      	ldr	r0, [pc, #40]	; (8009e74 <siprintf+0x44>)
 8009e4a:	9104      	str	r1, [sp, #16]
 8009e4c:	9107      	str	r1, [sp, #28]
 8009e4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009e52:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e56:	f8ad 1016 	strh.w	r1, [sp, #22]
 8009e5a:	6800      	ldr	r0, [r0, #0]
 8009e5c:	9301      	str	r3, [sp, #4]
 8009e5e:	a902      	add	r1, sp, #8
 8009e60:	f000 f866 	bl	8009f30 <_svfiprintf_r>
 8009e64:	9b02      	ldr	r3, [sp, #8]
 8009e66:	2200      	movs	r2, #0
 8009e68:	701a      	strb	r2, [r3, #0]
 8009e6a:	b01c      	add	sp, #112	; 0x70
 8009e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e70:	b003      	add	sp, #12
 8009e72:	4770      	bx	lr
 8009e74:	200000e4 	.word	0x200000e4

08009e78 <__ssputs_r>:
 8009e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e7c:	688e      	ldr	r6, [r1, #8]
 8009e7e:	429e      	cmp	r6, r3
 8009e80:	4682      	mov	sl, r0
 8009e82:	460c      	mov	r4, r1
 8009e84:	4691      	mov	r9, r2
 8009e86:	4698      	mov	r8, r3
 8009e88:	d835      	bhi.n	8009ef6 <__ssputs_r+0x7e>
 8009e8a:	898a      	ldrh	r2, [r1, #12]
 8009e8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e90:	d031      	beq.n	8009ef6 <__ssputs_r+0x7e>
 8009e92:	6825      	ldr	r5, [r4, #0]
 8009e94:	6909      	ldr	r1, [r1, #16]
 8009e96:	1a6f      	subs	r7, r5, r1
 8009e98:	6965      	ldr	r5, [r4, #20]
 8009e9a:	2302      	movs	r3, #2
 8009e9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ea0:	fb95 f5f3 	sdiv	r5, r5, r3
 8009ea4:	f108 0301 	add.w	r3, r8, #1
 8009ea8:	443b      	add	r3, r7
 8009eaa:	429d      	cmp	r5, r3
 8009eac:	bf38      	it	cc
 8009eae:	461d      	movcc	r5, r3
 8009eb0:	0553      	lsls	r3, r2, #21
 8009eb2:	d531      	bpl.n	8009f18 <__ssputs_r+0xa0>
 8009eb4:	4629      	mov	r1, r5
 8009eb6:	f000 fb2d 	bl	800a514 <_malloc_r>
 8009eba:	4606      	mov	r6, r0
 8009ebc:	b950      	cbnz	r0, 8009ed4 <__ssputs_r+0x5c>
 8009ebe:	230c      	movs	r3, #12
 8009ec0:	f8ca 3000 	str.w	r3, [sl]
 8009ec4:	89a3      	ldrh	r3, [r4, #12]
 8009ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eca:	81a3      	strh	r3, [r4, #12]
 8009ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ed4:	463a      	mov	r2, r7
 8009ed6:	6921      	ldr	r1, [r4, #16]
 8009ed8:	f7ff ff96 	bl	8009e08 <memcpy>
 8009edc:	89a3      	ldrh	r3, [r4, #12]
 8009ede:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ee6:	81a3      	strh	r3, [r4, #12]
 8009ee8:	6126      	str	r6, [r4, #16]
 8009eea:	6165      	str	r5, [r4, #20]
 8009eec:	443e      	add	r6, r7
 8009eee:	1bed      	subs	r5, r5, r7
 8009ef0:	6026      	str	r6, [r4, #0]
 8009ef2:	60a5      	str	r5, [r4, #8]
 8009ef4:	4646      	mov	r6, r8
 8009ef6:	4546      	cmp	r6, r8
 8009ef8:	bf28      	it	cs
 8009efa:	4646      	movcs	r6, r8
 8009efc:	4632      	mov	r2, r6
 8009efe:	4649      	mov	r1, r9
 8009f00:	6820      	ldr	r0, [r4, #0]
 8009f02:	f000 fa9f 	bl	800a444 <memmove>
 8009f06:	68a3      	ldr	r3, [r4, #8]
 8009f08:	1b9b      	subs	r3, r3, r6
 8009f0a:	60a3      	str	r3, [r4, #8]
 8009f0c:	6823      	ldr	r3, [r4, #0]
 8009f0e:	441e      	add	r6, r3
 8009f10:	6026      	str	r6, [r4, #0]
 8009f12:	2000      	movs	r0, #0
 8009f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f18:	462a      	mov	r2, r5
 8009f1a:	f000 fb59 	bl	800a5d0 <_realloc_r>
 8009f1e:	4606      	mov	r6, r0
 8009f20:	2800      	cmp	r0, #0
 8009f22:	d1e1      	bne.n	8009ee8 <__ssputs_r+0x70>
 8009f24:	6921      	ldr	r1, [r4, #16]
 8009f26:	4650      	mov	r0, sl
 8009f28:	f000 faa6 	bl	800a478 <_free_r>
 8009f2c:	e7c7      	b.n	8009ebe <__ssputs_r+0x46>
	...

08009f30 <_svfiprintf_r>:
 8009f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f34:	b09d      	sub	sp, #116	; 0x74
 8009f36:	4680      	mov	r8, r0
 8009f38:	9303      	str	r3, [sp, #12]
 8009f3a:	898b      	ldrh	r3, [r1, #12]
 8009f3c:	061c      	lsls	r4, r3, #24
 8009f3e:	460d      	mov	r5, r1
 8009f40:	4616      	mov	r6, r2
 8009f42:	d50f      	bpl.n	8009f64 <_svfiprintf_r+0x34>
 8009f44:	690b      	ldr	r3, [r1, #16]
 8009f46:	b96b      	cbnz	r3, 8009f64 <_svfiprintf_r+0x34>
 8009f48:	2140      	movs	r1, #64	; 0x40
 8009f4a:	f000 fae3 	bl	800a514 <_malloc_r>
 8009f4e:	6028      	str	r0, [r5, #0]
 8009f50:	6128      	str	r0, [r5, #16]
 8009f52:	b928      	cbnz	r0, 8009f60 <_svfiprintf_r+0x30>
 8009f54:	230c      	movs	r3, #12
 8009f56:	f8c8 3000 	str.w	r3, [r8]
 8009f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f5e:	e0c5      	b.n	800a0ec <_svfiprintf_r+0x1bc>
 8009f60:	2340      	movs	r3, #64	; 0x40
 8009f62:	616b      	str	r3, [r5, #20]
 8009f64:	2300      	movs	r3, #0
 8009f66:	9309      	str	r3, [sp, #36]	; 0x24
 8009f68:	2320      	movs	r3, #32
 8009f6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f6e:	2330      	movs	r3, #48	; 0x30
 8009f70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f74:	f04f 0b01 	mov.w	fp, #1
 8009f78:	4637      	mov	r7, r6
 8009f7a:	463c      	mov	r4, r7
 8009f7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d13c      	bne.n	8009ffe <_svfiprintf_r+0xce>
 8009f84:	ebb7 0a06 	subs.w	sl, r7, r6
 8009f88:	d00b      	beq.n	8009fa2 <_svfiprintf_r+0x72>
 8009f8a:	4653      	mov	r3, sl
 8009f8c:	4632      	mov	r2, r6
 8009f8e:	4629      	mov	r1, r5
 8009f90:	4640      	mov	r0, r8
 8009f92:	f7ff ff71 	bl	8009e78 <__ssputs_r>
 8009f96:	3001      	adds	r0, #1
 8009f98:	f000 80a3 	beq.w	800a0e2 <_svfiprintf_r+0x1b2>
 8009f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f9e:	4453      	add	r3, sl
 8009fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8009fa2:	783b      	ldrb	r3, [r7, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f000 809c 	beq.w	800a0e2 <_svfiprintf_r+0x1b2>
 8009faa:	2300      	movs	r3, #0
 8009fac:	f04f 32ff 	mov.w	r2, #4294967295
 8009fb0:	9304      	str	r3, [sp, #16]
 8009fb2:	9307      	str	r3, [sp, #28]
 8009fb4:	9205      	str	r2, [sp, #20]
 8009fb6:	9306      	str	r3, [sp, #24]
 8009fb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fbc:	931a      	str	r3, [sp, #104]	; 0x68
 8009fbe:	2205      	movs	r2, #5
 8009fc0:	7821      	ldrb	r1, [r4, #0]
 8009fc2:	4850      	ldr	r0, [pc, #320]	; (800a104 <_svfiprintf_r+0x1d4>)
 8009fc4:	f7f6 f90c 	bl	80001e0 <memchr>
 8009fc8:	1c67      	adds	r7, r4, #1
 8009fca:	9b04      	ldr	r3, [sp, #16]
 8009fcc:	b9d8      	cbnz	r0, 800a006 <_svfiprintf_r+0xd6>
 8009fce:	06d9      	lsls	r1, r3, #27
 8009fd0:	bf44      	itt	mi
 8009fd2:	2220      	movmi	r2, #32
 8009fd4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009fd8:	071a      	lsls	r2, r3, #28
 8009fda:	bf44      	itt	mi
 8009fdc:	222b      	movmi	r2, #43	; 0x2b
 8009fde:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009fe2:	7822      	ldrb	r2, [r4, #0]
 8009fe4:	2a2a      	cmp	r2, #42	; 0x2a
 8009fe6:	d016      	beq.n	800a016 <_svfiprintf_r+0xe6>
 8009fe8:	9a07      	ldr	r2, [sp, #28]
 8009fea:	2100      	movs	r1, #0
 8009fec:	200a      	movs	r0, #10
 8009fee:	4627      	mov	r7, r4
 8009ff0:	3401      	adds	r4, #1
 8009ff2:	783b      	ldrb	r3, [r7, #0]
 8009ff4:	3b30      	subs	r3, #48	; 0x30
 8009ff6:	2b09      	cmp	r3, #9
 8009ff8:	d951      	bls.n	800a09e <_svfiprintf_r+0x16e>
 8009ffa:	b1c9      	cbz	r1, 800a030 <_svfiprintf_r+0x100>
 8009ffc:	e011      	b.n	800a022 <_svfiprintf_r+0xf2>
 8009ffe:	2b25      	cmp	r3, #37	; 0x25
 800a000:	d0c0      	beq.n	8009f84 <_svfiprintf_r+0x54>
 800a002:	4627      	mov	r7, r4
 800a004:	e7b9      	b.n	8009f7a <_svfiprintf_r+0x4a>
 800a006:	4a3f      	ldr	r2, [pc, #252]	; (800a104 <_svfiprintf_r+0x1d4>)
 800a008:	1a80      	subs	r0, r0, r2
 800a00a:	fa0b f000 	lsl.w	r0, fp, r0
 800a00e:	4318      	orrs	r0, r3
 800a010:	9004      	str	r0, [sp, #16]
 800a012:	463c      	mov	r4, r7
 800a014:	e7d3      	b.n	8009fbe <_svfiprintf_r+0x8e>
 800a016:	9a03      	ldr	r2, [sp, #12]
 800a018:	1d11      	adds	r1, r2, #4
 800a01a:	6812      	ldr	r2, [r2, #0]
 800a01c:	9103      	str	r1, [sp, #12]
 800a01e:	2a00      	cmp	r2, #0
 800a020:	db01      	blt.n	800a026 <_svfiprintf_r+0xf6>
 800a022:	9207      	str	r2, [sp, #28]
 800a024:	e004      	b.n	800a030 <_svfiprintf_r+0x100>
 800a026:	4252      	negs	r2, r2
 800a028:	f043 0302 	orr.w	r3, r3, #2
 800a02c:	9207      	str	r2, [sp, #28]
 800a02e:	9304      	str	r3, [sp, #16]
 800a030:	783b      	ldrb	r3, [r7, #0]
 800a032:	2b2e      	cmp	r3, #46	; 0x2e
 800a034:	d10e      	bne.n	800a054 <_svfiprintf_r+0x124>
 800a036:	787b      	ldrb	r3, [r7, #1]
 800a038:	2b2a      	cmp	r3, #42	; 0x2a
 800a03a:	f107 0101 	add.w	r1, r7, #1
 800a03e:	d132      	bne.n	800a0a6 <_svfiprintf_r+0x176>
 800a040:	9b03      	ldr	r3, [sp, #12]
 800a042:	1d1a      	adds	r2, r3, #4
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	9203      	str	r2, [sp, #12]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	bfb8      	it	lt
 800a04c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a050:	3702      	adds	r7, #2
 800a052:	9305      	str	r3, [sp, #20]
 800a054:	4c2c      	ldr	r4, [pc, #176]	; (800a108 <_svfiprintf_r+0x1d8>)
 800a056:	7839      	ldrb	r1, [r7, #0]
 800a058:	2203      	movs	r2, #3
 800a05a:	4620      	mov	r0, r4
 800a05c:	f7f6 f8c0 	bl	80001e0 <memchr>
 800a060:	b138      	cbz	r0, 800a072 <_svfiprintf_r+0x142>
 800a062:	2340      	movs	r3, #64	; 0x40
 800a064:	1b00      	subs	r0, r0, r4
 800a066:	fa03 f000 	lsl.w	r0, r3, r0
 800a06a:	9b04      	ldr	r3, [sp, #16]
 800a06c:	4303      	orrs	r3, r0
 800a06e:	9304      	str	r3, [sp, #16]
 800a070:	3701      	adds	r7, #1
 800a072:	7839      	ldrb	r1, [r7, #0]
 800a074:	4825      	ldr	r0, [pc, #148]	; (800a10c <_svfiprintf_r+0x1dc>)
 800a076:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a07a:	2206      	movs	r2, #6
 800a07c:	1c7e      	adds	r6, r7, #1
 800a07e:	f7f6 f8af 	bl	80001e0 <memchr>
 800a082:	2800      	cmp	r0, #0
 800a084:	d035      	beq.n	800a0f2 <_svfiprintf_r+0x1c2>
 800a086:	4b22      	ldr	r3, [pc, #136]	; (800a110 <_svfiprintf_r+0x1e0>)
 800a088:	b9fb      	cbnz	r3, 800a0ca <_svfiprintf_r+0x19a>
 800a08a:	9b03      	ldr	r3, [sp, #12]
 800a08c:	3307      	adds	r3, #7
 800a08e:	f023 0307 	bic.w	r3, r3, #7
 800a092:	3308      	adds	r3, #8
 800a094:	9303      	str	r3, [sp, #12]
 800a096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a098:	444b      	add	r3, r9
 800a09a:	9309      	str	r3, [sp, #36]	; 0x24
 800a09c:	e76c      	b.n	8009f78 <_svfiprintf_r+0x48>
 800a09e:	fb00 3202 	mla	r2, r0, r2, r3
 800a0a2:	2101      	movs	r1, #1
 800a0a4:	e7a3      	b.n	8009fee <_svfiprintf_r+0xbe>
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	9305      	str	r3, [sp, #20]
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	240a      	movs	r4, #10
 800a0ae:	460f      	mov	r7, r1
 800a0b0:	3101      	adds	r1, #1
 800a0b2:	783a      	ldrb	r2, [r7, #0]
 800a0b4:	3a30      	subs	r2, #48	; 0x30
 800a0b6:	2a09      	cmp	r2, #9
 800a0b8:	d903      	bls.n	800a0c2 <_svfiprintf_r+0x192>
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d0ca      	beq.n	800a054 <_svfiprintf_r+0x124>
 800a0be:	9005      	str	r0, [sp, #20]
 800a0c0:	e7c8      	b.n	800a054 <_svfiprintf_r+0x124>
 800a0c2:	fb04 2000 	mla	r0, r4, r0, r2
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	e7f1      	b.n	800a0ae <_svfiprintf_r+0x17e>
 800a0ca:	ab03      	add	r3, sp, #12
 800a0cc:	9300      	str	r3, [sp, #0]
 800a0ce:	462a      	mov	r2, r5
 800a0d0:	4b10      	ldr	r3, [pc, #64]	; (800a114 <_svfiprintf_r+0x1e4>)
 800a0d2:	a904      	add	r1, sp, #16
 800a0d4:	4640      	mov	r0, r8
 800a0d6:	f3af 8000 	nop.w
 800a0da:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a0de:	4681      	mov	r9, r0
 800a0e0:	d1d9      	bne.n	800a096 <_svfiprintf_r+0x166>
 800a0e2:	89ab      	ldrh	r3, [r5, #12]
 800a0e4:	065b      	lsls	r3, r3, #25
 800a0e6:	f53f af38 	bmi.w	8009f5a <_svfiprintf_r+0x2a>
 800a0ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0ec:	b01d      	add	sp, #116	; 0x74
 800a0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f2:	ab03      	add	r3, sp, #12
 800a0f4:	9300      	str	r3, [sp, #0]
 800a0f6:	462a      	mov	r2, r5
 800a0f8:	4b06      	ldr	r3, [pc, #24]	; (800a114 <_svfiprintf_r+0x1e4>)
 800a0fa:	a904      	add	r1, sp, #16
 800a0fc:	4640      	mov	r0, r8
 800a0fe:	f000 f881 	bl	800a204 <_printf_i>
 800a102:	e7ea      	b.n	800a0da <_svfiprintf_r+0x1aa>
 800a104:	0800a718 	.word	0x0800a718
 800a108:	0800a71e 	.word	0x0800a71e
 800a10c:	0800a722 	.word	0x0800a722
 800a110:	00000000 	.word	0x00000000
 800a114:	08009e79 	.word	0x08009e79

0800a118 <_printf_common>:
 800a118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a11c:	4691      	mov	r9, r2
 800a11e:	461f      	mov	r7, r3
 800a120:	688a      	ldr	r2, [r1, #8]
 800a122:	690b      	ldr	r3, [r1, #16]
 800a124:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a128:	4293      	cmp	r3, r2
 800a12a:	bfb8      	it	lt
 800a12c:	4613      	movlt	r3, r2
 800a12e:	f8c9 3000 	str.w	r3, [r9]
 800a132:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a136:	4606      	mov	r6, r0
 800a138:	460c      	mov	r4, r1
 800a13a:	b112      	cbz	r2, 800a142 <_printf_common+0x2a>
 800a13c:	3301      	adds	r3, #1
 800a13e:	f8c9 3000 	str.w	r3, [r9]
 800a142:	6823      	ldr	r3, [r4, #0]
 800a144:	0699      	lsls	r1, r3, #26
 800a146:	bf42      	ittt	mi
 800a148:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a14c:	3302      	addmi	r3, #2
 800a14e:	f8c9 3000 	strmi.w	r3, [r9]
 800a152:	6825      	ldr	r5, [r4, #0]
 800a154:	f015 0506 	ands.w	r5, r5, #6
 800a158:	d107      	bne.n	800a16a <_printf_common+0x52>
 800a15a:	f104 0a19 	add.w	sl, r4, #25
 800a15e:	68e3      	ldr	r3, [r4, #12]
 800a160:	f8d9 2000 	ldr.w	r2, [r9]
 800a164:	1a9b      	subs	r3, r3, r2
 800a166:	429d      	cmp	r5, r3
 800a168:	db29      	blt.n	800a1be <_printf_common+0xa6>
 800a16a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a16e:	6822      	ldr	r2, [r4, #0]
 800a170:	3300      	adds	r3, #0
 800a172:	bf18      	it	ne
 800a174:	2301      	movne	r3, #1
 800a176:	0692      	lsls	r2, r2, #26
 800a178:	d42e      	bmi.n	800a1d8 <_printf_common+0xc0>
 800a17a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a17e:	4639      	mov	r1, r7
 800a180:	4630      	mov	r0, r6
 800a182:	47c0      	blx	r8
 800a184:	3001      	adds	r0, #1
 800a186:	d021      	beq.n	800a1cc <_printf_common+0xb4>
 800a188:	6823      	ldr	r3, [r4, #0]
 800a18a:	68e5      	ldr	r5, [r4, #12]
 800a18c:	f8d9 2000 	ldr.w	r2, [r9]
 800a190:	f003 0306 	and.w	r3, r3, #6
 800a194:	2b04      	cmp	r3, #4
 800a196:	bf08      	it	eq
 800a198:	1aad      	subeq	r5, r5, r2
 800a19a:	68a3      	ldr	r3, [r4, #8]
 800a19c:	6922      	ldr	r2, [r4, #16]
 800a19e:	bf0c      	ite	eq
 800a1a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1a4:	2500      	movne	r5, #0
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	bfc4      	itt	gt
 800a1aa:	1a9b      	subgt	r3, r3, r2
 800a1ac:	18ed      	addgt	r5, r5, r3
 800a1ae:	f04f 0900 	mov.w	r9, #0
 800a1b2:	341a      	adds	r4, #26
 800a1b4:	454d      	cmp	r5, r9
 800a1b6:	d11b      	bne.n	800a1f0 <_printf_common+0xd8>
 800a1b8:	2000      	movs	r0, #0
 800a1ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1be:	2301      	movs	r3, #1
 800a1c0:	4652      	mov	r2, sl
 800a1c2:	4639      	mov	r1, r7
 800a1c4:	4630      	mov	r0, r6
 800a1c6:	47c0      	blx	r8
 800a1c8:	3001      	adds	r0, #1
 800a1ca:	d103      	bne.n	800a1d4 <_printf_common+0xbc>
 800a1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1d4:	3501      	adds	r5, #1
 800a1d6:	e7c2      	b.n	800a15e <_printf_common+0x46>
 800a1d8:	18e1      	adds	r1, r4, r3
 800a1da:	1c5a      	adds	r2, r3, #1
 800a1dc:	2030      	movs	r0, #48	; 0x30
 800a1de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1e2:	4422      	add	r2, r4
 800a1e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1ec:	3302      	adds	r3, #2
 800a1ee:	e7c4      	b.n	800a17a <_printf_common+0x62>
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	4622      	mov	r2, r4
 800a1f4:	4639      	mov	r1, r7
 800a1f6:	4630      	mov	r0, r6
 800a1f8:	47c0      	blx	r8
 800a1fa:	3001      	adds	r0, #1
 800a1fc:	d0e6      	beq.n	800a1cc <_printf_common+0xb4>
 800a1fe:	f109 0901 	add.w	r9, r9, #1
 800a202:	e7d7      	b.n	800a1b4 <_printf_common+0x9c>

0800a204 <_printf_i>:
 800a204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a208:	4617      	mov	r7, r2
 800a20a:	7e0a      	ldrb	r2, [r1, #24]
 800a20c:	b085      	sub	sp, #20
 800a20e:	2a6e      	cmp	r2, #110	; 0x6e
 800a210:	4698      	mov	r8, r3
 800a212:	4606      	mov	r6, r0
 800a214:	460c      	mov	r4, r1
 800a216:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a218:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800a21c:	f000 80bc 	beq.w	800a398 <_printf_i+0x194>
 800a220:	d81a      	bhi.n	800a258 <_printf_i+0x54>
 800a222:	2a63      	cmp	r2, #99	; 0x63
 800a224:	d02e      	beq.n	800a284 <_printf_i+0x80>
 800a226:	d80a      	bhi.n	800a23e <_printf_i+0x3a>
 800a228:	2a00      	cmp	r2, #0
 800a22a:	f000 80c8 	beq.w	800a3be <_printf_i+0x1ba>
 800a22e:	2a58      	cmp	r2, #88	; 0x58
 800a230:	f000 808a 	beq.w	800a348 <_printf_i+0x144>
 800a234:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a238:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800a23c:	e02a      	b.n	800a294 <_printf_i+0x90>
 800a23e:	2a64      	cmp	r2, #100	; 0x64
 800a240:	d001      	beq.n	800a246 <_printf_i+0x42>
 800a242:	2a69      	cmp	r2, #105	; 0x69
 800a244:	d1f6      	bne.n	800a234 <_printf_i+0x30>
 800a246:	6821      	ldr	r1, [r4, #0]
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a24e:	d023      	beq.n	800a298 <_printf_i+0x94>
 800a250:	1d11      	adds	r1, r2, #4
 800a252:	6019      	str	r1, [r3, #0]
 800a254:	6813      	ldr	r3, [r2, #0]
 800a256:	e027      	b.n	800a2a8 <_printf_i+0xa4>
 800a258:	2a73      	cmp	r2, #115	; 0x73
 800a25a:	f000 80b4 	beq.w	800a3c6 <_printf_i+0x1c2>
 800a25e:	d808      	bhi.n	800a272 <_printf_i+0x6e>
 800a260:	2a6f      	cmp	r2, #111	; 0x6f
 800a262:	d02a      	beq.n	800a2ba <_printf_i+0xb6>
 800a264:	2a70      	cmp	r2, #112	; 0x70
 800a266:	d1e5      	bne.n	800a234 <_printf_i+0x30>
 800a268:	680a      	ldr	r2, [r1, #0]
 800a26a:	f042 0220 	orr.w	r2, r2, #32
 800a26e:	600a      	str	r2, [r1, #0]
 800a270:	e003      	b.n	800a27a <_printf_i+0x76>
 800a272:	2a75      	cmp	r2, #117	; 0x75
 800a274:	d021      	beq.n	800a2ba <_printf_i+0xb6>
 800a276:	2a78      	cmp	r2, #120	; 0x78
 800a278:	d1dc      	bne.n	800a234 <_printf_i+0x30>
 800a27a:	2278      	movs	r2, #120	; 0x78
 800a27c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800a280:	496e      	ldr	r1, [pc, #440]	; (800a43c <_printf_i+0x238>)
 800a282:	e064      	b.n	800a34e <_printf_i+0x14a>
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800a28a:	1d11      	adds	r1, r2, #4
 800a28c:	6019      	str	r1, [r3, #0]
 800a28e:	6813      	ldr	r3, [r2, #0]
 800a290:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a294:	2301      	movs	r3, #1
 800a296:	e0a3      	b.n	800a3e0 <_printf_i+0x1dc>
 800a298:	f011 0f40 	tst.w	r1, #64	; 0x40
 800a29c:	f102 0104 	add.w	r1, r2, #4
 800a2a0:	6019      	str	r1, [r3, #0]
 800a2a2:	d0d7      	beq.n	800a254 <_printf_i+0x50>
 800a2a4:	f9b2 3000 	ldrsh.w	r3, [r2]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	da03      	bge.n	800a2b4 <_printf_i+0xb0>
 800a2ac:	222d      	movs	r2, #45	; 0x2d
 800a2ae:	425b      	negs	r3, r3
 800a2b0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a2b4:	4962      	ldr	r1, [pc, #392]	; (800a440 <_printf_i+0x23c>)
 800a2b6:	220a      	movs	r2, #10
 800a2b8:	e017      	b.n	800a2ea <_printf_i+0xe6>
 800a2ba:	6820      	ldr	r0, [r4, #0]
 800a2bc:	6819      	ldr	r1, [r3, #0]
 800a2be:	f010 0f80 	tst.w	r0, #128	; 0x80
 800a2c2:	d003      	beq.n	800a2cc <_printf_i+0xc8>
 800a2c4:	1d08      	adds	r0, r1, #4
 800a2c6:	6018      	str	r0, [r3, #0]
 800a2c8:	680b      	ldr	r3, [r1, #0]
 800a2ca:	e006      	b.n	800a2da <_printf_i+0xd6>
 800a2cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a2d0:	f101 0004 	add.w	r0, r1, #4
 800a2d4:	6018      	str	r0, [r3, #0]
 800a2d6:	d0f7      	beq.n	800a2c8 <_printf_i+0xc4>
 800a2d8:	880b      	ldrh	r3, [r1, #0]
 800a2da:	4959      	ldr	r1, [pc, #356]	; (800a440 <_printf_i+0x23c>)
 800a2dc:	2a6f      	cmp	r2, #111	; 0x6f
 800a2de:	bf14      	ite	ne
 800a2e0:	220a      	movne	r2, #10
 800a2e2:	2208      	moveq	r2, #8
 800a2e4:	2000      	movs	r0, #0
 800a2e6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800a2ea:	6865      	ldr	r5, [r4, #4]
 800a2ec:	60a5      	str	r5, [r4, #8]
 800a2ee:	2d00      	cmp	r5, #0
 800a2f0:	f2c0 809c 	blt.w	800a42c <_printf_i+0x228>
 800a2f4:	6820      	ldr	r0, [r4, #0]
 800a2f6:	f020 0004 	bic.w	r0, r0, #4
 800a2fa:	6020      	str	r0, [r4, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d13f      	bne.n	800a380 <_printf_i+0x17c>
 800a300:	2d00      	cmp	r5, #0
 800a302:	f040 8095 	bne.w	800a430 <_printf_i+0x22c>
 800a306:	4675      	mov	r5, lr
 800a308:	2a08      	cmp	r2, #8
 800a30a:	d10b      	bne.n	800a324 <_printf_i+0x120>
 800a30c:	6823      	ldr	r3, [r4, #0]
 800a30e:	07da      	lsls	r2, r3, #31
 800a310:	d508      	bpl.n	800a324 <_printf_i+0x120>
 800a312:	6923      	ldr	r3, [r4, #16]
 800a314:	6862      	ldr	r2, [r4, #4]
 800a316:	429a      	cmp	r2, r3
 800a318:	bfde      	ittt	le
 800a31a:	2330      	movle	r3, #48	; 0x30
 800a31c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a320:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a324:	ebae 0305 	sub.w	r3, lr, r5
 800a328:	6123      	str	r3, [r4, #16]
 800a32a:	f8cd 8000 	str.w	r8, [sp]
 800a32e:	463b      	mov	r3, r7
 800a330:	aa03      	add	r2, sp, #12
 800a332:	4621      	mov	r1, r4
 800a334:	4630      	mov	r0, r6
 800a336:	f7ff feef 	bl	800a118 <_printf_common>
 800a33a:	3001      	adds	r0, #1
 800a33c:	d155      	bne.n	800a3ea <_printf_i+0x1e6>
 800a33e:	f04f 30ff 	mov.w	r0, #4294967295
 800a342:	b005      	add	sp, #20
 800a344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a348:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800a34c:	493c      	ldr	r1, [pc, #240]	; (800a440 <_printf_i+0x23c>)
 800a34e:	6822      	ldr	r2, [r4, #0]
 800a350:	6818      	ldr	r0, [r3, #0]
 800a352:	f012 0f80 	tst.w	r2, #128	; 0x80
 800a356:	f100 0504 	add.w	r5, r0, #4
 800a35a:	601d      	str	r5, [r3, #0]
 800a35c:	d001      	beq.n	800a362 <_printf_i+0x15e>
 800a35e:	6803      	ldr	r3, [r0, #0]
 800a360:	e002      	b.n	800a368 <_printf_i+0x164>
 800a362:	0655      	lsls	r5, r2, #25
 800a364:	d5fb      	bpl.n	800a35e <_printf_i+0x15a>
 800a366:	8803      	ldrh	r3, [r0, #0]
 800a368:	07d0      	lsls	r0, r2, #31
 800a36a:	bf44      	itt	mi
 800a36c:	f042 0220 	orrmi.w	r2, r2, #32
 800a370:	6022      	strmi	r2, [r4, #0]
 800a372:	b91b      	cbnz	r3, 800a37c <_printf_i+0x178>
 800a374:	6822      	ldr	r2, [r4, #0]
 800a376:	f022 0220 	bic.w	r2, r2, #32
 800a37a:	6022      	str	r2, [r4, #0]
 800a37c:	2210      	movs	r2, #16
 800a37e:	e7b1      	b.n	800a2e4 <_printf_i+0xe0>
 800a380:	4675      	mov	r5, lr
 800a382:	fbb3 f0f2 	udiv	r0, r3, r2
 800a386:	fb02 3310 	mls	r3, r2, r0, r3
 800a38a:	5ccb      	ldrb	r3, [r1, r3]
 800a38c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a390:	4603      	mov	r3, r0
 800a392:	2800      	cmp	r0, #0
 800a394:	d1f5      	bne.n	800a382 <_printf_i+0x17e>
 800a396:	e7b7      	b.n	800a308 <_printf_i+0x104>
 800a398:	6808      	ldr	r0, [r1, #0]
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	6949      	ldr	r1, [r1, #20]
 800a39e:	f010 0f80 	tst.w	r0, #128	; 0x80
 800a3a2:	d004      	beq.n	800a3ae <_printf_i+0x1aa>
 800a3a4:	1d10      	adds	r0, r2, #4
 800a3a6:	6018      	str	r0, [r3, #0]
 800a3a8:	6813      	ldr	r3, [r2, #0]
 800a3aa:	6019      	str	r1, [r3, #0]
 800a3ac:	e007      	b.n	800a3be <_printf_i+0x1ba>
 800a3ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a3b2:	f102 0004 	add.w	r0, r2, #4
 800a3b6:	6018      	str	r0, [r3, #0]
 800a3b8:	6813      	ldr	r3, [r2, #0]
 800a3ba:	d0f6      	beq.n	800a3aa <_printf_i+0x1a6>
 800a3bc:	8019      	strh	r1, [r3, #0]
 800a3be:	2300      	movs	r3, #0
 800a3c0:	6123      	str	r3, [r4, #16]
 800a3c2:	4675      	mov	r5, lr
 800a3c4:	e7b1      	b.n	800a32a <_printf_i+0x126>
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	1d11      	adds	r1, r2, #4
 800a3ca:	6019      	str	r1, [r3, #0]
 800a3cc:	6815      	ldr	r5, [r2, #0]
 800a3ce:	6862      	ldr	r2, [r4, #4]
 800a3d0:	2100      	movs	r1, #0
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	f7f5 ff04 	bl	80001e0 <memchr>
 800a3d8:	b108      	cbz	r0, 800a3de <_printf_i+0x1da>
 800a3da:	1b40      	subs	r0, r0, r5
 800a3dc:	6060      	str	r0, [r4, #4]
 800a3de:	6863      	ldr	r3, [r4, #4]
 800a3e0:	6123      	str	r3, [r4, #16]
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3e8:	e79f      	b.n	800a32a <_printf_i+0x126>
 800a3ea:	6923      	ldr	r3, [r4, #16]
 800a3ec:	462a      	mov	r2, r5
 800a3ee:	4639      	mov	r1, r7
 800a3f0:	4630      	mov	r0, r6
 800a3f2:	47c0      	blx	r8
 800a3f4:	3001      	adds	r0, #1
 800a3f6:	d0a2      	beq.n	800a33e <_printf_i+0x13a>
 800a3f8:	6823      	ldr	r3, [r4, #0]
 800a3fa:	079b      	lsls	r3, r3, #30
 800a3fc:	d507      	bpl.n	800a40e <_printf_i+0x20a>
 800a3fe:	2500      	movs	r5, #0
 800a400:	f104 0919 	add.w	r9, r4, #25
 800a404:	68e3      	ldr	r3, [r4, #12]
 800a406:	9a03      	ldr	r2, [sp, #12]
 800a408:	1a9b      	subs	r3, r3, r2
 800a40a:	429d      	cmp	r5, r3
 800a40c:	db05      	blt.n	800a41a <_printf_i+0x216>
 800a40e:	68e0      	ldr	r0, [r4, #12]
 800a410:	9b03      	ldr	r3, [sp, #12]
 800a412:	4298      	cmp	r0, r3
 800a414:	bfb8      	it	lt
 800a416:	4618      	movlt	r0, r3
 800a418:	e793      	b.n	800a342 <_printf_i+0x13e>
 800a41a:	2301      	movs	r3, #1
 800a41c:	464a      	mov	r2, r9
 800a41e:	4639      	mov	r1, r7
 800a420:	4630      	mov	r0, r6
 800a422:	47c0      	blx	r8
 800a424:	3001      	adds	r0, #1
 800a426:	d08a      	beq.n	800a33e <_printf_i+0x13a>
 800a428:	3501      	adds	r5, #1
 800a42a:	e7eb      	b.n	800a404 <_printf_i+0x200>
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d1a7      	bne.n	800a380 <_printf_i+0x17c>
 800a430:	780b      	ldrb	r3, [r1, #0]
 800a432:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a436:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a43a:	e765      	b.n	800a308 <_printf_i+0x104>
 800a43c:	0800a73a 	.word	0x0800a73a
 800a440:	0800a729 	.word	0x0800a729

0800a444 <memmove>:
 800a444:	4288      	cmp	r0, r1
 800a446:	b510      	push	{r4, lr}
 800a448:	eb01 0302 	add.w	r3, r1, r2
 800a44c:	d803      	bhi.n	800a456 <memmove+0x12>
 800a44e:	1e42      	subs	r2, r0, #1
 800a450:	4299      	cmp	r1, r3
 800a452:	d10c      	bne.n	800a46e <memmove+0x2a>
 800a454:	bd10      	pop	{r4, pc}
 800a456:	4298      	cmp	r0, r3
 800a458:	d2f9      	bcs.n	800a44e <memmove+0xa>
 800a45a:	1881      	adds	r1, r0, r2
 800a45c:	1ad2      	subs	r2, r2, r3
 800a45e:	42d3      	cmn	r3, r2
 800a460:	d100      	bne.n	800a464 <memmove+0x20>
 800a462:	bd10      	pop	{r4, pc}
 800a464:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a468:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a46c:	e7f7      	b.n	800a45e <memmove+0x1a>
 800a46e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a472:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a476:	e7eb      	b.n	800a450 <memmove+0xc>

0800a478 <_free_r>:
 800a478:	b538      	push	{r3, r4, r5, lr}
 800a47a:	4605      	mov	r5, r0
 800a47c:	2900      	cmp	r1, #0
 800a47e:	d045      	beq.n	800a50c <_free_r+0x94>
 800a480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a484:	1f0c      	subs	r4, r1, #4
 800a486:	2b00      	cmp	r3, #0
 800a488:	bfb8      	it	lt
 800a48a:	18e4      	addlt	r4, r4, r3
 800a48c:	f000 f8d6 	bl	800a63c <__malloc_lock>
 800a490:	4a1f      	ldr	r2, [pc, #124]	; (800a510 <_free_r+0x98>)
 800a492:	6813      	ldr	r3, [r2, #0]
 800a494:	4610      	mov	r0, r2
 800a496:	b933      	cbnz	r3, 800a4a6 <_free_r+0x2e>
 800a498:	6063      	str	r3, [r4, #4]
 800a49a:	6014      	str	r4, [r2, #0]
 800a49c:	4628      	mov	r0, r5
 800a49e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4a2:	f000 b8cc 	b.w	800a63e <__malloc_unlock>
 800a4a6:	42a3      	cmp	r3, r4
 800a4a8:	d90c      	bls.n	800a4c4 <_free_r+0x4c>
 800a4aa:	6821      	ldr	r1, [r4, #0]
 800a4ac:	1862      	adds	r2, r4, r1
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	bf04      	itt	eq
 800a4b2:	681a      	ldreq	r2, [r3, #0]
 800a4b4:	685b      	ldreq	r3, [r3, #4]
 800a4b6:	6063      	str	r3, [r4, #4]
 800a4b8:	bf04      	itt	eq
 800a4ba:	1852      	addeq	r2, r2, r1
 800a4bc:	6022      	streq	r2, [r4, #0]
 800a4be:	6004      	str	r4, [r0, #0]
 800a4c0:	e7ec      	b.n	800a49c <_free_r+0x24>
 800a4c2:	4613      	mov	r3, r2
 800a4c4:	685a      	ldr	r2, [r3, #4]
 800a4c6:	b10a      	cbz	r2, 800a4cc <_free_r+0x54>
 800a4c8:	42a2      	cmp	r2, r4
 800a4ca:	d9fa      	bls.n	800a4c2 <_free_r+0x4a>
 800a4cc:	6819      	ldr	r1, [r3, #0]
 800a4ce:	1858      	adds	r0, r3, r1
 800a4d0:	42a0      	cmp	r0, r4
 800a4d2:	d10b      	bne.n	800a4ec <_free_r+0x74>
 800a4d4:	6820      	ldr	r0, [r4, #0]
 800a4d6:	4401      	add	r1, r0
 800a4d8:	1858      	adds	r0, r3, r1
 800a4da:	4282      	cmp	r2, r0
 800a4dc:	6019      	str	r1, [r3, #0]
 800a4de:	d1dd      	bne.n	800a49c <_free_r+0x24>
 800a4e0:	6810      	ldr	r0, [r2, #0]
 800a4e2:	6852      	ldr	r2, [r2, #4]
 800a4e4:	605a      	str	r2, [r3, #4]
 800a4e6:	4401      	add	r1, r0
 800a4e8:	6019      	str	r1, [r3, #0]
 800a4ea:	e7d7      	b.n	800a49c <_free_r+0x24>
 800a4ec:	d902      	bls.n	800a4f4 <_free_r+0x7c>
 800a4ee:	230c      	movs	r3, #12
 800a4f0:	602b      	str	r3, [r5, #0]
 800a4f2:	e7d3      	b.n	800a49c <_free_r+0x24>
 800a4f4:	6820      	ldr	r0, [r4, #0]
 800a4f6:	1821      	adds	r1, r4, r0
 800a4f8:	428a      	cmp	r2, r1
 800a4fa:	bf04      	itt	eq
 800a4fc:	6811      	ldreq	r1, [r2, #0]
 800a4fe:	6852      	ldreq	r2, [r2, #4]
 800a500:	6062      	str	r2, [r4, #4]
 800a502:	bf04      	itt	eq
 800a504:	1809      	addeq	r1, r1, r0
 800a506:	6021      	streq	r1, [r4, #0]
 800a508:	605c      	str	r4, [r3, #4]
 800a50a:	e7c7      	b.n	800a49c <_free_r+0x24>
 800a50c:	bd38      	pop	{r3, r4, r5, pc}
 800a50e:	bf00      	nop
 800a510:	200078c0 	.word	0x200078c0

0800a514 <_malloc_r>:
 800a514:	b570      	push	{r4, r5, r6, lr}
 800a516:	1ccd      	adds	r5, r1, #3
 800a518:	f025 0503 	bic.w	r5, r5, #3
 800a51c:	3508      	adds	r5, #8
 800a51e:	2d0c      	cmp	r5, #12
 800a520:	bf38      	it	cc
 800a522:	250c      	movcc	r5, #12
 800a524:	2d00      	cmp	r5, #0
 800a526:	4606      	mov	r6, r0
 800a528:	db01      	blt.n	800a52e <_malloc_r+0x1a>
 800a52a:	42a9      	cmp	r1, r5
 800a52c:	d903      	bls.n	800a536 <_malloc_r+0x22>
 800a52e:	230c      	movs	r3, #12
 800a530:	6033      	str	r3, [r6, #0]
 800a532:	2000      	movs	r0, #0
 800a534:	bd70      	pop	{r4, r5, r6, pc}
 800a536:	f000 f881 	bl	800a63c <__malloc_lock>
 800a53a:	4a23      	ldr	r2, [pc, #140]	; (800a5c8 <_malloc_r+0xb4>)
 800a53c:	6814      	ldr	r4, [r2, #0]
 800a53e:	4621      	mov	r1, r4
 800a540:	b991      	cbnz	r1, 800a568 <_malloc_r+0x54>
 800a542:	4c22      	ldr	r4, [pc, #136]	; (800a5cc <_malloc_r+0xb8>)
 800a544:	6823      	ldr	r3, [r4, #0]
 800a546:	b91b      	cbnz	r3, 800a550 <_malloc_r+0x3c>
 800a548:	4630      	mov	r0, r6
 800a54a:	f000 f867 	bl	800a61c <_sbrk_r>
 800a54e:	6020      	str	r0, [r4, #0]
 800a550:	4629      	mov	r1, r5
 800a552:	4630      	mov	r0, r6
 800a554:	f000 f862 	bl	800a61c <_sbrk_r>
 800a558:	1c43      	adds	r3, r0, #1
 800a55a:	d126      	bne.n	800a5aa <_malloc_r+0x96>
 800a55c:	230c      	movs	r3, #12
 800a55e:	6033      	str	r3, [r6, #0]
 800a560:	4630      	mov	r0, r6
 800a562:	f000 f86c 	bl	800a63e <__malloc_unlock>
 800a566:	e7e4      	b.n	800a532 <_malloc_r+0x1e>
 800a568:	680b      	ldr	r3, [r1, #0]
 800a56a:	1b5b      	subs	r3, r3, r5
 800a56c:	d41a      	bmi.n	800a5a4 <_malloc_r+0x90>
 800a56e:	2b0b      	cmp	r3, #11
 800a570:	d90f      	bls.n	800a592 <_malloc_r+0x7e>
 800a572:	600b      	str	r3, [r1, #0]
 800a574:	50cd      	str	r5, [r1, r3]
 800a576:	18cc      	adds	r4, r1, r3
 800a578:	4630      	mov	r0, r6
 800a57a:	f000 f860 	bl	800a63e <__malloc_unlock>
 800a57e:	f104 000b 	add.w	r0, r4, #11
 800a582:	1d23      	adds	r3, r4, #4
 800a584:	f020 0007 	bic.w	r0, r0, #7
 800a588:	1ac3      	subs	r3, r0, r3
 800a58a:	d01b      	beq.n	800a5c4 <_malloc_r+0xb0>
 800a58c:	425a      	negs	r2, r3
 800a58e:	50e2      	str	r2, [r4, r3]
 800a590:	bd70      	pop	{r4, r5, r6, pc}
 800a592:	428c      	cmp	r4, r1
 800a594:	bf0d      	iteet	eq
 800a596:	6863      	ldreq	r3, [r4, #4]
 800a598:	684b      	ldrne	r3, [r1, #4]
 800a59a:	6063      	strne	r3, [r4, #4]
 800a59c:	6013      	streq	r3, [r2, #0]
 800a59e:	bf18      	it	ne
 800a5a0:	460c      	movne	r4, r1
 800a5a2:	e7e9      	b.n	800a578 <_malloc_r+0x64>
 800a5a4:	460c      	mov	r4, r1
 800a5a6:	6849      	ldr	r1, [r1, #4]
 800a5a8:	e7ca      	b.n	800a540 <_malloc_r+0x2c>
 800a5aa:	1cc4      	adds	r4, r0, #3
 800a5ac:	f024 0403 	bic.w	r4, r4, #3
 800a5b0:	42a0      	cmp	r0, r4
 800a5b2:	d005      	beq.n	800a5c0 <_malloc_r+0xac>
 800a5b4:	1a21      	subs	r1, r4, r0
 800a5b6:	4630      	mov	r0, r6
 800a5b8:	f000 f830 	bl	800a61c <_sbrk_r>
 800a5bc:	3001      	adds	r0, #1
 800a5be:	d0cd      	beq.n	800a55c <_malloc_r+0x48>
 800a5c0:	6025      	str	r5, [r4, #0]
 800a5c2:	e7d9      	b.n	800a578 <_malloc_r+0x64>
 800a5c4:	bd70      	pop	{r4, r5, r6, pc}
 800a5c6:	bf00      	nop
 800a5c8:	200078c0 	.word	0x200078c0
 800a5cc:	200078c4 	.word	0x200078c4

0800a5d0 <_realloc_r>:
 800a5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d2:	4607      	mov	r7, r0
 800a5d4:	4614      	mov	r4, r2
 800a5d6:	460e      	mov	r6, r1
 800a5d8:	b921      	cbnz	r1, 800a5e4 <_realloc_r+0x14>
 800a5da:	4611      	mov	r1, r2
 800a5dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a5e0:	f7ff bf98 	b.w	800a514 <_malloc_r>
 800a5e4:	b922      	cbnz	r2, 800a5f0 <_realloc_r+0x20>
 800a5e6:	f7ff ff47 	bl	800a478 <_free_r>
 800a5ea:	4625      	mov	r5, r4
 800a5ec:	4628      	mov	r0, r5
 800a5ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5f0:	f000 f826 	bl	800a640 <_malloc_usable_size_r>
 800a5f4:	4284      	cmp	r4, r0
 800a5f6:	d90f      	bls.n	800a618 <_realloc_r+0x48>
 800a5f8:	4621      	mov	r1, r4
 800a5fa:	4638      	mov	r0, r7
 800a5fc:	f7ff ff8a 	bl	800a514 <_malloc_r>
 800a600:	4605      	mov	r5, r0
 800a602:	2800      	cmp	r0, #0
 800a604:	d0f2      	beq.n	800a5ec <_realloc_r+0x1c>
 800a606:	4631      	mov	r1, r6
 800a608:	4622      	mov	r2, r4
 800a60a:	f7ff fbfd 	bl	8009e08 <memcpy>
 800a60e:	4631      	mov	r1, r6
 800a610:	4638      	mov	r0, r7
 800a612:	f7ff ff31 	bl	800a478 <_free_r>
 800a616:	e7e9      	b.n	800a5ec <_realloc_r+0x1c>
 800a618:	4635      	mov	r5, r6
 800a61a:	e7e7      	b.n	800a5ec <_realloc_r+0x1c>

0800a61c <_sbrk_r>:
 800a61c:	b538      	push	{r3, r4, r5, lr}
 800a61e:	4c06      	ldr	r4, [pc, #24]	; (800a638 <_sbrk_r+0x1c>)
 800a620:	2300      	movs	r3, #0
 800a622:	4605      	mov	r5, r0
 800a624:	4608      	mov	r0, r1
 800a626:	6023      	str	r3, [r4, #0]
 800a628:	f7f5 ffdc 	bl	80005e4 <_sbrk>
 800a62c:	1c43      	adds	r3, r0, #1
 800a62e:	d102      	bne.n	800a636 <_sbrk_r+0x1a>
 800a630:	6823      	ldr	r3, [r4, #0]
 800a632:	b103      	cbz	r3, 800a636 <_sbrk_r+0x1a>
 800a634:	602b      	str	r3, [r5, #0]
 800a636:	bd38      	pop	{r3, r4, r5, pc}
 800a638:	200079f4 	.word	0x200079f4

0800a63c <__malloc_lock>:
 800a63c:	4770      	bx	lr

0800a63e <__malloc_unlock>:
 800a63e:	4770      	bx	lr

0800a640 <_malloc_usable_size_r>:
 800a640:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800a644:	2800      	cmp	r0, #0
 800a646:	f1a0 0004 	sub.w	r0, r0, #4
 800a64a:	bfbc      	itt	lt
 800a64c:	580b      	ldrlt	r3, [r1, r0]
 800a64e:	18c0      	addlt	r0, r0, r3
 800a650:	4770      	bx	lr
	...

0800a654 <_init>:
 800a654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a656:	bf00      	nop
 800a658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a65a:	bc08      	pop	{r3}
 800a65c:	469e      	mov	lr, r3
 800a65e:	4770      	bx	lr

0800a660 <_fini>:
 800a660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a662:	bf00      	nop
 800a664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a666:	bc08      	pop	{r3}
 800a668:	469e      	mov	lr, r3
 800a66a:	4770      	bx	lr
